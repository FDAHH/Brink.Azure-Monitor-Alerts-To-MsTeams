//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace JiraApiClient
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get announcement banner configuration
        /// </summary>
        /// <remarks>
        /// Returns the current announcement banner configuration.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AnnouncementBannerConfiguration> GetBannerAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update announcement banner configuration
        /// </summary>
        /// <remarks>
        /// Updates the announcement banner configuration.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetBannerAsync(AnnouncementBannerConfigurationUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom fields
        /// </summary>
        /// <remarks>
        /// Updates the value of one or more custom fields on one or more issues. Combinations of custom field and issue should be unique within the request. Custom fields can only be updated by the Forge app that created them.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
        /// </remarks>
        /// <param name="generateChangelog">Whether to generate a changelog for this update.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateMultipleCustomFieldValuesAsync(MultipleCustomFieldValuesUpdateDetails body, bool? generateChangelog = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom field configurations
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of configurations for a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).
        /// <br/>
        /// <br/>The result can be filtered by one of these criteria:
        /// <br/>
        /// <br/> *  `id`.
        /// <br/> *  `fieldContextId`.
        /// <br/> *  `issueId`.
        /// <br/> *  `projectKeyOrId` and `issueTypeId`.
        /// <br/>
        /// <br/>Otherwise, all configurations are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.
        /// </remarks>
        /// <param name="fieldIdOrKey">The ID or key of the custom field, for example `customfield_10000`.</param>
        /// <param name="id">The list of configuration IDs. To include multiple configurations, separate IDs with an ampersand: `id=10000&amp;id=10001`. Can't be provided with `fieldContextId`, `issueId`, `projectKeyOrId`, or `issueTypeId`.</param>
        /// <param name="fieldContextId">The list of field context IDs. To include multiple field contexts, separate IDs with an ampersand: `fieldContextId=10000&amp;fieldContextId=10001`. Can't be provided with `id`, `issueId`, `projectKeyOrId`, or `issueTypeId`.</param>
        /// <param name="issueId">The ID of the issue to filter results by. If the issue doesn't exist, an empty list is returned. Can't be provided with `projectKeyOrId`, or `issueTypeId`.</param>
        /// <param name="projectKeyOrId">The ID or key of the project to filter results by. Must be provided with `issueTypeId`. Can't be provided with `issueId`.</param>
        /// <param name="issueTypeId">The ID of the issue type to filter results by. Must be provided with `projectKeyOrId`. Can't be provided with `issueId`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanContextualConfiguration> GetCustomFieldConfigurationAsync(string fieldIdOrKey, System.Collections.Generic.IEnumerable<long> id = null, System.Collections.Generic.IEnumerable<long> fieldContextId = null, long? issueId = null, string projectKeyOrId = null, string issueTypeId = null, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom field configurations
        /// </summary>
        /// <remarks>
        /// Update the configuration for contexts of a custom field created by a [Forge app](https://developer.atlassian.com/platform/forge/).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the Forge app that created the custom field.
        /// </remarks>
        /// <param name="fieldIdOrKey">The ID or key of the custom field, for example `customfield_10000`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateCustomFieldConfigurationAsync(string fieldIdOrKey, CustomFieldConfigurations body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom field value
        /// </summary>
        /// <remarks>
        /// Updates the value of a custom field on one or more issues. Custom fields can only be updated by the Forge app that created them.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only the app that created the custom field can update its values with this operation.
        /// </remarks>
        /// <param name="fieldIdOrKey">The ID or key of the custom field. For example, `customfield_10010`.</param>
        /// <param name="generateChangelog">Whether to generate a changelog for this update.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateCustomFieldValueAsync(string fieldIdOrKey, CustomFieldValueUpdateDetails body, bool? generateChangelog = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get application property
        /// </summary>
        /// <remarks>
        /// Returns all application properties or an application property.
        /// <br/>
        /// <br/>If you specify a value for the `key` parameter, then an application property is returned as an object (not in an array). Otherwise, an array of all editable application properties is returned. See [Set application property](#api-rest-api-3-application-properties-id-put) for descriptions of editable properties.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="key">The key of the application property.</param>
        /// <param name="permissionLevel">The permission level of all items being returned in the list.</param>
        /// <param name="keyFilter">When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationProperty>> GetApplicationPropertyAsync(string key = null, string permissionLevel = null, string keyFilter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get advanced settings
        /// </summary>
        /// <remarks>
        /// Returns the application properties that are accessible on the *Advanced Settings* page. To navigate to the *Advanced Settings* page in Jira, choose the Jira icon &gt; **Jira settings** &gt; **System**, **General Configuration** and then click **Advanced Settings** (in the upper right).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationProperty>> GetAdvancedSettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set application property
        /// </summary>
        /// <remarks>
        /// Changes the value of an application property. For example, you can change the value of the `jira.clone.prefix` from its default value of *CLONE -* to *Clone -* if you prefer sentence case capitalization. Editable properties are described below along with their default values.
        /// <br/>
        /// <br/>#### Advanced settings ####
        /// <br/>
        /// <br/>The advanced settings below are also accessible in [Jira](https://confluence.atlassian.com/x/vYXKM).
        /// <br/>
        /// <br/>| Key | Description | Default value |  
        /// <br/>| -- | -- | -- |  
        /// <br/>| `jira.clone.prefix` | The string of text prefixed to the title of a cloned issue. | `CLONE -` |  
        /// <br/>| `jira.date.picker.java.format` | The date format for the Java (server-side) generated dates. This must be the same as the `jira.date.picker.javascript.format` format setting. | `d/MMM/yy` |  
        /// <br/>| `jira.date.picker.javascript.format` | The date format for the JavaScript (client-side) generated dates. This must be the same as the `jira.date.picker.java.format` format setting. | `%e/%b/%y` |  
        /// <br/>| `jira.date.time.picker.java.format` | The date format for the Java (server-side) generated date times. This must be the same as the `jira.date.time.picker.javascript.format` format setting. | `dd/MMM/yy h:mm a` |  
        /// <br/>| `jira.date.time.picker.javascript.format` | The date format for the JavaScript (client-side) generated date times. This must be the same as the `jira.date.time.picker.java.format` format setting. | `%e/%b/%y %I:%M %p` |  
        /// <br/>| `jira.issue.actions.order` | The default order of actions (such as *Comments* or *Change history*) displayed on the issue view. | `asc` |  
        /// <br/>| `jira.table.cols.subtasks` | The columns to show while viewing subtask issues in a table. For example, a list of subtasks on an issue. | `issuetype, status, assignee, progress` |  
        /// <br/>| `jira.view.issue.links.sort.order` | The sort order of the list of issue links on the issue view. | `type, status, priority` |  
        /// <br/>| `jira.comment.collapsing.minimum.hidden` | The minimum number of comments required for comment collapsing to occur. A value of `0` disables comment collapsing. | `4` |  
        /// <br/>| `jira.newsletter.tip.delay.days` | The number of days before a prompt to sign up to the Jira Insiders newsletter is shown. A value of `-1` disables this feature. | `7` |  
        /// <br/>
        /// <br/>
        /// <br/>#### Look and feel ####
        /// <br/>
        /// <br/>The settings listed below adjust the [look and feel](https://confluence.atlassian.com/x/VwCLLg).
        /// <br/>
        /// <br/>| Key | Description | Default value |  
        /// <br/>| -- | -- | -- |  
        /// <br/>| `jira.lf.date.time` | The [ time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `h:mm a` |  
        /// <br/>| `jira.lf.date.day` | The [ day format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `EEEE h:mm a` |  
        /// <br/>| `jira.lf.date.complete` | The [ date and time format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy h:mm a` |  
        /// <br/>| `jira.lf.date.dmy` | The [ date format](https://docs.oracle.com/javase/6/docs/api/index.html?java/text/SimpleDateFormat.html). | `dd/MMM/yy` |  
        /// <br/>| `jira.date.time.picker.use.iso8061` | When enabled, sets Monday as the first day of the week in the date picker, as specified by the ISO8601 standard. | `false` |  
        /// <br/>| `jira.lf.logo.url` | The URL of the logo image file. | `/images/icon-jira-logo.png` |  
        /// <br/>| `jira.lf.logo.show.application.title` | Controls the visibility of the application title on the sidebar. | `false` |  
        /// <br/>| `jira.lf.favicon.url` | The URL of the favicon. | `/favicon.ico` |  
        /// <br/>| `jira.lf.favicon.hires.url` | The URL of the high-resolution favicon. | `/images/64jira.png` |  
        /// <br/>| `jira.lf.navigation.bgcolour` | The background color of the sidebar. | `#0747A6` |  
        /// <br/>| `jira.lf.navigation.highlightcolour` | The color of the text and logo of the sidebar. | `#DEEBFF` |  
        /// <br/>| `jira.lf.hero.button.base.bg.colour` | The background color of the hero button. | `#3b7fc4` |  
        /// <br/>| `jira.title` | The text for the application title. The application title can also be set in *General settings*. | `Jira` |  
        /// <br/>| `jira.option.globalsharing` | Whether filters and dashboards can be shared with anyone signed into Jira. | `true` |  
        /// <br/>| `xflow.product.suggestions.enabled` | Whether to expose product suggestions for other Atlassian products within Jira. | `true` |  
        /// <br/>
        /// <br/>
        /// <br/>#### Other settings ####
        /// <br/>
        /// <br/>| Key | Description | Default value |  
        /// <br/>| -- | -- | -- |  
        /// <br/>| `jira.issuenav.criteria.autoupdate` | Whether instant updates to search criteria is active. | `true` |  
        /// <br/>
        /// <br/>
        /// <br/>*Note: Be careful when changing [application properties and advanced settings](https://confluence.atlassian.com/x/vYXKM).*
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The key of the application property to update.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApplicationProperty> SetApplicationPropertyAsync(string id, SimpleApplicationPropertyBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all application roles
        /// </summary>
        /// <remarks>
        /// Returns all application roles. In Jira, application roles are managed using the [Application access configuration](https://confluence.atlassian.com/x/3YxjL) page.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ApplicationRole>> GetAllApplicationRolesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get application role
        /// </summary>
        /// <remarks>
        /// Returns an application role.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="key">The key of the application role. Use the [Get all application roles](#api-rest-api-3-applicationrole-get) operation to get the key for each application role.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ApplicationRole> GetApplicationRoleAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachment content
        /// </summary>
        /// <remarks>
        /// Returns the contents of an attachment. A `Range` header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.
        /// <br/>
        /// <br/>To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** For the issue containing the attachment:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="redirect">Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.</param>
        /// <returns>Returned if the request is successful when `redirect` is set to `false`.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetAttachmentContentAsync(string id, bool? redirect = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Jira attachment settings
        /// </summary>
        /// <remarks>
        /// Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.
        /// <br/>
        /// <br/>Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AttachmentSettings> GetAttachmentMetaAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachment thumbnail
        /// </summary>
        /// <remarks>
        /// Returns the thumbnail of an attachment.
        /// <br/>
        /// <br/>To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** For the issue containing the attachment:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="redirect">Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to `false` to avoid making multiple requests to download the attachment.</param>
        /// <param name="fallbackToDefault">Whether a default thumbnail is returned when the requested thumbnail is not found.</param>
        /// <param name="width">The maximum width to scale the thumbnail to.</param>
        /// <param name="height">The maximum height to scale the thumbnail to.</param>
        /// <returns>Returned if the request is successful when `redirect` is set to `false`.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetAttachmentThumbnailAsync(string id, bool? redirect = null, bool? fallbackToDefault = null, int? width = null, int? height = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get attachment metadata
        /// </summary>
        /// <remarks>
        /// Returns the metadata for an attachment. Note that the attachment itself is not returned.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AttachmentMetadata> GetAttachmentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete attachment
        /// </summary>
        /// <remarks>
        /// Deletes an attachment from an issue.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** For the project holding the issue containing the attachment:
        /// <br/>
        /// <br/> *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.
        /// <br/> *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.
        /// </remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveAttachmentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all metadata for an expanded attachment
        /// </summary>
        /// <remarks>
        /// Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.
        /// <br/>
        /// <br/>Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment's ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment's contents.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** For the issue containing the attachment:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AttachmentArchiveMetadataReadable> ExpandAttachmentForHumansAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get contents metadata for an expanded attachment
        /// </summary>
        /// <remarks>
        /// Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.
        /// <br/>
        /// <br/>Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment's ID and name.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** For the issue containing the attachment:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <returns>Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AttachmentArchiveImpl> ExpandAttachmentForMachinesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get audit records
        /// </summary>
        /// <remarks>
        /// Returns a list of audit records. The list can be filtered to include items:
        /// <br/>
        /// <br/> *  where each item in `filter` has at least one match in any of these fields:
        /// <br/>    
        /// <br/>     *  `summary`
        /// <br/>     *  `category`
        /// <br/>     *  `eventSource`
        /// <br/>     *  `objectItem.name` If the object is a user, account ID is available to filter.
        /// <br/>     *  `objectItem.parentName`
        /// <br/>     *  `objectItem.typeName`
        /// <br/>     *  `changedValues.changedFrom`
        /// <br/>     *  `changedValues.changedTo`
        /// <br/>     *  `remoteAddress`
        /// <br/>    
        /// <br/>    For example, if `filter` contains *man ed*, an audit record containing `summary": "User added to group"` and `"category": "group management"` is returned.
        /// <br/> *  created on or after a date and time.
        /// <br/> *  created or or before a date and time.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="offset">The number of records to skip before returning the first result.</param>
        /// <param name="limit">The maximum number of results to return.</param>
        /// <param name="filter">The strings to match with audit field content, space separated.</param>
        /// <param name="from">The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.</param>
        /// <param name="to">The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuditRecords> GetAuditRecordsAsync(int? offset = null, int? limit = null, string filter = null, System.DateTimeOffset? from = null, System.DateTimeOffset? to = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get system avatars by type
        /// </summary>
        /// <remarks>
        /// Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="type">The avatar type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SystemAvatars> GetAllSystemAvatarsAsync(Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get comments by IDs
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Comments are returned where the user:
        /// <br/>
        /// <br/> *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="body">The list of comment IDs.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `renderedBody` Returns the comment body rendered in HTML.
        /// <br/> *  `properties` Returns the comment's properties.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanComment> GetCommentsByIdsAsync(IssueCommentListRequestBean body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get comment property keys
        /// </summary>
        /// <remarks>
        /// Returns the keys of all the properties of a comment.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="commentId">The ID of the comment.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PropertyKeys> GetCommentPropertyKeysAsync(string commentId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get comment property
        /// </summary>
        /// <remarks>
        /// Returns the value of a comment property.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityProperty> GetCommentPropertyAsync(string commentId, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set comment property
        /// </summary>
        /// <remarks>
        /// Creates or updates the value of a property for a comment. Use this resource to store custom data against a comment.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** either of:
        /// <br/>
        /// <br/> *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on any comment.
        /// <br/> *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to create or update the value of a property on a comment created by the user.
        /// <br/>
        /// <br/>Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
        /// </remarks>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="propertyKey">The key of the property. The maximum length is 255 characters.</param>
        /// <returns>Returned if the comment property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetCommentPropertyAsync(string commentId, string propertyKey, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete comment property
        /// </summary>
        /// <remarks>
        /// Deletes a comment property.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** either of:
        /// <br/>
        /// <br/> *  *Edit All Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from any comment.
        /// <br/> *  *Edit Own Comments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete a property from a comment created by the user.
        /// <br/>
        /// <br/>Also, when the visibility of a comment is restricted to a role or group the user must be a member of that role or group.
        /// </remarks>
        /// <param name="commentId">The ID of the comment.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCommentPropertyAsync(string commentId, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create component
        /// </summary>
        /// <remarks>
        /// Creates a component. Use components to provide containers for issues within a project.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectComponent> CreateComponentAsync(ProjectComponent body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get component
        /// </summary>
        /// <remarks>
        /// Returns a component.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.
        /// </remarks>
        /// <param name="id">The ID of the component.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectComponent> GetComponentAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update component
        /// </summary>
        /// <remarks>
        /// Updates a component. Any fields included in the request are overwritten. If `leadAccountId` is an empty string ("") the component lead is removed.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the component.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectComponent> UpdateComponentAsync(string id, ProjectComponent body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete component
        /// </summary>
        /// <remarks>
        /// Deletes a component.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the component.</param>
        /// <param name="moveIssuesTo">The ID of the component to replace the deleted component. If this value is null no replacement is made.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteComponentAsync(string id, string moveIssuesTo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get component issues count
        /// </summary>
        /// <remarks>
        /// Returns the counts of issues assigned to the component.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="id">The ID of the component.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComponentIssuesCount> GetComponentRelatedIssuesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get global settings
        /// </summary>
        /// <remarks>
        /// Returns the [global settings](https://confluence.atlassian.com/x/qYXKM) in Jira. These settings determine whether optional features (for example, subtasks, time tracking, and others) are enabled. If time tracking is enabled, this operation also returns the time tracking configuration.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Configuration> GetConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get selected time tracking provider
        /// </summary>
        /// <remarks>
        /// Returns the time tracking provider that is currently selected. Note that if time tracking is disabled, then a successful but empty response is returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful and time tracking is enabled.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeTrackingProvider> GetSelectedTimeTrackingImplementationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Select time tracking provider
        /// </summary>
        /// <remarks>
        /// Selects a time tracking provider.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SelectTimeTrackingImplementationAsync(TimeTrackingProvider body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all time tracking providers
        /// </summary>
        /// <remarks>
        /// Returns all time tracking providers. By default, Jira only has one time tracking provider: *JIRA provided time tracking*. However, you can install other time tracking providers via apps from the Atlassian Marketplace. For more information on time tracking providers, see the documentation for the [ Time Tracking Provider](https://developer.atlassian.com/cloud/jira/platform/modules/time-tracking-provider/) module.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<TimeTrackingProvider>> GetAvailableTimeTrackingImplementationsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get time tracking settings
        /// </summary>
        /// <remarks>
        /// Returns the time tracking settings. This includes settings such as the time format, default time unit, and others. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeTrackingConfiguration> GetSharedTimeTrackingConfigurationAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set time tracking settings
        /// </summary>
        /// <remarks>
        /// Sets the time tracking settings.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TimeTrackingConfiguration> SetSharedTimeTrackingConfigurationAsync(TimeTrackingConfiguration body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom field option
        /// </summary>
        /// <remarks>
        /// Returns a custom field option. For example, an option in a select list.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** The custom field option is returned as follows:
        /// <br/>
        /// <br/> *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/> *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the custom field is used in, and the field is visible in at least one layout the user has permission to view.
        /// </remarks>
        /// <param name="id">The ID of the custom field option.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomFieldOption> GetCustomFieldOptionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all dashboards
        /// </summary>
        /// <remarks>
        /// Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="filter">The filter applied to the list of dashboards. Valid values are:
        /// <br/>
        /// <br/> *  `favourite` Returns dashboards the user has marked as favorite.
        /// <br/> *  `my` Returns dashboards owned by the user.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageOfDashboards> GetAllDashboardsAsync(Filter2? filter = null, int? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create dashboard
        /// </summary>
        /// <remarks>
        /// Creates a dashboard.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="body">Dashboard details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Dashboard> CreateDashboardAsync(DashboardDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk edit dashboards
        /// </summary>
        /// <remarks>
        /// Bulk edit dashboards. Maximum number of dashboards to be edited at the same time is 100.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None
        /// <br/>
        /// <br/>The dashboards to be updated must be owned by the user, or the user must be an administrator.
        /// </remarks>
        /// <param name="body">The details of dashboards being updated in bulk.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkEditShareableEntityResponse> BulkEditDashboardsAsync(BulkEditShareableEntityRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available gadgets
        /// </summary>
        /// <remarks>
        /// Gets a list of all available gadgets that can be added to all dashboards.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AvailableDashboardGadgetsResponse> GetAllAvailableDashboardGadgetsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for dashboards
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:
        /// <br/>
        /// <br/> *  Dashboards owned by the user. Not returned for anonymous users.
        /// <br/> *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.
        /// <br/> *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.
        /// <br/> *  Dashboards shared with a public project.
        /// <br/> *  Dashboards shared with the public.
        /// </remarks>
        /// <param name="dashboardName">String used to perform a case-insensitive partial match with `name`.</param>
        /// <param name="accountId">User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.</param>
        /// <param name="owner">This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.</param>
        /// <param name="groupname">As a group's name can change, use of `groupId` is recommended. Group name used to return dashboards that are shared with a group that matches `sharePermissions.group.name`. This parameter cannot be used with the `groupId` parameter.</param>
        /// <param name="groupId">Group ID used to return dashboards that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.</param>
        /// <param name="projectId">Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.
        /// <br/> *  `favourite_count` Sorts by dashboard popularity.
        /// <br/> *  `id` Sorts by dashboard ID.
        /// <br/> *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.
        /// <br/> *  `name` Sorts by dashboard name.
        /// <br/> *  `owner` Sorts by dashboard owner name.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="status">The status to filter by. It may be active, archived or deleted.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `description` Returns the description of the dashboard.
        /// <br/> *  `owner` Returns the owner of the dashboard.
        /// <br/> *  `viewUrl` Returns the URL that is used to view the dashboard.
        /// <br/> *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.
        /// <br/> *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.
        /// <br/> *  `sharePermissions` Returns details of the share permissions defined for the dashboard.
        /// <br/> *  `editPermissions` Returns details of the edit permissions defined for the dashboard.
        /// <br/> *  `isWritable` Returns whether the current user has permission to edit the dashboard.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanDashboard> GetDashboardsPaginatedAsync(string dashboardName = null, string accountId = null, string owner = null, string groupname = null, string groupId = null, long? projectId = null, OrderBy? orderBy = null, long? startAt = null, int? maxResults = null, Status2? status = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get gadgets
        /// </summary>
        /// <remarks>
        /// Returns a list of dashboard gadgets on a dashboard.
        /// <br/>
        /// <br/>This operation returns:
        /// <br/>
        /// <br/> *  Gadgets from a list of IDs, when `id` is set.
        /// <br/> *  Gadgets with a module key, when `moduleKey` is set.
        /// <br/> *  Gadgets from a list of URIs, when `uri` is set.
        /// <br/> *  All gadgets, when no other parameters are set.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="moduleKey">The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: `moduleKey=key:one&amp;moduleKey=key:two`.</param>
        /// <param name="uri">The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: `uri=/rest/example/uri/1&amp;uri=/rest/example/uri/2`.</param>
        /// <param name="gadgetId">The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: `gadgetId=10000&amp;gadgetId=10001`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DashboardGadgetResponse> GetAllGadgetsAsync(long dashboardId, System.Collections.Generic.IEnumerable<string> moduleKey = null, System.Collections.Generic.IEnumerable<string> uri = null, System.Collections.Generic.IEnumerable<long> gadgetId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add gadget to dashboard
        /// </summary>
        /// <remarks>
        /// Adds a gadget to a dashboard.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DashboardGadget> AddGadgetAsync(long dashboardId, DashboardGadgetSettings body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update gadget on dashboard
        /// </summary>
        /// <remarks>
        /// Changes the title, position, and color of the gadget on a dashboard.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="gadgetId">The ID of the gadget.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateGadgetAsync(long dashboardId, long gadgetId, DashboardGadgetUpdateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove gadget from dashboard
        /// </summary>
        /// <remarks>
        /// Removes a dashboard gadget from a dashboard.
        /// <br/>
        /// <br/>When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="gadgetId">The ID of the gadget.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RemoveGadgetAsync(long dashboardId, long gadgetId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get dashboard item property keys
        /// </summary>
        /// <remarks>
        /// Returns the keys of all properties for a dashboard item.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
        /// </remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="itemId">The ID of the dashboard item.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PropertyKeys> GetDashboardItemPropertyKeysAsync(string dashboardId, string itemId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get dashboard item property
        /// </summary>
        /// <remarks>
        /// Returns the key and value of a dashboard item property.
        /// <br/>
        /// <br/>A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
        /// <br/>
        /// <br/>When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
        /// <br/>
        /// <br/>There is no resource to set or get dashboard items.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.
        /// </remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="itemId">The ID of the dashboard item.</param>
        /// <param name="propertyKey">The key of the dashboard item property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityProperty> GetDashboardItemPropertyAsync(string dashboardId, string itemId, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set dashboard item property
        /// </summary>
        /// <remarks>
        /// Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.
        /// <br/>
        /// <br/>A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).
        /// <br/>
        /// <br/>When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item's content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.
        /// <br/>
        /// <br/>There is no resource to set or get dashboard items.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
        /// </remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="itemId">The ID of the dashboard item.</param>
        /// <param name="propertyKey">The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to "config", the request body's JSON must be an object with all keys and values as strings.</param>
        /// <returns>Returned if the dashboard item property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetDashboardItemPropertyAsync(string dashboardId, string itemId, string propertyKey, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete dashboard item property
        /// </summary>
        /// <remarks>
        /// Deletes a dashboard item property.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.
        /// </remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="itemId">The ID of the dashboard item.</param>
        /// <param name="propertyKey">The key of the dashboard item property.</param>
        /// <returns>Returned if the dashboard item property is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDashboardItemPropertyAsync(string dashboardId, string itemId, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get dashboard
        /// </summary>
        /// <remarks>
        /// Returns a dashboard.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// <br/>
        /// <br/>However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.
        /// </remarks>
        /// <param name="id">The ID of the dashboard.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Dashboard> GetDashboardAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update dashboard
        /// </summary>
        /// <remarks>
        /// Updates a dashboard, replacing all the dashboard details with those provided.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None
        /// <br/>
        /// <br/>The dashboard to be updated must be owned by the user.
        /// </remarks>
        /// <param name="id">The ID of the dashboard to update.</param>
        /// <param name="body">Replacement dashboard details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Dashboard> UpdateDashboardAsync(string id, DashboardDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete dashboard
        /// </summary>
        /// <remarks>
        /// Deletes a dashboard.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None
        /// <br/>
        /// <br/>The dashboard to be deleted must be owned by the user.
        /// </remarks>
        /// <param name="id">The ID of the dashboard.</param>
        /// <returns>Returned if the dashboard is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDashboardAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Copy dashboard
        /// </summary>
        /// <remarks>
        /// Copies a dashboard. Any values provided in the `dashboard` parameter replace those in the copied dashboard.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None
        /// <br/>
        /// <br/>The dashboard to be copied must be owned by or shared with the user.
        /// </remarks>
        /// <param name="body">Dashboard details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Dashboard> CopyDashboardAsync(string id, DashboardDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get events
        /// </summary>
        /// <remarks>
        /// Returns all issue events.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IssueEvent>> GetEventsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Analyse Jira expression
        /// </summary>
        /// <remarks>
        /// Analyses and validates Jira expressions.
        /// <br/>
        /// <br/>As an experimental feature, this operation can also attempt to type-check the expressions.
        /// <br/>
        /// <br/>Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required**: None.
        /// </remarks>
        /// <param name="body">The Jira expressions to analyse.</param>
        /// <param name="check">The check to perform:
        /// <br/>
        /// <br/> *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.
        /// <br/> *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.
        /// <br/> *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JiraExpressionsAnalysis> AnalyseExpressionAsync(JiraExpressionForAnalysis body, Check? check = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Evaluate Jira expression
        /// </summary>
        /// <remarks>
        /// Evaluates a Jira expression and returns its value.
        /// <br/>
        /// <br/>This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.
        /// <br/>
        /// <br/>#### Context variables ####
        /// <br/>
        /// <br/>The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.
        /// <br/>
        /// <br/> *  `user` ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to `null` if the request is anonymous.
        /// <br/> *  `app` ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).
        /// <br/> *  `issue` ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.
        /// <br/> *  `issues` ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.
        /// <br/> *  `project` ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.
        /// <br/> *  `sprint` ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.
        /// <br/> *  `board` ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.
        /// <br/> *  `serviceDesk` ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.
        /// <br/> *  `customerRequest` ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.
        /// <br/>
        /// <br/>Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:
        /// <br/>
        /// <br/> *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
        /// <br/> *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
        /// <br/> *  `json`: A JSON object containing custom content.
        /// <br/> *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.  
        /// <br/>Permission to access Jira Software is required to access Jira Software context variables (`board` and `sprint`) or fields (for example, `issue.sprint`).
        /// </remarks>
        /// <param name="body">The Jira expression and the evaluation context.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.</param>
        /// <returns>Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JiraExpressionResult> EvaluateJiraExpressionAsync(JiraExpressionEvalRequestBean body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get fields
        /// </summary>
        /// <remarks>
        /// Returns system and custom issue fields according to the following rules:
        /// <br/>
        /// <br/> *  Fields that cannot be added to the issue navigator are always returned.
        /// <br/> *  Fields that cannot be placed on an issue screen are always returned.
        /// <br/> *  Fields that depend on global Jira settings are only returned if the setting is enabled. That is, timetracking fields, subtasks, votes, and watches.
        /// <br/> *  For all other fields, this operation only returns the fields that the user has permission to view (that is, the field is used in at least one project that the user has *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.)
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FieldDetails>> GetFieldsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create custom field
        /// </summary>
        /// <remarks>
        /// Creates a custom field.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="body">Definition of the custom field to be created</param>
        /// <returns>Returned if the custom field is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FieldDetails> CreateCustomFieldAsync(CustomFieldDefinitionJsonBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get fields paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of fields for Classic Jira projects. The list can include:
        /// <br/>
        /// <br/> *  all fields
        /// <br/> *  specific fields, by defining `id`
        /// <br/> *  fields that contain a string in the field name or description, by defining `query`
        /// <br/> *  specific fields that contain a string in the field name or description, by defining `id` and `query`
        /// <br/>
        /// <br/>Only custom fields can be queried, `type` must be set to `custom`.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="type">The type of fields to search.</param>
        /// <param name="id">The IDs of the custom fields to return or, where `query` is specified, filter.</param>
        /// <param name="query">String used to perform a case-insensitive partial match with field names or descriptions.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `contextsCount` sorts by the number of contexts related to a field
        /// <br/> *  `lastUsed` sorts by the date when the value of the field last changed
        /// <br/> *  `name` sorts by the field name
        /// <br/> *  `screensCount` sorts by the number of screens related to a field</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `key` returns the key for each field
        /// <br/> *  `lastUsed` returns the date when the value of the field last changed
        /// <br/> *  `screensCount` returns the number of screens related to a field
        /// <br/> *  `contextsCount` returns the number of contexts related to a field
        /// <br/> *  `isLocked` returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og)
        /// <br/> *  `searcherKey` returns the searcher key for each custom field</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanField> GetFieldsPaginatedAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<Anonymous> type = null, System.Collections.Generic.IEnumerable<string> id = null, string query = null, OrderBy2? orderBy = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get fields in trash paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of fields in the trash. The list may be restricted to fields whose field name or description partially match a string.
        /// <br/>
        /// <br/>Only custom fields can be queried, `type` must be set to `custom`.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="query">String used to perform a case-insensitive partial match with field names or descriptions.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `name` sorts by the field name
        /// <br/> *  `trashDate` sorts by the date the field was moved to the trash
        /// <br/> *  `plannedDeletionDate` sorts by the planned deletion date</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanField> GetTrashedFieldsPaginatedAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<string> id = null, string query = null, Expand? expand = null, string orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom field
        /// </summary>
        /// <remarks>
        /// Updates a custom field.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="body">The custom field update details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateCustomFieldAsync(string fieldId, UpdateCustomFieldDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom field contexts
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of [ contexts](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html) for a custom field. Contexts can be returned as follows:
        /// <br/>
        /// <br/> *  With no other parameters set, all contexts.
        /// <br/> *  By defining `id` only, all contexts from the list of IDs.
        /// <br/> *  By defining `isAnyIssueType`, limit the list of contexts returned to either those that apply to all issue types (true) or those that apply to only a subset of issue types (false)
        /// <br/> *  By defining `isGlobalContext`, limit the list of contexts return to either those that apply to all projects (global contexts) (true) or those that apply to only a subset of projects (false).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="isAnyIssueType">Whether to return contexts that apply to all issue types.</param>
        /// <param name="isGlobalContext">Whether to return contexts that apply to all projects.</param>
        /// <param name="contextId">The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&amp;contextId=10001`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanCustomFieldContext> GetContextsForFieldAsync(string fieldId, bool? isAnyIssueType = null, bool? isGlobalContext = null, System.Collections.Generic.IEnumerable<long> contextId = null, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create custom field context
        /// </summary>
        /// <remarks>
        /// Creates a custom field context.
        /// <br/>
        /// <br/>If `projectIds` is empty, a global context is created. A global context is one that applies to all project. If `issueTypeIds` is empty, the context applies to all issue types.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <returns>Returned if the custom field context is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreateCustomFieldContext> CreateCustomFieldContextAsync(string fieldId, CreateCustomFieldContext body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom field contexts default values
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of defaults for a custom field. The results can be filtered by `contextId`, otherwise all values are returned. If no defaults are set for a context, nothing is returned.  
        /// <br/>The returned object depends on type of the custom field:
        /// <br/>
        /// <br/> *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
        /// <br/> *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
        /// <br/> *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
        /// <br/> *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
        /// <br/> *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
        /// <br/> *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
        /// <br/> *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
        /// <br/> *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
        /// <br/> *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
        /// <br/> *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
        /// <br/> *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
        /// <br/> *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
        /// <br/> *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
        /// <br/> *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
        /// <br/> *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
        /// <br/> *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
        /// <br/> *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
        /// <br/> *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
        /// <br/>
        /// <br/>Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
        /// <br/>
        /// <br/> *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field, for example `customfield\_10000`.</param>
        /// <param name="contextId">The IDs of the contexts.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanCustomFieldContextDefaultValue> GetDefaultValuesAsync(string fieldId, System.Collections.Generic.IEnumerable<long> contextId = null, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set custom field contexts default values
        /// </summary>
        /// <remarks>
        /// Sets default for contexts of a custom field. Default are defined using these objects:
        /// <br/>
        /// <br/> *  `CustomFieldContextDefaultValueDate` (type `datepicker`) for date fields.
        /// <br/> *  `CustomFieldContextDefaultValueDateTime` (type `datetimepicker`) for date-time fields.
        /// <br/> *  `CustomFieldContextDefaultValueSingleOption` (type `option.single`) for single choice select lists and radio buttons.
        /// <br/> *  `CustomFieldContextDefaultValueMultipleOption` (type `option.multiple`) for multiple choice select lists and checkboxes.
        /// <br/> *  `CustomFieldContextDefaultValueCascadingOption` (type `option.cascading`) for cascading select lists.
        /// <br/> *  `CustomFieldContextSingleUserPickerDefaults` (type `single.user.select`) for single users.
        /// <br/> *  `CustomFieldContextDefaultValueMultiUserPicker` (type `multi.user.select`) for user lists.
        /// <br/> *  `CustomFieldContextDefaultValueSingleGroupPicker` (type `grouppicker.single`) for single choice group pickers.
        /// <br/> *  `CustomFieldContextDefaultValueMultipleGroupPicker` (type `grouppicker.multiple`) for multiple choice group pickers.
        /// <br/> *  `CustomFieldContextDefaultValueURL` (type `url`) for URLs.
        /// <br/> *  `CustomFieldContextDefaultValueProject` (type `project`) for project pickers.
        /// <br/> *  `CustomFieldContextDefaultValueFloat` (type `float`) for floats (floating-point numbers).
        /// <br/> *  `CustomFieldContextDefaultValueLabels` (type `labels`) for labels.
        /// <br/> *  `CustomFieldContextDefaultValueTextField` (type `textfield`) for text fields.
        /// <br/> *  `CustomFieldContextDefaultValueTextArea` (type `textarea`) for text area fields.
        /// <br/> *  `CustomFieldContextDefaultValueReadOnly` (type `readonly`) for read only (text) fields.
        /// <br/> *  `CustomFieldContextDefaultValueMultipleVersion` (type `version.multiple`) for single choice version pickers.
        /// <br/> *  `CustomFieldContextDefaultValueSingleVersion` (type `version.single`) for multiple choice version pickers.
        /// <br/>
        /// <br/>Forge custom fields [types](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field-type/#data-types) are also supported, returning:
        /// <br/>
        /// <br/> *  `CustomFieldContextDefaultValueForgeStringFieldBean` (type `forge.string`) for Forge string fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeMultiStringFieldBean` (type `forge.string.list`) for Forge string collection fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeObjectFieldBean` (type `forge.object`) for Forge object fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeDateTimeFieldBean` (type `forge.datetime`) for Forge date-time fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeGroupFieldBean` (type `forge.group`) for Forge group fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeMultiGroupFieldBean` (type `forge.group.list`) for Forge group collection fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeNumberFieldBean` (type `forge.number`) for Forge number fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeUserFieldBean` (type `forge.user`) for Forge user fields.
        /// <br/> *  `CustomFieldContextDefaultValueForgeMultiUserFieldBean` (type `forge.user.list`) for Forge user collection fields.
        /// <br/>
        /// <br/>Only one type of default object can be included in a request. To remove a default for a context, set the default parameter to `null`.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <returns>Returned if operation is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetDefaultValuesAsync(string fieldId, CustomFieldContextDefaultValueUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue types for custom field context
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of context to issue type mappings for a custom field. Mappings are returned for all contexts or a list of contexts. Mappings are ordered first by context ID and then by issue type ID.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&amp;contextId=10002`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if operation is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueTypeToContextMapping> GetIssueTypeMappingsForContextsAsync(string fieldId, System.Collections.Generic.IEnumerable<long> contextId = null, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom field contexts for projects and issue types
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of project and issue type mappings and, for each mapping, the ID of a [custom field context](https://confluence.atlassian.com/x/k44fOw) that applies to the project and issue type.
        /// <br/>
        /// <br/>If there is no custom field context assigned to the project then, if present, the custom field context that applies to all projects is returned if it also applies to the issue type or all issue types. If a custom field context is not found, the returned custom field context ID is `null`.
        /// <br/>
        /// <br/>Duplicate project and issue type mappings cannot be provided in the request.
        /// <br/>
        /// <br/>The order of the returned values is the same as provided in the request.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="body">The list of project and issue type mappings.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanContextForProjectAndIssueType> GetCustomFieldContextsForProjectsAndIssueTypesAsync(string fieldId, ProjectIssueTypeMappings body, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project mappings for custom field context
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of context to project mappings for a custom field. The result can be filtered by `contextId`. Otherwise, all mappings are returned. Invalid IDs are ignored.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field, for example `customfield\_10000`.</param>
        /// <param name="contextId">The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&amp;contextId=10001`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanCustomFieldContextProjectMapping> GetProjectContextMappingAsync(string fieldId, System.Collections.Generic.IEnumerable<long> contextId = null, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom field context
        /// </summary>
        /// <remarks>
        /// Updates a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if the context is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateCustomFieldContextAsync(string fieldId, long contextId, CustomFieldContextUpdateDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete custom field context
        /// </summary>
        /// <remarks>
        /// Deletes a [ custom field context](https://confluence.atlassian.com/adminjiracloud/what-are-custom-field-contexts-991923859.html).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if the context is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteCustomFieldContextAsync(string fieldId, long contextId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add issue types to context
        /// </summary>
        /// <remarks>
        /// Adds issue types to a custom field context, appending the issue types to the issue types list.
        /// <br/>
        /// <br/>A custom field context without any issue types applies to all issue types. Adding issue types to such a custom field context would result in it applying to only the listed issue types.
        /// <br/>
        /// <br/>If any of the issue types exists in the custom field context, the operation fails and no issue types are added.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if operation is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddIssueTypesToContextAsync(string fieldId, long contextId, IssueTypeIds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove issue types from context
        /// </summary>
        /// <remarks>
        /// Removes issue types from a custom field context.
        /// <br/>
        /// <br/>A custom field context without any issue types applies to all issue types.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if operation is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RemoveIssueTypesFromContextAsync(string fieldId, long contextId, IssueTypeIds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get custom field options (context)
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all custom field option for a context. Options are returned first then cascading options, in the order they display in Jira.
        /// <br/>
        /// <br/>This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <param name="optionId">The ID of the option.</param>
        /// <param name="onlyOptions">Whether only options are returned.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanCustomFieldContextOption> GetOptionsForContextAsync(string fieldId, long contextId, long? optionId = null, bool? onlyOptions = null, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update custom field options (context)
        /// </summary>
        /// <remarks>
        /// Updates the options of a custom field.
        /// <br/>
        /// <br/>If any of the options are not found, no options are updated. Options where the values in the request match the current values aren't updated and aren't reported in the response.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource**, it cannot be used with issue field select list options created by Connect apps.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomFieldUpdatedContextOptionsList> UpdateCustomFieldOptionAsync(string fieldId, long contextId, BulkCustomFieldOptionUpdateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create custom field options (context)
        /// </summary>
        /// <remarks>
        /// Creates options and, where the custom select field is of the type Select List (cascading), cascading options for a custom select field. The options are added to a context of the field.
        /// <br/>
        /// <br/>The maximum number of options that can be created per request is 1000 and each field can have a maximum of 10000 options.
        /// <br/>
        /// <br/>This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CustomFieldCreatedContextOptionsList> CreateCustomFieldOptionAsync(string fieldId, long contextId, BulkCustomFieldOptionCreateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reorder custom field options (context)
        /// </summary>
        /// <remarks>
        /// Changes the order of custom field options or cascading options in a context.
        /// <br/>
        /// <br/>This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if options are reordered.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ReorderCustomFieldOptionsAsync(string fieldId, long contextId, OrderOfCustomFieldOptions body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete custom field options (context)
        /// </summary>
        /// <remarks>
        /// Deletes a custom field option.
        /// <br/>
        /// <br/>Options with cascading options cannot be deleted without deleting the cascading options first.
        /// <br/>
        /// <br/>This operation works for custom field options created in Jira or the operations from this resource. **To work with issue field select list options created for Connect apps use the [Issue custom field options (apps)](#api-group-issue-custom-field-options--apps-) operations.**
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context from which an option should be deleted.</param>
        /// <param name="optionId">The ID of the option to delete.</param>
        /// <returns>Returned if the option is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCustomFieldOptionAsync(string fieldId, long contextId, long optionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign custom field context to projects
        /// </summary>
        /// <remarks>
        /// Assigns a custom field context to projects.
        /// <br/>
        /// <br/>If any project in the request is assigned to any context of the custom field, the operation fails.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if operation is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AssignProjectsToCustomFieldContextAsync(string fieldId, long contextId, ProjectIds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove custom field context from projects
        /// </summary>
        /// <remarks>
        /// Removes a custom field context from projects.
        /// <br/>
        /// <br/>A custom field context without any projects applies to all projects. Removing all projects from a custom field context would result in it applying to all projects.
        /// <br/>
        /// <br/>If any project in the request is not assigned to the context, or the operation would result in two global contexts for the field, the operation fails.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the custom field.</param>
        /// <param name="contextId">The ID of the context.</param>
        /// <returns>Returned if the custom field context is removed from the projects.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RemoveCustomFieldContextFromProjectsAsync(string fieldId, long contextId, ProjectIds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get contexts for a field
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of the contexts a field is used in. Deprecated, use [ Get custom field contexts](#api-rest-api-3-field-fieldId-context-get).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the field to return contexts for.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PageBeanContext> GetContextsForFieldDeprecatedAsync(string fieldId, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get screens for a field
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of the screens a field is used in.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the field to return screens for.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanScreenWithTab> GetScreensForFieldAsync(string fieldId, long? startAt = null, int? maxResults = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all issue field options
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all the options of a select list issue field. A select list issue field is a type of [issue field](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field/) that enables a user to select a value from a list of options.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
        /// </remarks>
        /// <param name="fieldKey">The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
        /// <br/>
        /// <br/> *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
        /// <br/> *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueFieldOption> GetAllIssueFieldOptionsAsync(string fieldKey, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create issue field option
        /// </summary>
        /// <remarks>
        /// Creates an option for a select list issue field.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
        /// </remarks>
        /// <param name="fieldKey">The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
        /// <br/>
        /// <br/> *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
        /// <br/> *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueFieldOption> CreateIssueFieldOptionAsync(string fieldKey, IssueFieldOptionCreateBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get selectable issue field options
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed and selected by the user.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="fieldKey">The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
        /// <br/>
        /// <br/> *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
        /// <br/> *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="projectId">Filters the results to options that are only available in the specified project.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueFieldOption> GetSelectableIssueFieldOptionsAsync(string fieldKey, long? startAt = null, int? maxResults = null, long? projectId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get visible issue field options
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of options for a select list issue field that can be viewed by the user.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="fieldKey">The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
        /// <br/>
        /// <br/> *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
        /// <br/> *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="projectId">Filters the results to options that are only available in the specified project.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueFieldOption> GetVisibleIssueFieldOptionsAsync(string fieldKey, long? startAt = null, int? maxResults = null, long? projectId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue field option
        /// </summary>
        /// <remarks>
        /// Returns an option from a select list issue field.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
        /// </remarks>
        /// <param name="fieldKey">The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
        /// <br/>
        /// <br/> *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
        /// <br/> *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`</param>
        /// <param name="optionId">The ID of the option to be returned.</param>
        /// <returns>Returned if the requested option is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueFieldOption> GetIssueFieldOptionAsync(string fieldKey, long optionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update issue field option
        /// </summary>
        /// <remarks>
        /// Updates or creates an option for a select list issue field. This operation requires that the option ID is provided when creating an option, therefore, the option ID needs to be specified as a path and body parameter. The option ID provided in the path and body must be identical.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
        /// </remarks>
        /// <param name="fieldKey">The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
        /// <br/>
        /// <br/> *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
        /// <br/> *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`</param>
        /// <param name="optionId">The ID of the option to be updated.</param>
        /// <returns>Returned if the option is updated or created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueFieldOption> UpdateIssueFieldOptionAsync(string fieldKey, long optionId, IssueFieldOption body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue field option
        /// </summary>
        /// <remarks>
        /// Deletes an option from a select list issue field.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
        /// </remarks>
        /// <param name="fieldKey">The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
        /// <br/>
        /// <br/> *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
        /// <br/> *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`</param>
        /// <param name="optionId">The ID of the option to be deleted.</param>
        /// <returns>Returned if the field option is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteIssueFieldOptionAsync(string fieldKey, long optionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace issue field option
        /// </summary>
        /// <remarks>
        /// Deselects an issue-field select-list option from all issues where it is selected. A different option can be selected to replace the deselected option. The update can also be limited to a smaller set of issues by using a JQL query.
        /// <br/>
        /// <br/>Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
        /// <br/>
        /// <br/>This is an [asynchronous operation](#async). The response object contains a link to the long-running task.
        /// <br/>
        /// <br/>Note that this operation **only works for issue field select list options added by Connect apps**, it cannot be used with issue field select list options created in Jira or using operations from the [Issue custom field options](#api-group-Issue-custom-field-options) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). Jira permissions are not required for the app providing the field.
        /// </remarks>
        /// <param name="fieldKey">The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
        /// <br/>
        /// <br/> *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
        /// <br/> *  run [Get fields](#api-rest-api-3-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`</param>
        /// <param name="optionId">The ID of the option to be deselected.</param>
        /// <param name="replaceWith">The ID of the option that will replace the currently selected option.</param>
        /// <param name="jql">A JQL query that specifies the issues to be updated. For example, *project=10000*.</param>
        /// <param name="overrideScreenSecurity">Whether screen security is overridden to enable hidden fields to be edited. Available to Connect and Forge app users with admin permission.</param>
        /// <param name="overrideEditableFlag">Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ReplaceIssueFieldOptionAsync(string fieldKey, long optionId, long? replaceWith = null, string jql = null, bool? overrideScreenSecurity = null, bool? overrideEditableFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete custom field
        /// </summary>
        /// <remarks>
        /// Deletes a custom field. The custom field is deleted whether it is in the trash or not. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
        /// <br/>
        /// <br/>This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of a custom field.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCustomFieldAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore custom field from trash
        /// </summary>
        /// <remarks>
        /// Restores a custom field from trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of a custom field.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RestoreCustomFieldAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move custom field to trash
        /// </summary>
        /// <remarks>
        /// Moves a custom field to trash. See [Edit or delete a custom field](https://confluence.atlassian.com/x/Z44fOw) for more information on trashing and deleting custom fields.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of a custom field.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> TrashCustomFieldAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all field configurations
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of field configurations. The list can be for all field configurations or a subset determined by any combination of these criteria:
        /// <br/>
        /// <br/> *  a list of field configuration item IDs.
        /// <br/> *  whether the field configuration is a default.
        /// <br/> *  whether the field configuration name or description contains a query string.
        /// <br/>
        /// <br/>Only field configurations used in company-managed (classic) projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&amp;id=10001`.</param>
        /// <param name="isDefault">If *true* returns default field configurations only.</param>
        /// <param name="query">The query string used to match against field configuration names and descriptions.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanFieldConfigurationDetails> GetAllFieldConfigurationsAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> id = null, bool? isDefault = null, string query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create field configuration
        /// </summary>
        /// <remarks>
        /// Creates a field configuration. The field configuration is created with the same field properties as the default configuration, with all the fields being optional.
        /// <br/>
        /// <br/>This operation can only create configurations for use in company-managed (classic) projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FieldConfiguration> CreateFieldConfigurationAsync(FieldConfigurationDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update field configuration
        /// </summary>
        /// <remarks>
        /// Updates a field configuration. The name and the description provided in the request override the existing values.
        /// <br/>
        /// <br/>This operation can only update configurations used in company-managed (classic) projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the field configuration.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateFieldConfigurationAsync(long id, FieldConfigurationDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete field configuration
        /// </summary>
        /// <remarks>
        /// Deletes a field configuration.
        /// <br/>
        /// <br/>This operation can only delete configurations used in company-managed (classic) projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the field configuration.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteFieldConfigurationAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get field configuration items
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all fields for a configuration.
        /// <br/>
        /// <br/>Only the fields from configurations used in company-managed (classic) projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the field configuration.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanFieldConfigurationItem> GetFieldConfigurationItemsAsync(long id, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update field configuration items
        /// </summary>
        /// <remarks>
        /// Updates fields in a field configuration. The properties of the field configuration fields provided override the existing values.
        /// <br/>
        /// <br/>This operation can only update field configurations used in company-managed (classic) projects.
        /// <br/>
        /// <br/>The operation can set the renderer for text fields to the default text renderer (`text-renderer`) or wiki style renderer (`wiki-renderer`). However, the renderer cannot be updated for fields using the autocomplete renderer (`autocomplete-renderer`).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the field configuration.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateFieldConfigurationItemsAsync(long id, FieldConfigurationItemsDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all field configuration schemes
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of field configuration schemes.
        /// <br/>
        /// <br/>Only field configuration schemes used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&amp;id=10001`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanFieldConfigurationScheme> GetAllFieldConfigurationSchemesAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create field configuration scheme
        /// </summary>
        /// <remarks>
        /// Creates a field configuration scheme.
        /// <br/>
        /// <br/>This operation can only create field configuration schemes used in company-managed (classic) projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="body">The details of the field configuration scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FieldConfigurationScheme> CreateFieldConfigurationSchemeAsync(UpdateFieldConfigurationSchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get field configuration issue type items
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of field configuration issue type items.
        /// <br/>
        /// <br/>Only items used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="fieldConfigurationSchemeId">The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&amp;fieldConfigurationSchemeId=10001`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanFieldConfigurationIssueTypeItem> GetFieldConfigurationSchemeMappingsAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> fieldConfigurationSchemeId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get field configuration schemes for projects
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of field configuration schemes and, for each scheme, a list of the projects that use it.
        /// <br/>
        /// <br/>The list is sorted by field configuration scheme ID. The first item contains the list of project IDs assigned to the default field configuration scheme.
        /// <br/>
        /// <br/>Only field configuration schemes used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectId">The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&amp;projectId=10001`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanFieldConfigurationSchemeProjects> GetFieldConfigurationSchemeProjectMappingAsync(System.Collections.Generic.IEnumerable<long> projectId, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign field configuration scheme to project
        /// </summary>
        /// <remarks>
        /// Assigns a field configuration scheme to a project. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
        /// <br/>
        /// <br/>Field configuration schemes can only be assigned to classic projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AssignFieldConfigurationSchemeToProjectAsync(FieldConfigurationSchemeProjectAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update field configuration scheme
        /// </summary>
        /// <remarks>
        /// Updates a field configuration scheme.
        /// <br/>
        /// <br/>This operation can only update field configuration schemes used in company-managed (classic) projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the field configuration scheme.</param>
        /// <param name="body">The details of the field configuration scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateFieldConfigurationSchemeAsync(long id, UpdateFieldConfigurationSchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete field configuration scheme
        /// </summary>
        /// <remarks>
        /// Deletes a field configuration scheme.
        /// <br/>
        /// <br/>This operation can only delete field configuration schemes used in company-managed (classic) projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the field configuration scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteFieldConfigurationSchemeAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign issue types to field configurations
        /// </summary>
        /// <remarks>
        /// Assigns issue types to field configurations on field configuration scheme.
        /// <br/>
        /// <br/>This operation can only modify field configuration schemes used in company-managed (classic) projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the field configuration scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetFieldConfigurationSchemeMappingAsync(long id, AssociateFieldConfigurationsWithIssueTypesRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove issue types from field configuration scheme
        /// </summary>
        /// <remarks>
        /// Removes issue types from the field configuration scheme.
        /// <br/>
        /// <br/>This operation can only modify field configuration schemes used in company-managed (classic) projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the field configuration scheme.</param>
        /// <param name="body">The issue type IDs to remove.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RemoveIssueTypesFromGlobalFieldConfigurationSchemeAsync(long id, IssueTypeIdsToRemove body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create filter
        /// </summary>
        /// <remarks>
        /// Creates a filter. The filter is shared according to the [default share scope](#api-rest-api-3-filter-post). The filter is not selected as a favorite.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="body">The filter to create.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
        /// <br/> *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.</param>
        /// <param name="overrideSharePermissions">EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be created. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Filter> CreateFilterAsync(Filter body, string expand = null, bool? overrideSharePermissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get default share scope
        /// </summary>
        /// <remarks>
        /// Returns the default sharing settings for new filters and dashboards for a user.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DefaultShareScope> GetDefaultShareScopeAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set default share scope
        /// </summary>
        /// <remarks>
        /// Sets the default sharing for new filters and dashboards for a user.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DefaultShareScope> SetDefaultShareScopeAsync(DefaultShareScope body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get favorite filters
        /// </summary>
        /// <remarks>
        /// Returns the visible favorite filters of the user.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** A favorite filter is only visible to the user where the filter is:
        /// <br/>
        /// <br/> *  owned by the user.
        /// <br/> *  shared with a group that the user is a member of.
        /// <br/> *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  shared with a public project.
        /// <br/> *  shared with the public.
        /// <br/>
        /// <br/>For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
        /// <br/> *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Filter>> GetFavouriteFiltersAsync(string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get my filters
        /// </summary>
        /// <remarks>
        /// Returns the filters owned by the user. If `includeFavourites` is `true`, the user's visible favorite filters are also returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however, a favorite filters is only visible to the user where the filter is:
        /// <br/>
        /// <br/> *  owned by the user.
        /// <br/> *  shared with a group that the user is a member of.
        /// <br/> *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  shared with a public project.
        /// <br/> *  shared with the public.
        /// <br/>
        /// <br/>For example, if the user favorites a public filter that is subsequently made private that filter is not returned by this operation.
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
        /// <br/> *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.</param>
        /// <param name="includeFavourites">Include the user's favorite filters in the response.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Filter>> GetMyFiltersAsync(string expand = null, bool? includeFavourites = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for filters
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of filters. Use this operation to get:
        /// <br/>
        /// <br/> *  specific filters, by defining `id` only.
        /// <br/> *  filters that match all of the specified attributes. For example, all filters for a user with a particular word in their name. When multiple attributes are specified only filters matching all attributes are returned.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None, however, only the following filters that match the query parameters are returned:
        /// <br/>
        /// <br/> *  filters owned by the user.
        /// <br/> *  filters shared with a group that the user is a member of.
        /// <br/> *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  filters shared with a public project.
        /// <br/> *  filters shared with the public.
        /// </remarks>
        /// <param name="filterName">String used to perform a case-insensitive partial match with `name`.</param>
        /// <param name="accountId">User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.</param>
        /// <param name="owner">This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.</param>
        /// <param name="groupname">As a group's name can change, use of `groupId` is recommended to identify a group. Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`. This parameter cannot be used with the `groupId` parameter.</param>
        /// <param name="groupId">Group ID used to returns filters that are shared with a group that matches `sharePermissions.group.groupId`. This parameter cannot be used with the `groupname` parameter.</param>
        /// <param name="projectId">Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.</param>
        /// <param name="id">The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&amp;id=10001`. Do not exceed 200 filter IDs.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.
        /// <br/> *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.
        /// <br/> *  `is_favourite` Sorts by whether the filter is marked as a favorite.
        /// <br/> *  `id` Sorts by filter ID.
        /// <br/> *  `name` Sorts by filter name.
        /// <br/> *  `owner` Sorts by the ID of the filter owner.
        /// <br/> *  `is_shared` Sorts by whether the filter is shared.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `description` Returns the description of the filter.
        /// <br/> *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.
        /// <br/> *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.
        /// <br/> *  `jql` Returns the JQL query that the filter uses.
        /// <br/> *  `owner` Returns the owner of the filter.
        /// <br/> *  `searchUrl` Returns a URL to perform the filter's JQL query.
        /// <br/> *  `sharePermissions` Returns the share permissions defined for the filter.
        /// <br/> *  `editPermissions` Returns the edit permissions defined for the filter.
        /// <br/> *  `isWritable` Returns whether the current user has permission to edit the filter.
        /// <br/> *  `subscriptions` Returns the users that are subscribed to the filter.
        /// <br/> *  `viewUrl` Returns a URL to view the filter.</param>
        /// <param name="overrideSharePermissions">EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanFilterDetails> GetFiltersPaginatedAsync(string filterName = null, string accountId = null, string owner = null, string groupname = null, string groupId = null, long? projectId = null, System.Collections.Generic.IEnumerable<long> id = null, OrderBy3? orderBy = null, long? startAt = null, int? maxResults = null, string expand = null, bool? overrideSharePermissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get filter
        /// </summary>
        /// <remarks>
        /// Returns a filter.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None, however, the filter is only returned where it is:
        /// <br/>
        /// <br/> *  owned by the user.
        /// <br/> *  shared with a group that the user is a member of.
        /// <br/> *  shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  shared with a public project.
        /// <br/> *  shared with the public.
        /// </remarks>
        /// <param name="id">The ID of the filter to return.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
        /// <br/> *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.</param>
        /// <param name="overrideSharePermissions">EXPERIMENTAL: Whether share permissions are overridden to enable filters with any share permissions to be returned. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Filter> GetFilterAsync(long id, string expand = null, bool? overrideSharePermissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update filter
        /// </summary>
        /// <remarks>
        /// Updates a filter. Use this operation to update a filter's name, description, JQL, or sharing.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however the user must own the filter.
        /// </remarks>
        /// <param name="id">The ID of the filter to update.</param>
        /// <param name="body">The filter to update.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
        /// <br/> *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.</param>
        /// <param name="overrideSharePermissions">EXPERIMENTAL: Whether share permissions are overridden to enable the addition of any share permissions to filters. Available to users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Filter> UpdateFilterAsync(long id, Filter body, string expand = null, bool? overrideSharePermissions = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete filter
        /// </summary>
        /// <remarks>
        /// Delete a filter.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however filters can only be deleted by the creator of the filter or a user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the filter to delete.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteFilterAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get columns
        /// </summary>
        /// <remarks>
        /// Returns the columns configured for a filter. The column configuration is used when the filter's results are viewed in *List View* with the *Columns* set to *Filter*.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None, however, column details are only returned for:
        /// <br/>
        /// <br/> *  filters owned by the user.
        /// <br/> *  filters shared with a group that the user is a member of.
        /// <br/> *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  filters shared with a public project.
        /// <br/> *  filters shared with the public.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ColumnItem>> GetColumnsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set columns
        /// </summary>
        /// <remarks>
        /// Sets the columns for a filter. Only navigable fields can be set as columns. Use [Get fields](#api-rest-api-3-field-get) to get the list fields in Jira. A navigable field has `navigable` set to `true`.
        /// <br/>
        /// <br/>The parameters for this resource are expressed as HTML form data. For example, in curl:
        /// <br/>
        /// <br/>`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/filter/10000/columns`
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only set for:
        /// <br/>
        /// <br/> *  filters owned by the user.
        /// <br/> *  filters shared with a group that the user is a member of.
        /// <br/> *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  filters shared with a public project.
        /// <br/> *  filters shared with the public.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <param name="body">The IDs of the fields to set as columns. In the form data, specify each field as `columns=id`, where `id` is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-&lt;ver&gt;-field-get)). For example, `columns=summary`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetColumnsAsync(long id, System.Collections.Generic.IEnumerable<string> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset columns
        /// </summary>
        /// <remarks>
        /// Reset the user's column configuration for the filter to the default.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however, columns are only reset for:
        /// <br/>
        /// <br/> *  filters owned by the user.
        /// <br/> *  filters shared with a group that the user is a member of.
        /// <br/> *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  filters shared with a public project.
        /// <br/> *  filters shared with the public.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetColumnsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add filter as favorite
        /// </summary>
        /// <remarks>
        /// Add a filter as a favorite for the user.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however, the user can only favorite:
        /// <br/>
        /// <br/> *  filters owned by the user.
        /// <br/> *  filters shared with a group that the user is a member of.
        /// <br/> *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  filters shared with a public project.
        /// <br/> *  filters shared with the public.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
        /// <br/> *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Filter> SetFavouriteForFilterAsync(long id, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove filter as favorite
        /// </summary>
        /// <remarks>
        /// Removes a filter as a favorite for the user. Note that this operation only removes filters visible to the user from the user's favorites list. For example, if the user favorites a public filter that is subsequently made private (and is therefore no longer visible on their favorites list) they cannot remove it from their favorites list.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
        /// <br/> *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Filter> DeleteFavouriteForFilterAsync(long id, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change filter owner
        /// </summary>
        /// <remarks>
        /// Changes the owner of the filter.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira. However, the user must own the filter or have the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the filter to update.</param>
        /// <param name="body">The account ID of the new owner of the filter.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ChangeFilterOwnerAsync(long id, ChangeFilterOwner body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get share permissions
        /// </summary>
        /// <remarks>
        /// Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None, however, share permissions are only returned for:
        /// <br/>
        /// <br/> *  filters owned by the user.
        /// <br/> *  filters shared with a group that the user is a member of.
        /// <br/> *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  filters shared with a public project.
        /// <br/> *  filters shared with the public.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SharePermission>> GetSharePermissionsAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add share permission
        /// </summary>
        /// <remarks>
        /// Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.
        /// <br/>
        /// <br/>Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SharePermission>> AddSharePermissionAsync(long id, SharePermissionInputBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get share permission
        /// </summary>
        /// <remarks>
        /// Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None, however, a share permission is only returned for:
        /// <br/>
        /// <br/> *  filters owned by the user.
        /// <br/> *  filters shared with a group that the user is a member of.
        /// <br/> *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.
        /// <br/> *  filters shared with a public project.
        /// <br/> *  filters shared with the public.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <param name="permissionId">The ID of the share permission.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SharePermission> GetSharePermissionAsync(long id, long permissionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete share permission
        /// </summary>
        /// <remarks>
        /// Deletes a share permission from a filter.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.
        /// </remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <param name="permissionId">The ID of the share permission.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteSharePermissionAsync(long id, long permissionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get group
        /// </summary>
        /// <remarks>
        /// This operation is deprecated, use [`group/member`](#api-rest-api-3-group-member-get).
        /// <br/>
        /// <br/>Returns all users in a group.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="groupname">As a group's name can change, use of `groupId` is recommended to identify a group.  
        /// <br/>The name of the group. This parameter cannot be used with the `groupId` parameter.</param>
        /// <param name="groupId">The ID of the group. This parameter cannot be used with the `groupName` parameter.</param>
        /// <param name="expand">List of fields to expand.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<Group> GetGroupAsync(string groupname = null, string groupId = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create group
        /// </summary>
        /// <remarks>
        /// Creates a group.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
        /// </remarks>
        /// <param name="body">The name of the group.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> CreateGroupAsync(AddGroupBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove group
        /// </summary>
        /// <remarks>
        /// Deletes a group.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* strategic [group](https://confluence.atlassian.com/x/24xjL)).
        /// </remarks>
        /// <param name="groupId">The ID of the group. This parameter cannot be used with the `groupname` parameter.</param>
        /// <param name="swapGroup">As a group's name can change, use of `swapGroupId` is recommended to identify a group.  
        /// <br/>The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroupId` parameter.</param>
        /// <param name="swapGroupId">The ID of the group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion. This parameter cannot be used with the `swapGroup` parameter.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveGroupAsync(string groupname = null, string groupId = null, string swapGroup = null, string swapGroupId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk get groups
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of groups.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="groupId">The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&amp;groupId=5b10ac8d82e05b22cc7d4ef5`.</param>
        /// <param name="groupName">The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&amp;groupName=jira-software-users`.</param>
        /// <param name="accessType">The access level of a group. Valid values: 'site-admin', 'admin', 'user'.</param>
        /// <param name="applicationKey">The application key of the product user groups to search for. Valid values: 'jira-servicedesk', 'jira-software', 'jira-product-discovery', 'jira-core'.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanGroupDetails> BulkGetGroupsAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<string> groupId = null, System.Collections.Generic.IEnumerable<string> groupName = null, string accessType = null, string applicationKey = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get users from group
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all users in a group.
        /// <br/>
        /// <br/>Note that users are ordered by username, however the username is not returned in the results due to privacy reasons.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="groupname">As a group's name can change, use of `groupId` is recommended to identify a group.  
        /// <br/>The name of the group. This parameter cannot be used with the `groupId` parameter.</param>
        /// <param name="groupId">The ID of the group. This parameter cannot be used with the `groupName` parameter.</param>
        /// <param name="includeInactiveUsers">Include inactive users.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanUserDetails> GetUsersFromGroupAsync(string groupname = null, string groupId = null, bool? includeInactiveUsers = null, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add user to group
        /// </summary>
        /// <remarks>
        /// Adds a user to a group.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
        /// </remarks>
        /// <param name="body">The user to add to the group.</param>
        /// <param name="groupname">As a group's name can change, use of `groupId` is recommended to identify a group.  
        /// <br/>The name of the group. This parameter cannot be used with the `groupId` parameter.</param>
        /// <param name="groupId">The ID of the group. This parameter cannot be used with the `groupName` parameter.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Group> AddUserToGroupAsync(UpdateUserToGroupBean body, string groupname = null, string groupId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove user from group
        /// </summary>
        /// <remarks>
        /// Removes a user from a group.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Site administration (that is, member of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="groupname">As a group's name can change, use of `groupId` is recommended to identify a group.  
        /// <br/>The name of the group. This parameter cannot be used with the `groupId` parameter.</param>
        /// <param name="groupId">The ID of the group. This parameter cannot be used with the `groupName` parameter.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserFromGroupAsync(string accountId, string groupname = null, string groupId = null, string username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find groups
        /// </summary>
        /// <remarks>
        /// Returns a list of groups whose names contain a query string. A list of group names can be provided to exclude groups from the results.
        /// <br/>
        /// <br/>The primary use case for this resource is to populate a group picker suggestions list. To this end, the returned object includes the `html` field where the matched query term is highlighted in the group name with the HTML strong tag. Also, the groups list is wrapped in a response object that contains a header for use in the picker, specifically *Showing X of Y matching groups*.
        /// <br/>
        /// <br/>The list returns with the groups sorted. If no groups match the list criteria, an empty list is returned.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg). Anonymous calls and calls by users without the required permission return an empty list.
        /// <br/>
        /// <br/>*Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Without this permission, calls where query is not an exact match to an existing group will return an empty list.
        /// </remarks>
        /// <param name="accountId">This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-3-user-groups-get).</param>
        /// <param name="query">The string to find in group names.</param>
        /// <param name="exclude">As a group's name can change, use of `excludeGroupIds` is recommended to identify a group.  
        /// <br/>A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&amp;exclude=group2`. This parameter cannot be used with the `excludeGroupIds` parameter.</param>
        /// <param name="excludeId">A group ID to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `excludeId=group1-id&amp;excludeId=group2-id`. This parameter cannot be used with the `excludeGroups` parameter.</param>
        /// <param name="maxResults">The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.</param>
        /// <param name="caseInsensitive">Whether the search for groups should be case insensitive.</param>
        /// <param name="userName">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FoundGroups> FindGroupsAsync(string accountId = null, string query = null, System.Collections.Generic.IEnumerable<string> exclude = null, System.Collections.Generic.IEnumerable<string> excludeId = null, int? maxResults = null, bool? caseInsensitive = null, string userName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find users and groups
        /// </summary>
        /// <remarks>
        /// Returns a list of users and groups matching a string. The string is used:
        /// <br/>
        /// <br/> *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
        /// <br/> *  for groups, to find a case-sensitive match with group name.
        /// <br/>
        /// <br/>For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.
        /// <br/>
        /// <br/>Optionally, the search can be refined to:
        /// <br/>
        /// <br/> *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:
        /// <br/>    
        /// <br/>     *  projects.
        /// <br/>     *  issue types.
        /// <br/>    
        /// <br/>    If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.
        /// <br/> *  not return Connect app users and groups.
        /// <br/> *  return groups that have a case-insensitive match with the query.
        /// <br/>
        /// <br/>The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an `html` field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).
        /// </remarks>
        /// <param name="query">The search string.</param>
        /// <param name="maxResults">The maximum number of items to return in each list.</param>
        /// <param name="showAvatar">Whether the user avatar should be returned. If an invalid value is provided, the default value is used.</param>
        /// <param name="fieldId">The custom field ID of the field this request is for.</param>
        /// <param name="projectId">The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&amp;projectId=10001`. This parameter is only used when `fieldId` is present.</param>
        /// <param name="issueTypeId">The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&amp;issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.</param>
        /// <param name="avatarSize">The size of the avatar to return. If an invalid value is provided, the default value is used.</param>
        /// <param name="caseInsensitive">Whether the search for groups should be case insensitive.</param>
        /// <param name="excludeConnectAddons">Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FoundUsersAndGroups> FindUsersAndGroupsAsync(string query, int? maxResults = null, bool? showAvatar = null, string fieldId = null, System.Collections.Generic.IEnumerable<string> projectId = null, System.Collections.Generic.IEnumerable<string> issueTypeId = null, AvatarSize? avatarSize = null, bool? caseInsensitive = null, bool? excludeConnectAddons = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get license
        /// </summary>
        /// <remarks>
        /// Returns licensing information about the Jira instance.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<License> GetLicenseAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create issue
        /// </summary>
        /// <remarks>
        /// Creates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.
        /// <br/>
        /// <br/>The content of the issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issue's create screen. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
        /// <br/>
        /// <br/>Creating a subtask differs from creating an issue as follows:
        /// <br/>
        /// <br/> *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
        /// <br/> *  `parent` must contain the ID or key of the parent issue.
        /// <br/>
        /// <br/>In a next-gen project any issue may be made a child providing that the parent and child are members of the same project.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which the issue or subtask is created.
        /// </remarks>
        /// <param name="updateHistory">Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatedIssue> CreateIssueAsync(IssueUpdateDetails body, bool? updateHistory = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Archive issue(s) by issue ID/key
        /// </summary>
        /// <remarks>
        /// Enables admins to archive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) archived in the process and the errors encountered, if any.
        /// <br/>
        /// <br/>**Note that:**
        /// <br/>
        /// <br/> *  you can't archive subtasks directly, only through their parent issues
        /// <br/> *  you can only archive issues from software, service management, and business projects
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
        /// <br/>
        /// <br/>**License required:** Premium or Enterprise
        /// <br/>
        /// <br/>**Signed-in users only:** This API can't be accessed anonymously.
        /// </remarks>
        /// <param name="body">Contains a list of issue keys or IDs to be archived.</param>
        /// <returns>Returned if there is at least one valid issue to archive in the request. The return message will include the count of archived issues and subtasks, as well as error details for issues which failed to get archived.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueArchivalSyncResponse> ArchiveIssuesAsync(IssueArchivalSyncRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Archive issue(s) by JQL
        /// </summary>
        /// <remarks>
        /// Enables admins to archive up to 100,000 issues in a single request using JQL, returning the URL to check the status of the submitted request.
        /// <br/>
        /// <br/>You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) and [cancel task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-cancel-post) APIs to manage the request.
        /// <br/>
        /// <br/>**Note that:**
        /// <br/>
        /// <br/> *  you can't archive subtasks directly, only through their parent issues
        /// <br/> *  you can only archive issues from software, service management, and business projects
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
        /// <br/>
        /// <br/>**License required:** Premium or Enterprise
        /// <br/>
        /// <br/>**Signed-in users only:** This API can't be accessed anonymously.
        /// <br/>
        /// <br/>**Rate limiting:** Only a single request per user can be active at any given time.
        /// </remarks>
        /// <param name="body">A JQL query specifying the issues to archive. Note that subtasks can only be archived through their parent issues.</param>
        /// <returns>Returns the URL to check the status of the submitted request.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> ArchiveIssuesAsync(ArchiveIssueAsyncRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk create issue
        /// </summary>
        /// <remarks>
        /// Creates upto **50** issues and, where the option to create subtasks is enabled in Jira, subtasks. Transitions may be applied, to move the issues or subtasks to a workflow step other than the default start step, and issue properties set.
        /// <br/>
        /// <br/>The content of each issue or subtask is defined using `update` and `fields`. The fields that can be set in the issue or subtask are determined using the [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get). These are the same fields that appear on the issues' create screens. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
        /// <br/>
        /// <br/>Creating a subtask differs from creating an issue as follows:
        /// <br/>
        /// <br/> *  `issueType` must be set to a subtask issue type (use [ Get create issue metadata](#api-rest-api-3-issue-createmeta-get) to find subtask issue types).
        /// <br/> *  `parent` the must contain the ID or key of the parent issue.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* and *Create issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project in which each issue or subtask is created.
        /// </remarks>
        /// <returns>Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:
        /// <br/>
        /// <br/> *  is missing required fields.
        /// <br/> *  contains invalid field values.
        /// <br/> *  contains fields that cannot be set for the issue type.
        /// <br/> *  is by a user who does not have the necessary permission.
        /// <br/> *  is to create a subtype in a project different that of the parent issue.
        /// <br/> *  is for a subtask when the option to create subtasks is disabled.
        /// <br/> *  is invalid for any other reason.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CreatedIssues> CreateIssuesAsync(IssuesUpdateBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get create issue metadata
        /// </summary>
        /// <remarks>
        /// Returns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in [ Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).
        /// <br/>
        /// <br/>The request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Create issues* [project permission](https://confluence.atlassian.com/x/yodKLg) in the requested projects.
        /// </remarks>
        /// <param name="projectIds">List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&amp;projectIds=10020,10021`. This parameter may be provided with `projectKeys`.</param>
        /// <param name="projectKeys">List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&amp;projectKeys=proj3`. This parameter may be provided with `projectIds`.</param>
        /// <param name="issuetypeIds">List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&amp;issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`.</param>
        /// <param name="issuetypeNames">List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&amp;issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-3-issue-post) and [Create issues](#api-rest-api-3-issue-bulk-post).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueCreateMetadata> GetCreateIssueMetaAsync(System.Collections.Generic.IEnumerable<string> projectIds = null, System.Collections.Generic.IEnumerable<string> projectKeys = null, System.Collections.Generic.IEnumerable<string> issuetypeIds = null, System.Collections.Generic.IEnumerable<string> issuetypeNames = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue picker suggestions
        /// </summary>
        /// <remarks>
        /// Returns lists of issues matching a query string. Use this resource to provide auto-completion suggestions when the user is looking for an issue using a word or string.
        /// <br/>
        /// <br/>This operation returns two lists:
        /// <br/>
        /// <br/> *  `History Search` which includes issues from the user's history of created, edited, or viewed issues that contain the string in the `query` parameter.
        /// <br/> *  `Current Search` which includes issues that match the JQL expression in `currentJQL` and contain the string in the `query` parameter.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="query">A string to match against text fields in the issue such as title, description, or comments.</param>
        /// <param name="currentJQL">A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.</param>
        /// <param name="currentIssueKey">The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.</param>
        /// <param name="currentProjectId">The ID of a project that suggested issues must belong to.</param>
        /// <param name="showSubTasks">Indicate whether to include subtasks in the suggestions list.</param>
        /// <param name="showSubTaskParent">When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssuePickerSuggestions> GetIssuePickerResourceAsync(string query = null, string currentJQL = null, string currentIssueKey = null, string currentProjectId = null, bool? showSubTasks = null, bool? showSubTaskParent = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk set issues properties by list
        /// </summary>
        /// <remarks>
        /// Sets or updates a list of entity property values on issues. A list of up to 10 entity properties can be specified along with up to 10,000 issues on which to set or update that list of entity properties.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON. The maximum length of single issue property value is 32768 characters. This operation can be accessed anonymously.
        /// <br/>
        /// <br/>This operation is:
        /// <br/>
        /// <br/> *  transactional, either all properties are updated in all eligible issues or, when errors occur, no properties are updated.
        /// <br/> *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="body">Issue properties to be set or updated with values.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BulkSetIssuesPropertiesListAsync(IssueEntityProperties body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk set issue properties by issue
        /// </summary>
        /// <remarks>
        /// Sets or updates entity property values on issues. Up to 10 entity properties can be specified for each issue and up to 100 issues included in the request.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON.
        /// <br/>
        /// <br/>This operation is:
        /// <br/>
        /// <br/> *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/> *  non-transactional. Updating some entities may fail. Such information will available in the task result.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="body">Details of the issue properties to be set or updated. Note that if an issue is not found, it is ignored.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BulkSetIssuePropertiesByIssueAsync(MultiIssueEntityProperties body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk set issue property
        /// </summary>
        /// <remarks>
        /// Sets a property value on multiple issues.
        /// <br/>
        /// <br/>The value set can be a constant or determined by a [Jira expression](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/). Expressions must be computable with constant complexity when applied to a set of issues. Expressions must also comply with the [restrictions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions) that apply to all Jira expressions.
        /// <br/>
        /// <br/>The issues to be updated can be specified by a filter.
        /// <br/>
        /// <br/>The filter identifies issues eligible for update using these criteria:
        /// <br/>
        /// <br/> *  `entityIds` Only issues from this list are eligible.
        /// <br/> *  `currentValue` Only issues with the property set to this value are eligible.
        /// <br/> *  `hasProperty`:
        /// <br/>    
        /// <br/>     *  If *true*, only issues with the property are eligible.
        /// <br/>     *  If *false*, only issues without the property are eligible.
        /// <br/>
        /// <br/>If more than one criteria is specified, they are joined with the logical *AND*: only issues that satisfy all criteria are eligible.
        /// <br/>
        /// <br/>If an invalid combination of criteria is provided, an error is returned. For example, specifying a `currentValue` and `hasProperty` as *false* would not match any issues (because without the property the property cannot have a value).
        /// <br/>
        /// <br/>The filter is optional. Without the filter all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
        /// <br/>
        /// <br/>This operation is:
        /// <br/>
        /// <br/> *  transactional, either all eligible issues are updated or, when errors occur, none are updated.
        /// <br/> *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
        /// </remarks>
        /// <param name="propertyKey">The key of the property. The maximum length is 255 characters.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BulkSetIssuePropertyAsync(string propertyKey, BulkIssuePropertyUpdateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk delete issue property
        /// </summary>
        /// <remarks>
        /// Deletes a property value from multiple issues. The issues to be updated can be specified by filter criteria.
        /// <br/>
        /// <br/>The criteria the filter used to identify eligible issues are:
        /// <br/>
        /// <br/> *  `entityIds` Only issues from this list are eligible.
        /// <br/> *  `currentValue` Only issues with the property set to this value are eligible.
        /// <br/>
        /// <br/>If both criteria is specified, they are joined with the logical *AND*: only issues that satisfy both criteria are considered eligible.
        /// <br/>
        /// <br/>If no filter criteria are specified, all the issues visible to the user and where the user has the EDIT\_ISSUES permission for the issue are considered eligible.
        /// <br/>
        /// <br/>This operation is:
        /// <br/>
        /// <br/> *  transactional, either the property is deleted from all eligible issues or, when errors occur, no properties are deleted.
        /// <br/> *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [ project permission](https://confluence.atlassian.com/x/yodKLg) for each project containing issues.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for each issue.
        /// </remarks>
        /// <param name="propertyKey">The key of the property.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BulkDeleteIssuePropertyAsync(string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unarchive issue(s) by issue keys/ID
        /// </summary>
        /// <remarks>
        /// Enables admins to unarchive up to 1000 issues in a single request using issue ID/key, returning details of the issue(s) unarchived in the process and the errors encountered, if any.
        /// <br/>
        /// <br/>**Note that:**
        /// <br/>
        /// <br/> *  you can't unarchive subtasks directly, only through their parent issues
        /// <br/> *  you can only unarchive issues from software, service management, and business projects
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
        /// <br/>
        /// <br/>**License required:** Premium or Enterprise
        /// <br/>
        /// <br/>**Signed-in users only:** This API can't be accessed anonymously.
        /// </remarks>
        /// <param name="body">Contains a list of issue keys or IDs to be unarchived.</param>
        /// <returns>Returned if there is at least one valid issue to unarchive in the request. It will return the count of unarchived issues, which also includes the count of the subtasks unarchived, and it will show the detailed errors for those issues which are not unarchived.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueArchivalSyncResponse> UnarchiveIssuesAsync(IssueArchivalSyncRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get is watching issue bulk
        /// </summary>
        /// <remarks>
        /// Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is `false`.
        /// <br/>
        /// <br/>This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="body">A list of issue IDs.</param>
        /// <returns>Returned if the request is successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkIssueIsWatching> GetIsWatchingIssueBulkAsync(IssueList body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue
        /// </summary>
        /// <remarks>
        /// Returns the details for an issue.
        /// <br/>
        /// <br/>The issue is identified by its ID or key, however, if the identifier doesn't match an issue, a case-insensitive search and check for moved issues is performed. If a matching issue is found its details are returned, a 302 or other redirect is **not** returned. The issue key returned in the response is the key of the issue found.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="fields">A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:
        /// <br/>
        /// <br/> *  `*all` Returns all fields.
        /// <br/> *  `*navigable` Returns navigable fields.
        /// <br/> *  Any issue field, prefixed with a minus to exclude.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/> *  `summary,comment` Returns only the summary and comments fields.
        /// <br/> *  `-description` Returns all (default) fields except description.
        /// <br/> *  `*navigable,-comment` Returns all navigable fields except comment.
        /// <br/>
        /// <br/>This parameter may be specified multiple times. For example, `fields=field1,field2&amp; fields=field3`.
        /// <br/>
        /// <br/>Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-3-search-get) and [Search for issues using JQL (POST)](#api-rest-api-3-search-post) where the default is all navigable fields.</param>
        /// <param name="fieldsByKeys">Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `renderedFields` Returns field values rendered in HTML format.
        /// <br/> *  `names` Returns the display name of each field.
        /// <br/> *  `schema` Returns the schema describing a field type.
        /// <br/> *  `transitions` Returns all possible transitions for the issue.
        /// <br/> *  `editmeta` Returns information about how each field can be edited.
        /// <br/> *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
        /// <br/> *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.</param>
        /// <param name="properties">A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:
        /// <br/>
        /// <br/> *  `*all` Returns all issue properties.
        /// <br/> *  Any issue property key, prefixed with a minus to exclude.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/> *  `*all` Returns all properties.
        /// <br/> *  `*all,-prop1` Returns all properties except `prop1`.
        /// <br/> *  `prop1,prop2` Returns `prop1` and `prop2` properties.
        /// <br/>
        /// <br/>This parameter may be specified multiple times. For example, `properties=prop1,prop2&amp; properties=prop3`.</param>
        /// <param name="updateHistory">Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-3-search-get) `lastViewed` field.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueBean> GetIssueAsync(string issueIdOrKey, System.Collections.Generic.IEnumerable<string> fields = null, bool? fieldsByKeys = null, string expand = null, System.Collections.Generic.IEnumerable<string> properties = null, bool? updateHistory = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Edit issue
        /// </summary>
        /// <remarks>
        /// Edits an issue. A transition may be applied and issue properties updated as part of the edit.
        /// <br/>
        /// <br/>The edits to the issue's fields are defined using `update` and `fields`. The fields that can be edited are determined using [ Get edit issue metadata](#api-rest-api-3-issue-issueIdOrKey-editmeta-get).
        /// <br/>
        /// <br/>The parent field may be set by key or ID. For standard issue types, the parent may be removed by setting `update.parent.set.none` to *true*. Note that the `description`, `environment`, and any `textarea` type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (`textfield`) accept a string and don't handle Atlassian Document Format content.
        /// <br/>
        /// <br/>Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can override the screen security configuration using `overrideScreenSecurity` and `overrideEditableFlag`.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="notifyUsers">Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.</param>
        /// <param name="overrideScreenSecurity">Whether screen security is overridden to enable hidden fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <param name="overrideEditableFlag">Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <param name="returnIssue">Whether the response should contain the issue with fields edited in this request. The returned issue will have the same format as in the [Get issue API](#api-rest-api-3-issue-issueidorkey-get).</param>
        /// <param name="expand">The Get issue API expand parameter to use in the response if the `returnIssue` parameter is `true`.</param>
        /// <returns>Returned if the request is successful and the `returnIssue` parameter is `true`</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> EditIssueAsync(string issueIdOrKey, IssueUpdateDetails body, bool? notifyUsers = null, bool? overrideScreenSecurity = null, bool? overrideEditableFlag = null, bool? returnIssue = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue
        /// </summary>
        /// <remarks>
        /// Deletes an issue.
        /// <br/>
        /// <br/>An issue cannot be deleted if it has one or more subtasks. To delete an issue with subtasks, set `deleteSubtasks`. This causes the issue's subtasks to be deleted with the issue.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Delete issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="deleteSubtasks">Whether the issue's subtasks are deleted when the issue is deleted.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIssueAsync(string issueIdOrKey, DeleteSubtasks? deleteSubtasks = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign issue
        /// </summary>
        /// <remarks>
        /// Assigns an issue to a user. Use this operation when the calling user does not have the *Edit Issues* permission but has the *Assign issue* permission for the project that the issue is in.
        /// <br/>
        /// <br/>If `name` or `accountId` is set to:
        /// <br/>
        /// <br/> *  `"-1"`, the issue is assigned to the default assignee for the project.
        /// <br/> *  `null`, the issue is set to unassigned.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse Projects* and *Assign Issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue to be assigned.</param>
        /// <param name="body">The request object with the user that the issue is assigned to.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AssignIssueAsync(string issueIdOrKey, User body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add attachment
        /// </summary>
        /// <remarks>
        /// Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).
        /// <br/>
        /// <br/>Note that:
        /// <br/>
        /// <br/> *  The request must have a `X-Atlassian-Token: no-check` header, if not it is blocked. See [Special headers](#special-request-headers) for more information.
        /// <br/> *  The name of the multipart/form-data parameter that contains the attachments must be `file`.
        /// <br/>
        /// <br/>The following examples upload a file called *myfile.txt* to the issue *TEST-123*:
        /// <br/>
        /// <br/>#### curl ####
        /// <br/>
        /// <br/>    curl --location --request POST 'https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments'
        /// <br/>     -u 'email@example.com:&lt;api_token&gt;'
        /// <br/>     -H 'X-Atlassian-Token: no-check'
        /// <br/>     --form 'file=@"myfile.txt"'
        /// <br/>
        /// <br/>#### Node.js ####
        /// <br/>
        /// <br/>    // This code sample uses the 'node-fetch' and 'form-data' libraries:
        /// <br/>     // https://www.npmjs.com/package/node-fetch
        /// <br/>     // https://www.npmjs.com/package/form-data
        /// <br/>     const fetch = require('node-fetch');
        /// <br/>     const FormData = require('form-data');
        /// <br/>     const fs = require('fs');
        /// <br/>    
        /// <br/>     const filePath = 'myfile.txt';
        /// <br/>     const form = new FormData();
        /// <br/>     const stats = fs.statSync(filePath);
        /// <br/>     const fileSizeInBytes = stats.size;
        /// <br/>     const fileStream = fs.createReadStream(filePath);
        /// <br/>    
        /// <br/>     form.append('file', fileStream, {knownLength: fileSizeInBytes});
        /// <br/>    
        /// <br/>     fetch('https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments', {
        /// <br/>         method: 'POST',
        /// <br/>         body: form,
        /// <br/>         headers: {
        /// <br/>             'Authorization': `Basic ${Buffer.from(
        /// <br/>                 'email@example.com:'
        /// <br/>             ).toString('base64')}`,
        /// <br/>             'Accept': 'application/json',
        /// <br/>             'X-Atlassian-Token': 'no-check'
        /// <br/>         }
        /// <br/>     })
        /// <br/>         .then(response =&gt; {
        /// <br/>             console.log(
        /// <br/>                 `Response: ${response.status} ${response.statusText}`
        /// <br/>             );
        /// <br/>             return response.text();
        /// <br/>         })
        /// <br/>         .then(text =&gt; console.log(text))
        /// <br/>         .catch(err =&gt; console.error(err));
        /// <br/>
        /// <br/>#### Java ####
        /// <br/>
        /// <br/>    // This code sample uses the  'Unirest' library:
        /// <br/>     // http://unirest.io/java.html
        /// <br/>     HttpResponse response = Unirest.post("https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments")
        /// <br/>             .basicAuth("email@example.com", "")
        /// <br/>             .header("Accept", "application/json")
        /// <br/>             .header("X-Atlassian-Token", "no-check")
        /// <br/>             .field("file", new File("myfile.txt"))
        /// <br/>             .asJson();
        /// <br/>    
        /// <br/>             System.out.println(response.getBody());
        /// <br/>
        /// <br/>#### Python ####
        /// <br/>
        /// <br/>    # This code sample uses the 'requests' library:
        /// <br/>     # http://docs.python-requests.org
        /// <br/>     import requests
        /// <br/>     from requests.auth import HTTPBasicAuth
        /// <br/>     import json
        /// <br/>    
        /// <br/>     url = "https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments"
        /// <br/>    
        /// <br/>     auth = HTTPBasicAuth("email@example.com", "")
        /// <br/>    
        /// <br/>     headers = {
        /// <br/>        "Accept": "application/json",
        /// <br/>        "X-Atlassian-Token": "no-check"
        /// <br/>     }
        /// <br/>    
        /// <br/>     response = requests.request(
        /// <br/>        "POST",
        /// <br/>        url,
        /// <br/>        headers = headers,
        /// <br/>        auth = auth,
        /// <br/>        files = {
        /// <br/>             "file": ("myfile.txt", open("myfile.txt","rb"), "application-type")
        /// <br/>        }
        /// <br/>     )
        /// <br/>    
        /// <br/>     print(json.dumps(json.loads(response.text), sort_keys=True, indent=4, separators=(",", ": ")))
        /// <br/>
        /// <br/>#### PHP ####
        /// <br/>
        /// <br/>    // This code sample uses the 'Unirest' library:
        /// <br/>     // http://unirest.io/php.html
        /// <br/>     Unirest\Request::auth('email@example.com', '');
        /// <br/>    
        /// <br/>     $headers = array(
        /// <br/>       'Accept' =&gt; 'application/json',
        /// <br/>       'X-Atlassian-Token' =&gt; 'no-check'
        /// <br/>     );
        /// <br/>    
        /// <br/>     $parameters = array(
        /// <br/>       'file' =&gt; File::add('myfile.txt')
        /// <br/>     );
        /// <br/>    
        /// <br/>     $response = Unirest\Request::post(
        /// <br/>       'https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments',
        /// <br/>       $headers,
        /// <br/>       $parameters
        /// <br/>     );
        /// <br/>    
        /// <br/>     var_dump($response)
        /// <br/>
        /// <br/>#### Forge ####
        /// <br/>
        /// <br/>    // This sample uses Atlassian Forge and the `form-data` library.
        /// <br/>     // https://developer.atlassian.com/platform/forge/
        /// <br/>     // https://www.npmjs.com/package/form-data
        /// <br/>     import api from "@forge/api";
        /// <br/>     import FormData from "form-data";
        /// <br/>    
        /// <br/>     const form = new FormData();
        /// <br/>     form.append('file', fileStream, {knownLength: fileSizeInBytes});
        /// <br/>    
        /// <br/>     const response = await api.asApp().requestJira('/rest/api/2/issue/{issueIdOrKey}/attachments', {
        /// <br/>         method: 'POST',
        /// <br/>         body: form,
        /// <br/>         headers: {
        /// <br/>             'Accept': 'application/json',
        /// <br/>             'X-Atlassian-Token': 'no-check'
        /// <br/>         }
        /// <br/>     });
        /// <br/>    
        /// <br/>     console.log(`Response: ${response.status} ${response.statusText}`);
        /// <br/>     console.log(await response.json());
        /// <br/>
        /// <br/>Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** 
        /// <br/>
        /// <br/> *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue that attachments are added to.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Attachment>> AddAttachmentAsync(string issueIdOrKey, System.IO.Stream body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get changelogs
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all changelogs for an issue sorted by date, starting from the oldest.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanChangelog> GetChangeLogsAsync(string issueIdOrKey, int? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get changelogs by IDs
        /// </summary>
        /// <remarks>
        /// Returns changelogs for an issue specified by a list of changelog IDs.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageOfChangelogs> GetChangeLogsByIdsAsync(string issueIdOrKey, IssueChangelogIds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get comments
        /// </summary>
        /// <remarks>
        /// Returns all comments for an issue.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Comments are included in the response where the user has:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageOfComments> GetCommentsAsync(string issueIdOrKey, long? startAt = null, int? maxResults = null, OrderBy4? orderBy = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add comment
        /// </summary>
        /// <remarks>
        /// Adds a comment to an issue.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Comment> AddCommentAsync(string issueIdOrKey, Comment body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get comment
        /// </summary>
        /// <remarks>
        /// Returns a comment.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="id">The ID of the comment.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Comment> GetCommentAsync(string issueIdOrKey, string id, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update comment
        /// </summary>
        /// <remarks>
        /// Updates a comment.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.
        /// <br/> *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="id">The ID of the comment.</param>
        /// <param name="notifyUsers">Whether users are notified when a comment is updated.</param>
        /// <param name="overrideEditableFlag">Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Comment> UpdateCommentAsync(string issueIdOrKey, string id, Comment body, bool? notifyUsers = null, bool? overrideEditableFlag = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete comment
        /// </summary>
        /// <remarks>
        /// Deletes a comment.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,
        /// <br/> *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="id">The ID of the comment.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteCommentAsync(string issueIdOrKey, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get edit issue metadata
        /// </summary>
        /// <remarks>
        /// Returns the edit screen fields for an issue that are visible to and editable by the user. Use the information to populate the requests in [Edit issue](#api-rest-api-3-issue-issueIdOrKey-put).
        /// <br/>
        /// <br/>This endpoint will check for these conditions:
        /// <br/>
        /// <br/>1.  Field is available on a field screen - through screen, screen scheme, issue type screen scheme, and issue type scheme configuration. `overrideScreenSecurity=true` skips this condition.
        /// <br/>2.  Field is visible in the [field configuration](https://support.atlassian.com/jira-cloud-administration/docs/change-a-field-configuration/). `overrideScreenSecurity=true` skips this condition.
        /// <br/>3.  Field is shown on the issue: each field has different conditions here. For example: Attachment field only shows if attachments are enabled. Assignee only shows if user has permissions to assign the issue.
        /// <br/>4.  If a field is custom then it must have valid custom field context, applicable for its project and issue type. All system fields are assumed to have context in all projects and all issue types.
        /// <br/>5.  Issue has a project, issue type, and status defined.
        /// <br/>6.  Issue is assigned to a valid workflow, and the current status has assigned a workflow step. `overrideEditableFlag=true` skips this condition.
        /// <br/>7.  The current workflow step is editable. This is true by default, but [can be disabled by setting](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) the `jira.issue.editable` property to `false`. `overrideEditableFlag=true` skips this condition.
        /// <br/>8.  User has [Edit issues permission](https://support.atlassian.com/jira-cloud-administration/docs/permissions-for-company-managed-projects/).
        /// <br/>9.  Workflow permissions allow editing a field. This is true by default but [can be modified](https://support.atlassian.com/jira-cloud-administration/docs/use-workflow-properties/) using `jira.permission.*` workflow properties.
        /// <br/>
        /// <br/>Fields hidden using [Issue layout settings page](https://support.atlassian.com/jira-software-cloud/docs/configure-field-layout-in-the-issue-view/) remain editable.
        /// <br/>
        /// <br/>Connect apps having an app user with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), can return additional details using:
        /// <br/>
        /// <br/> *  `overrideScreenSecurity` When this flag is `true`, then this endpoint skips checking if fields are available through screens, and field configuration (conditions 1. and 2. from the list above).
        /// <br/> *  `overrideEditableFlag` When this flag is `true`, then this endpoint skips checking if workflow is present and if the current step is editable (conditions 6. and 7. from the list above).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/>
        /// <br/>Note: For any fields to be editable the user must have the *Edit issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="overrideScreenSecurity">Whether hidden fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <param name="overrideEditableFlag">Whether non-editable fields are returned. Available to Connect app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueUpdateMetadata> GetEditIssueMetaAsync(string issueIdOrKey, bool? overrideScreenSecurity = null, bool? overrideEditableFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send notification for issue
        /// </summary>
        /// <remarks>
        /// Creates an email notification for an issue and adds it to the mail queue.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">ID or key of the issue that the notification is sent for.</param>
        /// <param name="body">The request object for the notification and recipients.</param>
        /// <returns>Returned if the email is queued for sending.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> NotifyAsync(string issueIdOrKey, Notification body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue property keys
        /// </summary>
        /// <remarks>
        /// Returns the URLs and keys of an issue's properties.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Property details are only returned where the user has:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The key or ID of the issue.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PropertyKeys> GetIssuePropertyKeysAsync(string issueIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue property
        /// </summary>
        /// <remarks>
        /// Returns the key and value of an issue's property.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The key or ID of the issue.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityProperty> GetIssuePropertyAsync(string issueIdOrKey, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set issue property
        /// </summary>
        /// <remarks>
        /// Sets the value of an issue's property. Use this resource to store custom data against an issue.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="propertyKey">The key of the issue property. The maximum length is 255 characters.</param>
        /// <returns>Returned if the issue property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetIssuePropertyAsync(string issueIdOrKey, string propertyKey, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue property
        /// </summary>
        /// <remarks>
        /// Deletes an issue's property.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Edit issues* [project permissions](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The key or ID of the issue.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIssuePropertyAsync(string issueIdOrKey, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get remote issue links
        /// </summary>
        /// <remarks>
        /// Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&amp;id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
        /// <br/>
        /// <br/>This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="globalId">The global ID of the remote issue link.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RemoteIssueLink> GetRemoteIssueLinksAsync(string issueIdOrKey, string globalId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create or update remote issue link
        /// </summary>
        /// <remarks>
        /// Creates or updates a remote issue link for an issue.
        /// <br/>
        /// <br/>If a `globalId` is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.
        /// <br/>
        /// <br/>This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <returns>Returned if the remote issue link is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RemoteIssueLinkIdentifies> CreateOrUpdateRemoteIssueLinkAsync(string issueIdOrKey, RemoteIssueLinkRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete remote issue link by global ID
        /// </summary>
        /// <remarks>
        /// Deletes the remote issue link from the issue using the link's global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass `system=http://www.mycompany.com/support&amp;id=1` as `system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1`.
        /// <br/>
        /// <br/>This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="globalId">The global ID of a remote issue link.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRemoteIssueLinkByGlobalIdAsync(string issueIdOrKey, string globalId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get remote issue link by ID
        /// </summary>
        /// <remarks>
        /// Returns a remote issue link for an issue.
        /// <br/>
        /// <br/>This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="linkId">The ID of the remote issue link.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RemoteIssueLink> GetRemoteIssueLinkByIdAsync(string issueIdOrKey, string linkId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update remote issue link by ID
        /// </summary>
        /// <remarks>
        /// Updates a remote issue link for an issue.
        /// <br/>
        /// <br/>Note: Fields without values in the request are set to null.
        /// <br/>
        /// <br/>This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="linkId">The ID of the remote issue link.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateRemoteIssueLinkAsync(string issueIdOrKey, string linkId, RemoteIssueLinkRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete remote issue link by ID
        /// </summary>
        /// <remarks>
        /// Deletes a remote issue link from an issue.
        /// <br/>
        /// <br/>This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="linkId">The ID of a remote issue link.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRemoteIssueLinkByIdAsync(string issueIdOrKey, string linkId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get transitions
        /// </summary>
        /// <remarks>
        /// Returns either all transitions or a transition that can be performed by the user on an issue, based on the issue's status.
        /// <br/>
        /// <br/>Note, if a request is made for a transition that does not exist or cannot be performed on the issue, given its status, the response will return any empty transitions list.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required: A list or transition is returned only when the user has:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/>
        /// <br/>However, if the user does not have the *Transition issues* [ project permission](https://confluence.atlassian.com/x/yodKLg) the response will not list any transitions.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-3-issue-issueIdOrKey-transitions-post).</param>
        /// <param name="transitionId">The ID of the transition.</param>
        /// <param name="skipRemoteOnlyCondition">Whether transitions with the condition *Hide From User Condition* are included in the response.</param>
        /// <param name="includeUnavailableTransitions">Whether details of transitions that fail a condition are included in the response</param>
        /// <param name="sortByOpsBarAndStatus">Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Transitions> GetTransitionsAsync(string issueIdOrKey, string expand = null, string transitionId = null, bool? skipRemoteOnlyCondition = null, bool? includeUnavailableTransitions = null, bool? sortByOpsBarAndStatus = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Transition issue
        /// </summary>
        /// <remarks>
        /// Performs an issue transition and, if the transition has a screen, updates the fields from the transition screen.
        /// <br/>
        /// <br/>sortByCategory To update the fields on the transition screen, specify the fields in the `fields` or `update` parameters in the request body. Get details about the fields using [ Get transitions](#api-rest-api-3-issue-issueIdOrKey-transitions-get) with the `transitions.fields` expand.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Transition issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DoTransitionAsync(string issueIdOrKey, IssueUpdateDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get votes
        /// </summary>
        /// <remarks>
        /// Returns details about the votes on an issue.
        /// <br/>
        /// <br/>This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/>
        /// <br/>Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the `voters` field.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Votes> GetVotesAsync(string issueIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add vote
        /// </summary>
        /// <remarks>
        /// Adds the user's vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.
        /// <br/>
        /// <br/>This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddVoteAsync(string issueIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete vote
        /// </summary>
        /// <remarks>
        /// Deletes a user's vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.
        /// <br/>
        /// <br/>This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveVoteAsync(string issueIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue watchers
        /// </summary>
        /// <remarks>
        /// Returns the watchers for an issue.
        /// <br/>
        /// <br/>This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <returns>Returned if the request is successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Watchers> GetIssueWatchersAsync(string issueIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add watcher
        /// </summary>
        /// <remarks>
        /// Adds a user as a watcher of an issue by passing the account ID of the user. For example, `"5b10ac8d82e05b22cc7d4ef5"`. If no user is specified the calling user is added.
        /// <br/>
        /// <br/>This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="body">The account ID of the user. Note that username cannot be used due to privacy changes.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddWatcherAsync(string issueIdOrKey, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete watcher
        /// </summary>
        /// <remarks>
        /// Deletes a user as a watcher of an issue.
        /// <br/>
        /// <br/>This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveWatcherAsync(string issueIdOrKey, string username = null, string accountId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue worklogs
        /// </summary>
        /// <remarks>
        /// Returns worklogs for an issue, starting from the oldest worklog or from the worklog started on or after a date and time.
        /// <br/>
        /// <br/>Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Workloads are only returned where the user has:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="startedAfter">The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.</param>
        /// <param name="startedBefore">The worklog start date and time, as a UNIX timestamp in milliseconds, before which worklogs are returned.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.</param>
        /// <returns>Returned if the request is successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageOfWorklogs> GetIssueWorklogAsync(string issueIdOrKey, long? startAt = null, int? maxResults = null, long? startedAfter = null, long? startedBefore = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add worklog
        /// </summary>
        /// <remarks>
        /// Adds a worklog to an issue.
        /// <br/>
        /// <br/>Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* and *Work on issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key the issue.</param>
        /// <param name="notifyUsers">Whether users watching the issue are notified by email.</param>
        /// <param name="adjustEstimate">Defines how to update the issue's time estimate, the options are:
        /// <br/>
        /// <br/> *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
        /// <br/> *  `leave` Leaves the estimate unchanged.
        /// <br/> *  `manual` Reduces the estimate by amount specified in `reduceBy`.
        /// <br/> *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.</param>
        /// <param name="newEstimate">The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.</param>
        /// <param name="reduceBy">The amount to reduce the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.</param>
        /// <param name="overrideEditableFlag">Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Worklog> AddWorklogAsync(string issueIdOrKey, Worklog body, bool? notifyUsers = null, AdjustEstimate? adjustEstimate = null, string newEstimate = null, string reduceBy = null, string expand = null, bool? overrideEditableFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get worklog
        /// </summary>
        /// <remarks>
        /// Returns a worklog.
        /// <br/>
        /// <br/>Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="id">The ID of the worklog.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts
        /// <br/>
        /// <br/>`properties`, which returns worklog properties.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Worklog> GetWorklogAsync(string issueIdOrKey, string id, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update worklog
        /// </summary>
        /// <remarks>
        /// Updates a worklog.
        /// <br/>
        /// <br/>Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
        /// <br/> *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key the issue.</param>
        /// <param name="id">The ID of the worklog.</param>
        /// <param name="notifyUsers">Whether users watching the issue are notified by email.</param>
        /// <param name="adjustEstimate">Defines how to update the issue's time estimate, the options are:
        /// <br/>
        /// <br/> *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
        /// <br/> *  `leave` Leaves the estimate unchanged.
        /// <br/> *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.</param>
        /// <param name="newEstimate">The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.</param>
        /// <param name="overrideEditableFlag">Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Connect and Forge app users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) can use this flag.</param>
        /// <returns>Returned if the request is successful</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Worklog> UpdateWorklogAsync(string issueIdOrKey, string id, Worklog body, bool? notifyUsers = null, AdjustEstimate2? adjustEstimate = null, string newEstimate = null, string expand = null, bool? overrideEditableFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete worklog
        /// </summary>
        /// <remarks>
        /// Deletes a worklog from an issue.
        /// <br/>
        /// <br/>Time tracking must be enabled in Jira, otherwise this operation returns an error. For more information, see [Configuring time tracking](https://confluence.atlassian.com/x/qoXKM).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  *Delete all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any worklog or *Delete own worklogs* to delete worklogs created by the user,
        /// <br/> *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="id">The ID of the worklog.</param>
        /// <param name="notifyUsers">Whether users watching the issue are notified by email.</param>
        /// <param name="adjustEstimate">Defines how to update the issue's time estimate, the options are:
        /// <br/>
        /// <br/> *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
        /// <br/> *  `leave` Leaves the estimate unchanged.
        /// <br/> *  `manual` Increases the estimate by amount specified in `increaseBy`.
        /// <br/> *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.</param>
        /// <param name="newEstimate">The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.</param>
        /// <param name="increaseBy">The amount to increase the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `manual`.</param>
        /// <param name="overrideEditableFlag">Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Connect and Forge app users with admin permission can use this flag.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWorklogAsync(string issueIdOrKey, string id, bool? notifyUsers = null, AdjustEstimate3? adjustEstimate = null, string newEstimate = null, string increaseBy = null, bool? overrideEditableFlag = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get worklog property keys
        /// </summary>
        /// <remarks>
        /// Returns the keys of all properties for a worklog.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="worklogId">The ID of the worklog.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PropertyKeys> GetWorklogPropertyKeysAsync(string issueIdOrKey, string worklogId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get worklog property
        /// </summary>
        /// <remarks>
        /// Returns the value of a worklog property.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="worklogId">The ID of the worklog.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityProperty> GetWorklogPropertyAsync(string issueIdOrKey, string worklogId, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set worklog property
        /// </summary>
        /// <remarks>
        /// Sets the value of a worklog property. Use this operation to store custom data against the worklog.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  *Edit all worklogs*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any worklog or *Edit own worklogs* to update worklogs created by the user.
        /// <br/> *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="worklogId">The ID of the worklog.</param>
        /// <param name="propertyKey">The key of the issue property. The maximum length is 255 characters.</param>
        /// <returns>Returned if the worklog property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetWorklogPropertyAsync(string issueIdOrKey, string worklogId, string propertyKey, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete worklog property
        /// </summary>
        /// <remarks>
        /// Deletes a worklog property.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the worklog has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="worklogId">The ID of the worklog.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the worklog property is removed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWorklogPropertyAsync(string issueIdOrKey, string worklogId, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create issue link
        /// </summary>
        /// <remarks>
        /// Creates a link between two issues. Use this operation to indicate a relationship between two issues and optionally add a comment to the from (outward) issue. To use this resource the site must have [Issue Linking](https://confluence.atlassian.com/x/yoXKM) enabled.
        /// <br/>
        /// <br/>This resource returns nothing on the creation of an issue link. To obtain the ID of the issue link, use `https://your-domain.atlassian.net/rest/api/3/issue/[linked issue key]?fields=issuelinks`.
        /// <br/>
        /// <br/>If the link request duplicates a link, the response indicates that the issue link was created. If the request included a comment, the comment is added.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues to be linked,
        /// <br/> *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) on the project containing the from (outward) issue,
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// <br/> *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.
        /// </remarks>
        /// <param name="body">The issue link request.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> LinkIssuesAsync(LinkIssueRequestJsonBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue link
        /// </summary>
        /// <remarks>
        /// Returns an issue link.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Browse project* [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the linked issues.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
        /// </remarks>
        /// <param name="linkId">The ID of the issue link.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueLink> GetIssueLinkAsync(string linkId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue link
        /// </summary>
        /// <remarks>
        /// Deletes an issue link.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  Browse project [project permission](https://confluence.atlassian.com/x/yodKLg) for all the projects containing the issues in the link.
        /// <br/> *  *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one of the projects containing issues in the link.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, permission to view both of the issues.
        /// </remarks>
        /// <param name="linkId">The ID of the issue link.</param>
        /// <returns>200 response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIssueLinkAsync(string linkId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue link types
        /// </summary>
        /// <remarks>
        /// Returns a list of all issue link types.
        /// <br/>
        /// <br/>To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueLinkTypes> GetIssueLinkTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create issue link type
        /// </summary>
        /// <remarks>
        /// Creates an issue link type. Use this operation to create descriptions of the reasons why issues are linked. The issue link type consists of a name and descriptions for a link's inward and outward relationships.
        /// <br/>
        /// <br/>To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueLinkType> CreateIssueLinkTypeAsync(IssueLinkType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue link type
        /// </summary>
        /// <remarks>
        /// Returns an issue link type.
        /// <br/>
        /// <br/>To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project in the site.
        /// </remarks>
        /// <param name="issueLinkTypeId">The ID of the issue link type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueLinkType> GetIssueLinkTypeAsync(string issueLinkTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update issue link type
        /// </summary>
        /// <remarks>
        /// Updates an issue link type.
        /// <br/>
        /// <br/>To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueLinkTypeId">The ID of the issue link type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueLinkType> UpdateIssueLinkTypeAsync(string issueLinkTypeId, IssueLinkType body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue link type
        /// </summary>
        /// <remarks>
        /// Deletes an issue link type.
        /// <br/>
        /// <br/>To use this operation, the site must have [issue linking](https://confluence.atlassian.com/x/yoXKM) enabled.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueLinkTypeId">The ID of the issue link type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIssueLinkTypeAsync(string issueLinkTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export archived issue(s)
        /// </summary>
        /// <remarks>
        /// Enables admins to retrieve details of all archived issues. Upon a successful request, the admin who submitted it will receive an email with a link to download a CSV file with the issue details.
        /// <br/>
        /// <br/>Note that this API only exports the values of system fields and archival-specific fields (`ArchivedBy` and `ArchivedDate`). Custom fields aren't supported.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Jira admin or site admin: [global permission](https://confluence.atlassian.com/x/x4dKLg)
        /// <br/>
        /// <br/>**License required:** Premium or Enterprise
        /// <br/>
        /// <br/>**Signed-in users only:** This API can't be accessed anonymously.
        /// <br/>
        /// <br/>**Rate limiting:** Only a single request can be active at any given time.
        /// </remarks>
        /// <param name="body">You can filter the issues in your request by the `projects`, `archivedBy`, `archivedDate`, `issueTypes`, and `reporters` fields. All filters are optional. If you don't provide any filters, you'll get a list of up to one million archived issues.</param>
        /// <returns>Returns the details of your export task. You can use the [get task](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-tasks/#api-rest-api-3-task-taskid-get) API to view the progress of your request.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ExportArchivedIssuesTaskProgressResponse> ExportArchivedIssuesAsync(ArchivedIssuesFilterRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue security schemes
        /// </summary>
        /// <remarks>
        /// Returns all [issue security schemes](https://confluence.atlassian.com/x/J4lKLg).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecuritySchemes> GetIssueSecuritySchemesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create issue security scheme
        /// </summary>
        /// <remarks>
        /// Creates a security scheme with security scheme levels and levels' members. You can create up to 100 security scheme levels and security scheme levels' members per request.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecuritySchemeId> CreateIssueSecuritySchemeAsync(CreateIssueSecuritySchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue security levels
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue security levels.
        /// <br/>
        /// <br/>Only issue security levels in the context of classic projects are returned.
        /// <br/>
        /// <br/>Filtering using IDs is inclusive: if you specify both security scheme IDs and level IDs, the result will include both specified issue security levels and all issue security levels from the specified schemes.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of issue security scheme level IDs. To include multiple issue security levels, separate IDs with an ampersand: `id=10000&amp;id=10001`.</param>
        /// <param name="schemeId">The list of issue security scheme IDs. To include multiple issue security schemes, separate IDs with an ampersand: `schemeId=10000&amp;schemeId=10001`.</param>
        /// <param name="onlyDefault">When set to true, returns multiple default levels for each security scheme containing a default. If you provide scheme and level IDs not associated with the default, returns an empty page. The default value is false.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanSecurityLevel> GetSecurityLevelsAsync(string startAt = null, string maxResults = null, System.Collections.Generic.IEnumerable<string> id = null, System.Collections.Generic.IEnumerable<string> schemeId = null, bool? onlyDefault = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set default issue security levels
        /// </summary>
        /// <remarks>
        /// Sets default issue security levels for schemes.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetDefaultLevelsAsync(SetDefaultLevelsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue security level members
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue security level members.
        /// <br/>
        /// <br/>Only issue security level members in the context of classic projects are returned.
        /// <br/>
        /// <br/>Filtering using parameters is inclusive: if you specify both security scheme IDs and level IDs, the result will include all issue security level members from the specified schemes and levels.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of issue security level member IDs. To include multiple issue security level members separate IDs with an ampersand: `id=10000&amp;id=10001`.</param>
        /// <param name="schemeId">The list of issue security scheme IDs. To include multiple issue security schemes separate IDs with an ampersand: `schemeId=10000&amp;schemeId=10001`.</param>
        /// <param name="levelId">The list of issue security level IDs. To include multiple issue security levels separate IDs with an ampersand: `levelId=10000&amp;levelId=10001`.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information
        /// <br/> *  `field` Returns information about the custom field granted the permission
        /// <br/> *  `group` Returns information about the group that is granted the permission
        /// <br/> *  `projectRole` Returns information about the project role granted the permission
        /// <br/> *  `user` Returns information about the user who is granted the permission</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanSecurityLevelMember> GetSecurityLevelMembersAsync(string startAt = null, string maxResults = null, System.Collections.Generic.IEnumerable<string> id = null, System.Collections.Generic.IEnumerable<string> schemeId = null, System.Collections.Generic.IEnumerable<string> levelId = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get projects using issue security schemes
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) mapping of projects that are using security schemes. You can provide either one or multiple security scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Only issue security schemes in the context of classic projects are supported. **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="issueSecuritySchemeId">The list of security scheme IDs to be filtered out.</param>
        /// <param name="projectId">The list of project IDs to be filtered out.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueSecuritySchemeToProjectMapping> SearchProjectsUsingSecuritySchemesAsync(string startAt = null, string maxResults = null, System.Collections.Generic.IEnumerable<string> issueSecuritySchemeId = null, System.Collections.Generic.IEnumerable<string> projectId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Associate security scheme to project
        /// </summary>
        /// <remarks>
        /// Associates an issue security scheme with a project and remaps security levels of issues to the new levels, if provided.
        /// <br/>
        /// <br/>This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AssociateSchemesToProjectsAsync(AssociateSecuritySchemeWithProjectDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search issue security schemes
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue security schemes.  
        /// <br/>If you specify the project ID parameter, the result will contain issue security schemes and related project IDs you filter by. Use \{@link IssueSecuritySchemeResource\#searchProjectsUsingSecuritySchemes(String, String, Set, Set)\} to obtain all projects related to scheme.
        /// <br/>
        /// <br/>Only issue security schemes in the context of classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of issue security scheme IDs. To include multiple issue security scheme IDs, separate IDs with an ampersand: `id=10000&amp;id=10001`.</param>
        /// <param name="projectId">The list of project IDs. To include multiple project IDs, separate IDs with an ampersand: `projectId=10000&amp;projectId=10001`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanSecuritySchemeWithProjects> SearchSecuritySchemesAsync(string startAt = null, string maxResults = null, System.Collections.Generic.IEnumerable<string> id = null, System.Collections.Generic.IEnumerable<string> projectId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue security scheme
        /// </summary>
        /// <remarks>
        /// Returns an issue security scheme along with its security levels.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/> *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project that uses the requested issue security scheme.
        /// </remarks>
        /// <param name="id">The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityScheme> GetIssueSecuritySchemeAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update issue security scheme
        /// </summary>
        /// <remarks>
        /// Updates the issue security scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue security scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateIssueSecuritySchemeAsync(string id, UpdateIssueSecuritySchemeRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue security level members
        /// </summary>
        /// <remarks>
        /// Returns issue security level members.
        /// <br/>
        /// <br/>Only issue security level members in context of classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueSecuritySchemeId">The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="issueSecurityLevelId">The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&amp;issueSecurityLevelId=10001`.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `user` Returns information about the user who is granted the permission.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueSecurityLevelMember> GetIssueSecurityLevelMembersAsync(long issueSecuritySchemeId, long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> issueSecurityLevelId = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue security scheme
        /// </summary>
        /// <remarks>
        /// Deletes an issue security scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the issue security scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteSecuritySchemeAsync(string schemeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add issue security levels
        /// </summary>
        /// <remarks>
        /// Adds levels and levels' members to the issue security scheme. You can add up to 100 levels per request.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the issue security scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddSecurityLevelAsync(string schemeId, AddSecuritySchemeLevelsRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update issue security level
        /// </summary>
        /// <remarks>
        /// Updates the issue security level.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the issue security scheme level belongs to.</param>
        /// <param name="levelId">The ID of the issue security level to update.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateSecurityLevelAsync(string schemeId, string levelId, UpdateIssueSecurityLevelDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove issue security level
        /// </summary>
        /// <remarks>
        /// Deletes an issue security level.
        /// <br/>
        /// <br/>This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the issue security scheme.</param>
        /// <param name="levelId">The ID of the issue security level to remove.</param>
        /// <param name="replaceWith">The ID of the issue security level that will replace the currently selected level.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveLevelAsync(string schemeId, string levelId, string replaceWith = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add issue security level members
        /// </summary>
        /// <remarks>
        /// Adds members to the issue security level. You can add up to 100 members per request.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the issue security scheme.</param>
        /// <param name="levelId">The ID of the issue security level.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddSecurityLevelMembersAsync(string schemeId, string levelId, SecuritySchemeMembersRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove member from issue security level
        /// </summary>
        /// <remarks>
        /// Removes an issue security level member from an issue security scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the issue security scheme.</param>
        /// <param name="levelId">The ID of the issue security level.</param>
        /// <param name="memberId">The ID of the issue security level member to be removed.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RemoveMemberFromSecurityLevelAsync(string schemeId, string levelId, string memberId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all issue types for user
        /// </summary>
        /// <remarks>
        /// Returns all issue types.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Issue types are only returned as follows:
        /// <br/>
        /// <br/> *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.
        /// <br/> *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IssueTypeDetails>> GetIssueAllTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create issue type
        /// </summary>
        /// <remarks>
        /// Creates an issue type and adds it to the default issue type scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypeDetails> CreateIssueTypeAsync(IssueTypeCreateBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue types for project
        /// </summary>
        /// <remarks>
        /// Returns issue types for a project.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="level">The level of the issue type to filter by. Use:
        /// <br/>
        /// <br/> *  `-1` for Subtask.
        /// <br/> *  `0` for Base.
        /// <br/> *  `1` for Epic.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IssueTypeDetails>> GetIssueTypesForProjectAsync(long projectId, int? level = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type
        /// </summary>
        /// <remarks>
        /// Returns an issue type.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypeDetails> GetIssueTypeAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update issue type
        /// </summary>
        /// <remarks>
        /// Updates the issue type.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypeDetails> UpdateIssueTypeAsync(string id, IssueTypeUpdateBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue type
        /// </summary>
        /// <remarks>
        /// Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (`alternativeIssueTypeId`). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <param name="alternativeIssueTypeId">The ID of the replacement issue type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIssueTypeAsync(string id, string alternativeIssueTypeId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get alternative issue types
        /// </summary>
        /// <remarks>
        /// Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IssueTypeDetails>> GetAlternativeIssueTypesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Load issue type avatar
        /// </summary>
        /// <remarks>
        /// Loads an avatar for the issue type.
        /// <br/>
        /// <br/>Specify the avatar's local file location in the body of the request. Also, include the following headers:
        /// <br/>
        /// <br/> *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
        /// <br/> *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
        /// <br/>
        /// <br/>For example:  
        /// <br/>`curl --request POST \ --user email@example.com:&lt;api_token&gt; \ --header 'X-Atlassian-Token: no-check' \ --header 'Content-Type: image/&lt; image_type&gt;' \ --data-binary "&lt;@/path/to/file/with/your/avatar&gt;" \ --url 'https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}'This`
        /// <br/>
        /// <br/>The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
        /// <br/>
        /// <br/>The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
        /// <br/>
        /// <br/>After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <param name="size">The length of each side of the crop region.</param>
        /// <param name="x">The X coordinate of the top-left corner of the crop region.</param>
        /// <param name="y">The Y coordinate of the top-left corner of the crop region.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Avatar> CreateIssueTypeAvatarAsync(string id, int size, object body, int? x = null, int? y = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type property keys
        /// </summary>
        /// <remarks>
        /// Returns all the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys of the issue type.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the property keys of any issue type.
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the property keys of any issue types associated with the projects the user has permission to browse.
        /// </remarks>
        /// <param name="issueTypeId">The ID of the issue type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PropertyKeys> GetIssueTypePropertyKeysAsync(string issueTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type property
        /// </summary>
        /// <remarks>
        /// Returns the key and value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to get the details of any issue type.
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) to get the details of any issue types associated with the projects the user has permission to browse.
        /// </remarks>
        /// <param name="issueTypeId">The ID of the issue type.</param>
        /// <param name="propertyKey">The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityProperty> GetIssueTypePropertyAsync(string issueTypeId, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set issue type property
        /// </summary>
        /// <remarks>
        /// Creates or updates the value of the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). Use this resource to store and update data against an issue type.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeId">The ID of the issue type.</param>
        /// <param name="propertyKey">The key of the issue type property. The maximum length is 255 characters.</param>
        /// <returns>Returned if the issue type property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetIssueTypePropertyAsync(string issueTypeId, string propertyKey, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue type property
        /// </summary>
        /// <remarks>
        /// Deletes the [issue type property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeId">The ID of the issue type.</param>
        /// <param name="propertyKey">The key of the property. Use [Get issue type property keys](#api-rest-api-3-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.</param>
        /// <returns>Returned if the issue type property is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteIssueTypePropertyAsync(string issueTypeId, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all issue type schemes
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue type schemes.
        /// <br/>
        /// <br/>Only issue type schemes used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&amp;id=10001`.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `name` Sorts by issue type scheme name.
        /// <br/> *  `id` Sorts by issue type scheme ID.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `projects` For each issue type schemes, returns information about the projects the issue type scheme is assigned to.
        /// <br/> *  `issueTypes` For each issue type schemes, returns information about the issueTypes the issue type scheme have.</param>
        /// <param name="queryString">String used to perform a case-insensitive partial match with issue type scheme name.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueTypeScheme> GetAllIssueTypeSchemesAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> id = null, OrderBy5? orderBy = null, string expand = null, string queryString = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create issue type scheme
        /// </summary>
        /// <remarks>
        /// Creates an issue type scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypeSchemeID> CreateIssueTypeSchemeAsync(IssueTypeSchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type scheme items
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue type scheme items.
        /// <br/>
        /// <br/>Only issue type scheme items used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="issueTypeSchemeId">The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&amp;issueTypeSchemeId=10001`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueTypeSchemeMapping> GetIssueTypeSchemesMappingAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> issueTypeSchemeId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type schemes for projects
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue type schemes and, for each issue type scheme, a list of the projects that use it.
        /// <br/>
        /// <br/>Only issue type schemes used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectId">The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&amp;projectId=10001`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueTypeSchemeProjects> GetIssueTypeSchemeForProjectsAsync(System.Collections.Generic.IEnumerable<long> projectId, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign issue type scheme to project
        /// </summary>
        /// <remarks>
        /// Assigns an issue type scheme to a project.
        /// <br/>
        /// <br/>If any issues in the project are assigned issue types not present in the new scheme, the operation will fail. To complete the assignment those issues must be updated to use issue types in the new scheme.
        /// <br/>
        /// <br/>Issue type schemes can only be assigned to classic projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AssignIssueTypeSchemeToProjectAsync(IssueTypeSchemeProjectAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update issue type scheme
        /// </summary>
        /// <remarks>
        /// Updates an issue type scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeSchemeId">The ID of the issue type scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateIssueTypeSchemeAsync(long issueTypeSchemeId, IssueTypeSchemeUpdateDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue type scheme
        /// </summary>
        /// <remarks>
        /// Deletes an issue type scheme.
        /// <br/>
        /// <br/>Only issue type schemes used in classic projects can be deleted.
        /// <br/>
        /// <br/>Any projects assigned to the scheme are reassigned to the default issue type scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeSchemeId">The ID of the issue type scheme.</param>
        /// <returns>Returned if the issue type scheme is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteIssueTypeSchemeAsync(long issueTypeSchemeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add issue types to issue type scheme
        /// </summary>
        /// <remarks>
        /// Adds issue types to an issue type scheme.
        /// <br/>
        /// <br/>The added issue types are appended to the issue types list.
        /// <br/>
        /// <br/>If any of the issue types exist in the issue type scheme, the operation fails and no issue types are added.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeSchemeId">The ID of the issue type scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddIssueTypesToIssueTypeSchemeAsync(long issueTypeSchemeId, IssueTypeIds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Change order of issue types
        /// </summary>
        /// <remarks>
        /// Changes the order of issue types in an issue type scheme.
        /// <br/>
        /// <br/>The request body parameters must meet the following requirements:
        /// <br/>
        /// <br/> *  all of the issue types must belong to the issue type scheme.
        /// <br/> *  either `after` or `position` must be provided.
        /// <br/> *  the issue type in `after` must not be in the issue type list.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeSchemeId">The ID of the issue type scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ReorderIssueTypesInIssueTypeSchemeAsync(long issueTypeSchemeId, OrderOfIssueTypes body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove issue type from issue type scheme
        /// </summary>
        /// <remarks>
        /// Removes an issue type from an issue type scheme.
        /// <br/>
        /// <br/>This operation cannot remove:
        /// <br/>
        /// <br/> *  any issue type used by issues.
        /// <br/> *  any issue types from the default issue type scheme.
        /// <br/> *  the last standard issue type from an issue type scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeSchemeId">The ID of the issue type scheme.</param>
        /// <param name="issueTypeId">The ID of the issue type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RemoveIssueTypeFromIssueTypeSchemeAsync(long issueTypeSchemeId, long issueTypeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type screen schemes
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue type screen schemes.
        /// <br/>
        /// <br/>Only issue type screen schemes used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&amp;id=10001`.</param>
        /// <param name="queryString">String used to perform a case-insensitive partial match with issue type screen scheme name.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `name` Sorts by issue type screen scheme name.
        /// <br/> *  `id` Sorts by issue type screen scheme ID.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts `projects` that, for each issue type screen schemes, returns information about the projects the issue type screen scheme is assigned to.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueTypeScreenScheme> GetIssueTypeScreenSchemesAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> id = null, string queryString = null, OrderBy6? orderBy = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create issue type screen scheme
        /// </summary>
        /// <remarks>
        /// Creates an issue type screen scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="body">An issue type screen scheme bean.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypeScreenSchemeId> CreateIssueTypeScreenSchemeAsync(IssueTypeScreenSchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type screen scheme items
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue type screen scheme items.
        /// <br/>
        /// <br/>Only issue type screen schemes used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="issueTypeScreenSchemeId">The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&amp;issueTypeScreenSchemeId=10001`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueTypeScreenSchemeItem> GetIssueTypeScreenSchemeMappingsAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> issueTypeScreenSchemeId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type screen schemes for projects
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of issue type screen schemes and, for each issue type screen scheme, a list of the projects that use it.
        /// <br/>
        /// <br/>Only issue type screen schemes used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectId">The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&amp;projectId=10001`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanIssueTypeScreenSchemesProjects> GetIssueTypeScreenSchemeProjectAssociationsAsync(System.Collections.Generic.IEnumerable<long> projectId, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign issue type screen scheme to project
        /// </summary>
        /// <remarks>
        /// Assigns an issue type screen scheme to a project.
        /// <br/>
        /// <br/>Issue type screen schemes can only be assigned to classic projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AssignIssueTypeScreenSchemeToProjectAsync(IssueTypeScreenSchemeProjectAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update issue type screen scheme
        /// </summary>
        /// <remarks>
        /// Updates an issue type screen scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeScreenSchemeId">The ID of the issue type screen scheme.</param>
        /// <param name="body">The issue type screen scheme update details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateIssueTypeScreenSchemeAsync(string issueTypeScreenSchemeId, IssueTypeScreenSchemeUpdateDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue type screen scheme
        /// </summary>
        /// <remarks>
        /// Deletes an issue type screen scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeScreenSchemeId">The ID of the issue type screen scheme.</param>
        /// <returns>Returned if the issue type screen scheme is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteIssueTypeScreenSchemeAsync(string issueTypeScreenSchemeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Append mappings to issue type screen scheme
        /// </summary>
        /// <remarks>
        /// Appends issue type to screen scheme mappings to an issue type screen scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeScreenSchemeId">The ID of the issue type screen scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AppendMappingsForIssueTypeScreenSchemeAsync(string issueTypeScreenSchemeId, IssueTypeScreenSchemeMappingDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update issue type screen scheme default screen scheme
        /// </summary>
        /// <remarks>
        /// Updates the default screen scheme of an issue type screen scheme. The default screen scheme is used for all unmapped issue types.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeScreenSchemeId">The ID of the issue type screen scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateDefaultScreenSchemeAsync(string issueTypeScreenSchemeId, UpdateDefaultScreenScheme body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove mappings from issue type screen scheme
        /// </summary>
        /// <remarks>
        /// Removes issue type to screen scheme mappings from an issue type screen scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeScreenSchemeId">The ID of the issue type screen scheme.</param>
        /// <returns>Returned if the screen scheme mappings are removed from the issue type screen scheme.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RemoveMappingsFromIssueTypeScreenSchemeAsync(string issueTypeScreenSchemeId, IssueTypeIds body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue type screen scheme projects
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of projects associated with an issue type screen scheme.
        /// <br/>
        /// <br/>Only company-managed projects associated with an issue type screen scheme are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="issueTypeScreenSchemeId">The ID of the issue type screen scheme.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanProjectDetails> GetProjectsForIssueTypeScreenSchemeAsync(long issueTypeScreenSchemeId, long? startAt = null, int? maxResults = null, string query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get field reference data (GET)
        /// </summary>
        /// <remarks>
        /// Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
        /// <br/>
        /// <br/>To filter visible field details by project or collapse non-unique fields by field type then [Get field reference data (POST)](#api-rest-api-3-jql-autocompletedata-post) can be used.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JQLReferenceData> GetAutoCompleteAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get field reference data (POST)
        /// </summary>
        /// <remarks>
        /// Returns reference data for JQL searches. This is a downloadable version of the documentation provided in [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ) and [Advanced searching - functions reference](https://confluence.atlassian.com/x/hgORLQ), along with a list of JQL-reserved words. Use this information to assist with the programmatic creation of JQL queries or the validation of queries built in a custom query builder.
        /// <br/>
        /// <br/>This operation can filter the custom fields returned by project. Invalid project IDs in `projectIds` are ignored. System fields are always returned.
        /// <br/>
        /// <br/>It can also return the collapsed field for custom fields. Collapsed fields enable searches to be performed across all fields with the same name and of the same field type. For example, the collapsed field `Component - Component[Dropdown]` enables dropdown fields `Component - cf[10061]` and `Component - cf[10062]` to be searched simultaneously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<JQLReferenceData> GetAutoCompletePostAsync(SearchAutoCompleteFilter body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get field auto complete suggestions
        /// </summary>
        /// <remarks>
        /// Returns the JQL search auto complete suggestions for a field.
        /// <br/>
        /// <br/>Suggestions can be obtained by providing:
        /// <br/>
        /// <br/> *  `fieldName` to get a list of all values for the field.
        /// <br/> *  `fieldName` and `fieldValue` to get a list of values containing the text in `fieldValue`.
        /// <br/> *  `fieldName` and `predicateName` to get a list of all predicate values for the field.
        /// <br/> *  `fieldName`, `predicateName`, and `predicateValue` to get a list of predicate values containing the text in `predicateValue`.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="fieldName">The name of the field.</param>
        /// <param name="fieldValue">The partial field item name entered by the user.</param>
        /// <param name="predicateName">The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.</param>
        /// <param name="predicateValue">The partial predicate item name entered by the user.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AutoCompleteSuggestions> GetFieldAutoCompleteForQueryStringAsync(string fieldName = null, string fieldValue = null, string predicateName = null, string predicateValue = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get precomputations (apps)
        /// </summary>
        /// <remarks>
        /// Returns the list of a function's precomputations along with information about when they were created, updated, and last used. Each precomputation has a `value` \- the JQL fragment to replace the custom function clause with.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** This API is only accessible to apps and apps can only inspect their own functions.
        /// </remarks>
        /// <param name="functionKey">The function key in format:
        /// <br/>
        /// <br/> *  Forge: `ari:cloud:ecosystem::extension/[App ID]/[Environment ID]/static/[Function key from manifest]`.
        /// <br/> *  Connect: `[App key]__[Module key]`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `functionKey` Sorts by the functionKey.
        /// <br/> *  `used` Sorts by the used timestamp.
        /// <br/> *  `created` Sorts by the created timestamp.
        /// <br/> *  `updated` Sorts by the updated timestamp.</param>
        /// <param name="filter">Not supported yet.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanJqlFunctionPrecomputationBean> GetPrecomputationsAsync(System.Collections.Generic.IEnumerable<string> functionKey = null, long? startAt = null, int? maxResults = null, string orderBy = null, string filter = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update precomputations (apps)
        /// </summary>
        /// <remarks>
        /// Update the precomputation value of a function created by a Forge/Connect app.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** An API for apps to update their own precomputations.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdatePrecomputationsAsync(JqlFunctionPrecomputationUpdateRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Check issues against JQL
        /// </summary>
        /// <remarks>
        /// Checks whether one or more issues would be returned by one or more JQL queries.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None, however, issues are only matched against JQL queries where the user has:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueMatches> MatchIssuesAsync(IssuesAndJQLQueries body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Parse JQL query
        /// </summary>
        /// <remarks>
        /// Parses and validates JQL queries.
        /// <br/>
        /// <br/>Validation is performed in context of the current user.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="validation">How to validate the JQL query and treat the validation results. Validation options include:
        /// <br/>
        /// <br/> *  `strict` Returns all errors. If validation fails, the query structure is not returned.
        /// <br/> *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.
        /// <br/> *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ParsedJqlQueries> ParseJqlQueriesAsync(JqlQueriesToParse body, Validation? validation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Convert user identifiers to account IDs in JQL queries
        /// </summary>
        /// <remarks>
        /// Converts one or more JQL queries with user identifiers (username or user key) to equivalent JQL queries with account IDs.
        /// <br/>
        /// <br/>You may wish to use this operation if your system stores JQL queries and you want to make them GDPR-compliant. For more information about GDPR-related changes, see the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConvertedJQLQueries> MigrateQueriesAsync(JQLPersonalDataMigrationRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Sanitize JQL queries
        /// </summary>
        /// <remarks>
        /// Sanitizes one or more JQL queries by converting readable details into IDs where a user doesn't have permission to view the entity.
        /// <br/>
        /// <br/>For example, if the query contains the clause *project = 'Secret project'*, and a user does not have browse permission for the project "Secret project", the sanitized query replaces the clause with *project = 12345"* (where 12345 is the ID of the project). If a user has the required permission, the clause is not sanitized. If the account ID is null, sanitizing is performed for an anonymous user.
        /// <br/>
        /// <br/>Note that sanitization doesn't make the queries GDPR-compliant, because it doesn't remove user identifiers (username or user key). If you need to make queries GDPR-compliant, use [Convert user identifiers to account IDs in JQL queries](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-jql/#api-rest-api-3-jql-sanitize-post).
        /// <br/>
        /// <br/>Before sanitization each JQL query is parsed. The queries are returned in the same order that they were passed.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SanitizedJqlQueries> SanitiseJqlQueriesAsync(JqlQueriesToSanitize body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all labels
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of labels.
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanString> GetAllLabelsAsync(long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get approximate license count
        /// </summary>
        /// <remarks>
        /// Returns the approximate number of user accounts across all Jira licenses. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicenseMetric> GetApproximateLicenseCountAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get approximate application license count
        /// </summary>
        /// <remarks>
        /// Returns the total approximate number of user accounts for a single Jira license. Note that this information is cached with a 7-day lifecycle and could be stale at the time of call.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="applicationKey">The ID of the application, represents a specific version of Jira.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<LicenseMetric> GetApproximateApplicationLicenseCountAsync(ApplicationKey applicationKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get my permissions
        /// </summary>
        /// <remarks>
        /// Returns a list of permissions indicating which permissions the user has. Details of the user's permissions can be obtained in a global, project, issue or comment context.
        /// <br/>
        /// <br/>The user is reported as having a project permission:
        /// <br/>
        /// <br/> *  in the global context, if the user has the project permission in any project.
        /// <br/> *  for a project, where the project permission is determined using issue data, if the user meets the permission's criteria for any issue in the project. Otherwise, if the user has the project permission in the project.
        /// <br/> *  for an issue, where a project permission is determined using issue data, if the user has the permission in the issue. Otherwise, if the user has the project permission in the project containing the issue.
        /// <br/> *  for a comment, where the user has both the permission to browse the comment and the project permission for the comment's parent issue. Only the BROWSE\_PROJECTS permission is supported. If a `commentId` is provided whose `permissions` does not equal BROWSE\_PROJECTS, a 400 error will be returned.
        /// <br/>
        /// <br/>This means that users may be shown as having an issue permission (such as EDIT\_ISSUES) in the global context or a project context but may not have the permission for any or all issues. For example, if Reporters have the EDIT\_ISSUES permission a user would be shown as having this permission in the global context or the context of a project, because any user can be a reporter. However, if they are not the user who reported the issue queried they would not have EDIT\_ISSUES permission for that issue.
        /// <br/>
        /// <br/>Global permissions are unaffected by context.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="projectKey">The key of project. Ignored if `projectId` is provided.</param>
        /// <param name="projectId">The ID of project.</param>
        /// <param name="issueKey">The key of the issue. Ignored if `issueId` is provided.</param>
        /// <param name="issueId">The ID of the issue.</param>
        /// <param name="permissions">A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-3-permissions-get).</param>
        /// <param name="commentId">The ID of the comment.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permissions> GetMyPermissionsAsync(string projectKey = null, string projectId = null, string issueKey = null, string issueId = null, string permissions = null, string projectUuid = null, string projectConfigurationUuid = null, string commentId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get preference
        /// </summary>
        /// <remarks>
        /// Returns the value of a preference of the current user.
        /// <br/>
        /// <br/>Note that these keys are deprecated:
        /// <br/>
        /// <br/> *  *jira.user.locale* The locale of the user. By default this is not set and the user takes the locale of the instance.
        /// <br/> *  *jira.user.timezone* The time zone of the user. By default this is not set and the user takes the timezone of the instance.
        /// <br/>
        /// <br/>Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="key">The key of the preference.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetPreferenceAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set preference
        /// </summary>
        /// <remarks>
        /// Creates a preference for the user or updates a preference's value by sending a plain text string. For example, `false`. An arbitrary preference can be created with the value containing up to 255 characters. In addition, the following keys define system preferences that can be set or created:
        /// <br/>
        /// <br/> *  *user.notifications.mimetype* The mime type used in notifications sent to the user. Defaults to `html`.
        /// <br/> *  *user.notify.own.changes* Whether the user gets notified of their own changes. Defaults to `false`.
        /// <br/> *  *user.default.share.private* Whether new [ filters](https://confluence.atlassian.com/x/eQiiLQ) are set to private. Defaults to `true`.
        /// <br/> *  *user.keyboard.shortcuts.disabled* Whether keyboard shortcuts are disabled. Defaults to `false`.
        /// <br/> *  *user.autowatch.disabled* Whether the user automatically watches issues they create or add a comment to. By default, not set: the user takes the instance autowatch setting.
        /// <br/>
        /// <br/>Note that these keys are deprecated:
        /// <br/>
        /// <br/> *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
        /// <br/> *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
        /// <br/>
        /// <br/>Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="key">The key of the preference. The maximum length is 255 characters.</param>
        /// <param name="body">The value of the preference as a plain text string. The maximum length is 255 characters.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetPreferenceAsync(string key, string body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete preference
        /// </summary>
        /// <remarks>
        /// Deletes a preference of the user, which restores the default value of system defined settings.
        /// <br/>
        /// <br/>Note that these keys are deprecated:
        /// <br/>
        /// <br/> *  *jira.user.locale* The locale of the user. By default, not set. The user takes the instance locale.
        /// <br/> *  *jira.user.timezone* The time zone of the user. By default, not set. The user takes the instance timezone.
        /// <br/>
        /// <br/>Use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API to manage timezone and locale instead.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="key">The key of the preference.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemovePreferenceAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get locale
        /// </summary>
        /// <remarks>
        /// Returns the locale for the user.
        /// <br/>
        /// <br/>If the user has no language preference set (which is the default setting) or this resource is accessed anonymous, the browser locale detected by Jira is returned. Jira detects the browser locale using the *Accept-Language* header in the request. However, if this doesn't match a locale available Jira, the site default locale is returned.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Locale> GetLocaleAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set locale
        /// </summary>
        /// <remarks>
        /// Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
        /// <br/>
        /// <br/>Sets the locale of the user. The locale must be one supported by the instance of Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="body">The locale defined in a LocaleBean.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> SetLocaleAsync(Locale body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete locale
        /// </summary>
        /// <remarks>
        /// Deprecated, use [ Update a user profile](https://developer.atlassian.com/cloud/admin/user-management/rest/#api-users-account-id-manage-profile-patch) from the user management REST API instead.
        /// <br/>
        /// <br/>Deletes the locale of the user, which restores the default setting.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<object> DeleteLocaleAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get current user
        /// </summary>
        /// <remarks>
        /// Returns details for the current user.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `groups` Returns all groups, including nested groups, the user belongs to.
        /// <br/> *  `applicationRoles` Returns the application roles the user is assigned to.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetCurrentUserAsync(string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get notification schemes paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.
        /// <br/>
        /// <br/>*Note that you should allow for events without recipients to appear in responses.*
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of notification schemes IDs to be filtered by</param>
        /// <param name="projectId">The list of projects IDs to be filtered by</param>
        /// <param name="onlyDefault">When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information
        /// <br/> *  `field` Returns information about any custom fields assigned to receive an event
        /// <br/> *  `group` Returns information about any groups assigned to receive an event
        /// <br/> *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
        /// <br/> *  `projectRole` Returns information about any project roles assigned to receive an event
        /// <br/> *  `user` Returns information about any users assigned to receive an event</param>
        /// <returns>Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanNotificationScheme> GetNotificationSchemesAsync(string startAt = null, string maxResults = null, System.Collections.Generic.IEnumerable<string> id = null, System.Collections.Generic.IEnumerable<string> projectId = null, bool? onlyDefault = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create notification scheme
        /// </summary>
        /// <remarks>
        /// Creates a notification scheme with notifications. You can create up to 1000 notifications per request.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NotificationSchemeId> CreateNotificationSchemeAsync(CreateNotificationSchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get projects using notification schemes paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don't provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don't have a concept of a default notification scheme. The mappings are ordered by projectId.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="notificationSchemeId">The list of notifications scheme IDs to be filtered out</param>
        /// <param name="projectId">The list of project IDs to be filtered out</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanNotificationSchemeAndProjectMappingJsonBean> GetNotificationSchemeToProjectMappingsAsync(string startAt = null, string maxResults = null, System.Collections.Generic.IEnumerable<string> notificationSchemeId = null, System.Collections.Generic.IEnumerable<string> projectId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get notification scheme
        /// </summary>
        /// <remarks>
        /// Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.
        /// </remarks>
        /// <param name="id">The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information
        /// <br/> *  `field` Returns information about any custom fields assigned to receive an event
        /// <br/> *  `group` Returns information about any groups assigned to receive an event
        /// <br/> *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
        /// <br/> *  `projectRole` Returns information about any project roles assigned to receive an event
        /// <br/> *  `user` Returns information about any users assigned to receive an event</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NotificationScheme> GetNotificationSchemeAsync(long id, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update notification scheme
        /// </summary>
        /// <remarks>
        /// Updates a notification scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the notification scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateNotificationSchemeAsync(string id, UpdateNotificationSchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add notifications to notification scheme
        /// </summary>
        /// <remarks>
        /// Adds notifications to a notification scheme. You can add up to 1000 notifications per request.
        /// <br/>
        /// <br/>*Deprecated: The notification type `EmailAddress` is no longer supported in Cloud. Refer to the [changelog](https://developer.atlassian.com/cloud/jira/platform/changelog/#CHANGE-1031) for more details.*
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the notification scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddNotificationsAsync(string id, AddNotificationsDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete notification scheme
        /// </summary>
        /// <remarks>
        /// Deletes a notification scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="notificationSchemeId">The ID of the notification scheme.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteNotificationSchemeAsync(string notificationSchemeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove notification from notification scheme
        /// </summary>
        /// <remarks>
        /// Removes a notification from a notification scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="notificationSchemeId">The ID of the notification scheme.</param>
        /// <param name="notificationId">The ID of the notification.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> RemoveNotificationFromNotificationSchemeAsync(string notificationSchemeId, string notificationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all permissions
        /// </summary>
        /// <remarks>
        /// Returns all permissions, including:
        /// <br/>
        /// <br/> *  global permissions.
        /// <br/> *  project permissions.
        /// <br/> *  global permissions added by plugins.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Permissions> GetAllPermissionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get bulk permissions
        /// </summary>
        /// <remarks>
        /// Returns:
        /// <br/>
        /// <br/> *  for a list of global permissions, the global permissions granted to a user.
        /// <br/> *  for a list of project permissions and lists of projects and issues, for each project permission a list of the projects and issues a user can access or manipulate.
        /// <br/>
        /// <br/>If no account ID is provided, the operation returns details for the logged in user.
        /// <br/>
        /// <br/>Note that:
        /// <br/>
        /// <br/> *  Invalid project and issue IDs are ignored.
        /// <br/> *  A maximum of 1000 projects and 1000 issues can be checked.
        /// <br/> *  Null values in `globalPermissions`, `projectPermissions`, `projectPermissions.projects`, and `projectPermissions.issues` are ignored.
        /// <br/> *  Empty strings in `projectPermissions.permissions` are ignored.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) to check the permissions for other users, otherwise none. However, Connect apps can make a call from the app server to the product to obtain permission details for any user, without admin permission. This Connect app ability doesn't apply to calls made using AP.request() in a browser.
        /// </remarks>
        /// <param name="body">Details of the permissions to check.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BulkPermissionGrants> GetBulkPermissionsAsync(BulkPermissionsRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permitted projects
        /// </summary>
        /// <remarks>
        /// Returns all the projects where the user is granted a list of project permissions.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermittedProjects> GetPermittedProjectsAsync(PermissionsKeysBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all permission schemes
        /// </summary>
        /// <remarks>
        /// Returns all permission schemes.
        /// <br/>
        /// <br/>### About permission schemes and grants ###
        /// <br/>
        /// <br/>A permission scheme is a collection of permission grants. A permission grant consists of a `holder` and a `permission`.
        /// <br/>
        /// <br/>#### Holder object ####
        /// <br/>
        /// <br/>The `holder` object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is `"type": "group"`, and the parameter is the group name, `"parameter": "Teams in space administrators"` and the value is group ID, `"value": "ca85fac0-d974-40ca-a615-7af99c48d24f"`. The `holder` object is defined by the following properties:
        /// <br/>
        /// <br/> *  `type` Identifies the user or group (see the list of types below).
        /// <br/> *  `parameter` As a group's name can change, use of `value` is recommended. The value of this property depends on the `type`. For example, if the `type` is a group, then you need to specify the group name.
        /// <br/> *  `value` The value of this property depends on the `type`. If the `type` is a group, then you need to specify the group ID. For other `type` it has the same value as `parameter`
        /// <br/>
        /// <br/>The following `types` are available. The expected values for `parameter` and `value` are given in parentheses (some types may not have a `parameter` or `value`):
        /// <br/>
        /// <br/> *  `anyone` Grant for anonymous users.
        /// <br/> *  `applicationRole` Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.
        /// <br/> *  `assignee` Grant for the user currently assigned to an issue.
        /// <br/> *  `group` Grant for the specified group (`parameter` : group name, `value` : group ID).
        /// <br/> *  `groupCustomField` Grant for a user in the group selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
        /// <br/> *  `projectLead` Grant for a project lead.
        /// <br/> *  `projectRole` Grant for the specified project role (`parameter` :project role ID, `value` : project role ID).
        /// <br/> *  `reporter` Grant for the user who reported the issue.
        /// <br/> *  `sd.customer.portal.only` Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.
        /// <br/> *  `user` Grant for the specified user (`parameter` : user ID - historically this was the userkey but that is deprecated and the account ID should be used, `value` : user ID).
        /// <br/> *  `userCustomField` Grant for a user selected in the specified custom field (`parameter` : custom field ID, `value` : custom field ID).
        /// <br/>
        /// <br/>#### Built-in permissions ####
        /// <br/>
        /// <br/>The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.
        /// <br/>
        /// <br/>**Project permissions**
        /// <br/>
        /// <br/> *  `ADMINISTER_PROJECTS`
        /// <br/> *  `BROWSE_PROJECTS`
        /// <br/> *  `MANAGE_SPRINTS_PERMISSION` (Jira Software only)
        /// <br/> *  `SERVICEDESK_AGENT` (Jira Service Desk only)
        /// <br/> *  `VIEW_DEV_TOOLS` (Jira Software only)
        /// <br/> *  `VIEW_READONLY_WORKFLOW`
        /// <br/>
        /// <br/>**Issue permissions**
        /// <br/>
        /// <br/> *  `ASSIGNABLE_USER`
        /// <br/> *  `ASSIGN_ISSUES`
        /// <br/> *  `CLOSE_ISSUES`
        /// <br/> *  `CREATE_ISSUES`
        /// <br/> *  `DELETE_ISSUES`
        /// <br/> *  `EDIT_ISSUES`
        /// <br/> *  `LINK_ISSUES`
        /// <br/> *  `MODIFY_REPORTER`
        /// <br/> *  `MOVE_ISSUES`
        /// <br/> *  `RESOLVE_ISSUES`
        /// <br/> *  `SCHEDULE_ISSUES`
        /// <br/> *  `SET_ISSUE_SECURITY`
        /// <br/> *  `TRANSITION_ISSUES`
        /// <br/>
        /// <br/>**Voters and watchers permissions**
        /// <br/>
        /// <br/> *  `MANAGE_WATCHERS`
        /// <br/> *  `VIEW_VOTERS_AND_WATCHERS`
        /// <br/>
        /// <br/>**Comments permissions**
        /// <br/>
        /// <br/> *  `ADD_COMMENTS`
        /// <br/> *  `DELETE_ALL_COMMENTS`
        /// <br/> *  `DELETE_OWN_COMMENTS`
        /// <br/> *  `EDIT_ALL_COMMENTS`
        /// <br/> *  `EDIT_OWN_COMMENTS`
        /// <br/>
        /// <br/>**Attachments permissions**
        /// <br/>
        /// <br/> *  `CREATE_ATTACHMENTS`
        /// <br/> *  `DELETE_ALL_ATTACHMENTS`
        /// <br/> *  `DELETE_OWN_ATTACHMENTS`
        /// <br/>
        /// <br/>**Time tracking permissions**
        /// <br/>
        /// <br/> *  `DELETE_ALL_WORKLOGS`
        /// <br/> *  `DELETE_OWN_WORKLOGS`
        /// <br/> *  `EDIT_ALL_WORKLOGS`
        /// <br/> *  `EDIT_OWN_WORKLOGS`
        /// <br/> *  `WORK_ON_ISSUES`
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `user` Returns information about the user who is granted the permission.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionSchemes> GetAllPermissionSchemesAsync(string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create permission scheme
        /// </summary>
        /// <remarks>
        /// Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="body">The permission scheme to create.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `user` Returns information about the user who is granted the permission.</param>
        /// <returns>Returned if the permission scheme is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionScheme> CreatePermissionSchemeAsync(PermissionScheme body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permission scheme
        /// </summary>
        /// <remarks>
        /// Returns a permission scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="schemeId">The ID of the permission scheme to return.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `user` Returns information about the user who is granted the permission.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionScheme> GetPermissionSchemeAsync(long schemeId, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update permission scheme
        /// </summary>
        /// <remarks>
        /// Updates a permission scheme. Below are some important things to note when using this resource:
        /// <br/>
        /// <br/> *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.
        /// <br/> *  If you want to update only the name and description, then do not send a permissions list in the request.
        /// <br/> *  Sending an empty list will remove all permission grants from the permission scheme.
        /// <br/>
        /// <br/>If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).
        /// <br/>
        /// <br/>See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the permission scheme to update.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `user` Returns information about the user who is granted the permission.</param>
        /// <returns>Returned if the scheme is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionScheme> UpdatePermissionSchemeAsync(long schemeId, PermissionScheme body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete permission scheme
        /// </summary>
        /// <remarks>
        /// Deletes a permission scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the permission scheme being deleted.</param>
        /// <returns>Returned if the permission scheme is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePermissionSchemeAsync(long schemeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permission scheme grants
        /// </summary>
        /// <remarks>
        /// Returns all permission grants for a permission scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="schemeId">The ID of the permission scheme.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `user` Returns information about the user who is granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `all` Returns all expandable information.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGrants> GetPermissionSchemeGrantsAsync(long schemeId, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create permission grant
        /// </summary>
        /// <remarks>
        /// Creates a permission grant in a permission scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the permission scheme in which to create a new permission grant.</param>
        /// <param name="body">The permission grant to create.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `user` Returns information about the user who is granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `all` Returns all expandable information.</param>
        /// <returns>Returned if the scheme permission is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGrant> CreatePermissionGrantAsync(long schemeId, PermissionGrant body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get permission scheme grant
        /// </summary>
        /// <remarks>
        /// Returns a permission grant.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="schemeId">The ID of the permission scheme.</param>
        /// <param name="permissionId">The ID of the permission grant.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `user` Returns information about the user who is granted the permission.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionGrant> GetPermissionSchemeGrantAsync(long schemeId, long permissionId, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete permission scheme grant
        /// </summary>
        /// <remarks>
        /// Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="schemeId">The ID of the permission scheme to delete the permission grant from.</param>
        /// <param name="permissionId">The ID of the permission grant to delete.</param>
        /// <returns>Returned if the permission grant is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeletePermissionSchemeEntityAsync(long schemeId, long permissionId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get priorities
        /// </summary>
        /// <remarks>
        /// Returns the list of all issue priorities.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Priority>> GetPrioritiesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create priority
        /// </summary>
        /// <remarks>
        /// Creates an issue priority.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PriorityId> CreatePriorityAsync(CreatePriorityDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set default priority
        /// </summary>
        /// <remarks>
        /// Sets default issue priority.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetDefaultPriorityAsync(SetDefaultPriorityRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move priorities
        /// </summary>
        /// <remarks>
        /// Changes the order of issue priorities.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> MovePrioritiesAsync(ReorderIssuePriorities body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search priorities
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of priorities. The list can contain all priorities or a subset determined by any combination of these criteria:
        /// <br/>
        /// <br/> *  a list of priority IDs. Any invalid priority IDs are ignored.
        /// <br/> *  a list of project IDs. Only priorities that are available in these projects will be returned. Any invalid project IDs are ignored.
        /// <br/> *  whether the field configuration is a default. This returns priorities from company-managed (classic) projects only, as there is no concept of default priorities in team-managed projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of priority IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=2&amp;id=3`.</param>
        /// <param name="projectId">The list of projects IDs. To include multiple IDs, provide an ampersand-separated list. For example, `projectId=10010&amp;projectId=10111`.</param>
        /// <param name="onlyDefault">Whether only the default priority is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanPriority> SearchPrioritiesAsync(string startAt = null, string maxResults = null, System.Collections.Generic.IEnumerable<string> id = null, System.Collections.Generic.IEnumerable<string> projectId = null, bool? onlyDefault = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get priority
        /// </summary>
        /// <remarks>
        /// Returns an issue priority.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="id">The ID of the issue priority.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Priority> GetPriorityAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update priority
        /// </summary>
        /// <remarks>
        /// Updates an issue priority.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue priority.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdatePriorityAsync(string id, UpdatePriorityDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete priority
        /// </summary>
        /// <remarks>
        /// *Deprecated: please refer to the* [changelog](https://developer.atlassian.com/changelog/#CHANGE-1066) *for more details.*
        /// <br/>
        /// <br/>Deletes an issue priority.
        /// <br/>
        /// <br/>This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue priority.</param>
        /// <param name="replaceWith">The ID of the issue priority that will replace the currently selected resolution.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DeletePriorityAsync(string id, string replaceWith, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all projects
        /// </summary>
        /// <remarks>
        /// Returns all projects visible to the user. Deprecated, use [ Get projects paginated](#api-rest-api-3-project-search-get) that supports search and pagination.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Projects are returned only where the user has *Browse Projects* or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
        /// <br/>
        /// <br/> *  `description` Returns the project description.
        /// <br/> *  `issueTypes` Returns all issue types associated with the project.
        /// <br/> *  `lead` Returns information about the project lead.
        /// <br/> *  `projectKeys` Returns all project keys associated with the project.</param>
        /// <param name="recent">Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.</param>
        /// <param name="properties">A list of project properties to return for the project. This parameter accepts a comma-separated list.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetAllProjectsAsync(string expand = null, int? recent = null, System.Collections.Generic.IEnumerable<string> properties = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create project
        /// </summary>
        /// <remarks>
        /// Creates a project based on a project type template, as shown in the following table:
        /// <br/>
        /// <br/>| Project Type Key | Project Template Key |  
        /// <br/>|--|--|  
        /// <br/>| `business` | `com.atlassian.jira-core-project-templates:jira-core-simplified-content-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval`, `com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking`, `com.atlassian.jira-core-project-templates:jira-core-simplified-process-control`, `com.atlassian.jira-core-project-templates:jira-core-simplified-procurement`, `com.atlassian.jira-core-project-templates:jira-core-simplified-project-management`, `com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment`, `com.atlassian.jira-core-project-templates:jira-core-simplified-task-tracking` |  
        /// <br/>| `service_desk` | `com.atlassian.servicedesk:simplified-it-service-management`, `com.atlassian.servicedesk:simplified-general-service-desk-it`, `com.atlassian.servicedesk:simplified-general-service-desk-business`, `com.atlassian.servicedesk:simplified-external-service-desk`, `com.atlassian.servicedesk:simplified-hr-service-desk`, `com.atlassian.servicedesk:simplified-facilities-service-desk`, `com.atlassian.servicedesk:simplified-legal-service-desk`, `com.atlassian.servicedesk:simplified-analytics-service-desk`, `com.atlassian.servicedesk:simplified-marketing-service-desk`, `com.atlassian.servicedesk:simplified-design-service-desk`, `com.atlassian.servicedesk:simplified-sales-service-desk`, `com.atlassian.servicedesk:simplified-finance-service-desk`, `com.atlassian.servicedesk:next-gen-it-service-desk`, `com.atlassian.servicedesk:next-gen-hr-service-desk`, `com.atlassian.servicedesk:next-gen-legal-service-desk`, `com.atlassian.servicedesk:next-gen-marketing-service-desk`, `com.atlassian.servicedesk:next-gen-facilities-service-desk`, `com.atlassian.servicedesk:next-gen-general-service-desk`, `com.atlassian.servicedesk:next-gen-general-it-service-desk`, `com.atlassian.servicedesk:next-gen-general-business-service-desk`, `com.atlassian.servicedesk:next-gen-analytics-service-desk`, `com.atlassian.servicedesk:next-gen-finance-service-desk`, `com.atlassian.servicedesk:next-gen-design-service-desk`, `com.atlassian.servicedesk:next-gen-sales-service-desk` |  
        /// <br/>| `software` | `com.pyxis.greenhopper.jira:gh-simplified-agility-kanban`, `com.pyxis.greenhopper.jira:gh-simplified-agility-scrum`, `com.pyxis.greenhopper.jira:gh-simplified-basic`, `com.pyxis.greenhopper.jira:gh-simplified-kanban-classic`, `com.pyxis.greenhopper.jira:gh-simplified-scrum-classic` |  
        /// <br/>The project types are available according to the installed Jira features as follows:
        /// <br/>
        /// <br/> *  Jira Core, the default, enables `business` projects.
        /// <br/> *  Jira Service Management enables `service_desk` projects.
        /// <br/> *  Jira Software enables `software` projects.
        /// <br/>
        /// <br/>To determine which features are installed, go to **Jira settings** &gt; **Apps** &gt; **Manage apps** and review the System Apps list. To add Jira Software or Jira Service Management into a JIRA instance, use **Jira settings** &gt; **Apps** &gt; **Finding new apps**. For more information, see [ Managing add-ons](https://confluence.atlassian.com/x/S31NLg).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="body">The JSON representation of the project being created.</param>
        /// <returns>Returned if the project is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectIdentifiers> CreateProjectAsync(CreateProjectDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get recent projects
        /// </summary>
        /// <remarks>
        /// Returns a list of up to 20 projects recently viewed by the user that are still visible to the user.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Projects are returned only where the user has one of:
        /// <br/>
        /// <br/> *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/> *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
        /// <br/>
        /// <br/> *  `description` Returns the project description.
        /// <br/> *  `projectKeys` Returns all project keys associated with a project.
        /// <br/> *  `lead` Returns information about the project lead.
        /// <br/> *  `issueTypes` Returns all issue types associated with the project.
        /// <br/> *  `url` Returns the URL associated with the project.
        /// <br/> *  `permissions` Returns the permissions associated with the project.
        /// <br/> *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
        /// <br/> *  `*` Returns the project with all available expand options.</param>
        /// <param name="properties">EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list. Invalid property names are ignored.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Project>> GetRecentAsync(string expand = null, System.Collections.Generic.IEnumerable<StringList> properties = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get projects paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of projects visible to the user.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Projects are returned only where the user has one of:
        /// <br/>
        /// <br/> *  *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/> *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field.
        /// <br/>
        /// <br/> *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-3-projectCategory-get).
        /// <br/> *  `issueCount` Sorts by the total number of issues in each project.
        /// <br/> *  `key` Sorts by project key.
        /// <br/> *  `lastIssueUpdatedTime` Sorts by the last issue update time.
        /// <br/> *  `name` Sorts by project name.
        /// <br/> *  `owner` Sorts by project lead.
        /// <br/> *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.
        /// <br/> *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.</param>
        /// <param name="id">The project IDs to filter the results by. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&amp;id=10001`. Up to 50 project IDs can be provided.</param>
        /// <param name="keys">The project keys to filter the results by. To include multiple keys, provide an ampersand-separated list. For example, `keys=PA&amp;keys=PB`. Up to 50 project keys can be provided.</param>
        /// <param name="query">Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).</param>
        /// <param name="typeKey">Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.</param>
        /// <param name="categoryId">The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.</param>
        /// <param name="action">Filter results by projects for which the user can:
        /// <br/>
        /// <br/> *  `view` the project, meaning that they have one of the following permissions:
        /// <br/>    
        /// <br/>     *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/>     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/>     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/> *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/> *  `edit` the project, meaning that they have one of the following permissions:
        /// <br/>    
        /// <br/>     *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// <br/>     *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
        /// <br/>
        /// <br/> *  `description` Returns the project description.
        /// <br/> *  `projectKeys` Returns all project keys associated with a project.
        /// <br/> *  `lead` Returns information about the project lead.
        /// <br/> *  `issueTypes` Returns all issue types associated with the project.
        /// <br/> *  `url` Returns the URL associated with the project.
        /// <br/> *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.</param>
        /// <param name="status">EXPERIMENTAL. Filter results by project status:
        /// <br/>
        /// <br/> *  `live` Search live projects.
        /// <br/> *  `archived` Search archived projects.
        /// <br/> *  `deleted` Search deleted projects, those in the recycle bin.</param>
        /// <param name="properties">EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.</param>
        /// <param name="propertyQuery">EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters. Note that `thepropertykey` is only returned when included in `properties`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanProject> SearchProjectsAsync(long? startAt = null, int? maxResults = null, OrderBy7? orderBy = null, System.Collections.Generic.IEnumerable<long> id = null, System.Collections.Generic.IEnumerable<string> keys = null, string query = null, string typeKey = null, long? categoryId = null, Action? action = null, string expand = null, System.Collections.Generic.IEnumerable<Anonymous2> status = null, System.Collections.Generic.IEnumerable<StringList> properties = null, string propertyQuery = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all project types
        /// </summary>
        /// <remarks>
        /// Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectType>> GetAllProjectTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get licensed project types
        /// </summary>
        /// <remarks>
        /// Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectType>> GetAllAccessibleProjectTypesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project type by key
        /// </summary>
        /// <remarks>
        /// Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="projectTypeKey">The key of the project type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectType> GetProjectTypeByKeyAsync(ProjectTypeKey projectTypeKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get accessible project type by key
        /// </summary>
        /// <remarks>
        /// Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="projectTypeKey">The key of the project type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectType> GetAccessibleProjectTypeByKeyAsync(ProjectTypeKey2 projectTypeKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project
        /// </summary>
        /// <remarks>
        /// Returns the [project details](https://confluence.atlassian.com/x/ahLpNw) for a project.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
        /// <br/>
        /// <br/> *  `description` The project description.
        /// <br/> *  `issueTypes` The issue types associated with the project.
        /// <br/> *  `lead` The project lead.
        /// <br/> *  `projectKeys` All project keys associated with the project.
        /// <br/> *  `issueTypeHierarchy` The project issue type hierarchy.</param>
        /// <param name="properties">A list of project properties to return for the project. This parameter accepts a comma-separated list.</param>
        /// <returns>Returned if successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> GetProjectAsync(string projectIdOrKey, string expand = null, System.Collections.Generic.IEnumerable<string> properties = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update project
        /// </summary>
        /// <remarks>
        /// Updates the [project details](https://confluence.atlassian.com/x/ahLpNw) of a project.
        /// <br/>
        /// <br/>All parameters are optional in the body of the request. Schemes will only be updated if they are included in the request, any omitted schemes will be left unchanged.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg). is only needed when changing the schemes or project key. Otherwise you will only need *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg)
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="body">The project details to be updated.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
        /// <br/>
        /// <br/> *  `description` The project description.
        /// <br/> *  `issueTypes` The issue types associated with the project.
        /// <br/> *  `lead` The project lead.
        /// <br/> *  `projectKeys` All project keys associated with the project.</param>
        /// <returns>Returned if the project is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> UpdateProjectAsync(string projectIdOrKey, UpdateProjectDetails body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete project
        /// </summary>
        /// <remarks>
        /// Deletes a project.
        /// <br/>
        /// <br/>You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="enableUndo">Whether this project is placed in the Jira recycle bin where it will be available for restoration.</param>
        /// <returns>Returned if the project is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectAsync(string projectIdOrKey, bool? enableUndo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Archive project
        /// </summary>
        /// <remarks>
        /// Archives a project. You can't delete a project if it's archived. To delete an archived project, restore the project and then delete it. To restore a project, use the Jira UI.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ArchiveProjectAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set project avatar
        /// </summary>
        /// <remarks>
        /// Sets the avatar displayed for a project.
        /// <br/>
        /// <br/>Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateProjectAvatarAsync(string projectIdOrKey, Avatar body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete project avatar
        /// </summary>
        /// <remarks>
        /// Deletes a custom avatar from a project. Note that system avatars cannot be deleted.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or (case-sensitive) key.</param>
        /// <param name="id">The ID of the avatar.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectAvatarAsync(string projectIdOrKey, long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Load project avatar
        /// </summary>
        /// <remarks>
        /// Loads an avatar for a project.
        /// <br/>
        /// <br/>Specify the avatar's local file location in the body of the request. Also, include the following headers:
        /// <br/>
        /// <br/> *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
        /// <br/> *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
        /// <br/>
        /// <br/>For example:  
        /// <br/>`curl --request POST `
        /// <br/>
        /// <br/>`--user email@example.com:&lt;api_token&gt; `
        /// <br/>
        /// <br/>`--header 'X-Atlassian-Token: no-check' `
        /// <br/>
        /// <br/>`--header 'Content-Type: image/&lt; image_type&gt;' `
        /// <br/>
        /// <br/>`--data-binary "&lt;@/path/to/file/with/your/avatar&gt;" `
        /// <br/>
        /// <br/>`--url 'https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2'`
        /// <br/>
        /// <br/>The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
        /// <br/>
        /// <br/>The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
        /// <br/>
        /// <br/>After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <param name="x">The X coordinate of the top-left corner of the crop region.</param>
        /// <param name="y">The Y coordinate of the top-left corner of the crop region.</param>
        /// <param name="size">The length of each side of the crop region.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Avatar> CreateProjectAvatarAsync(string projectIdOrKey, object body, int? x = null, int? y = null, int? size = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all project avatars
        /// </summary>
        /// <remarks>
        /// Returns all project avatars, grouped by system and custom avatars.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <returns>Returned if request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectAvatars> GetAllProjectAvatarsAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project components paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `description` Sorts by the component description.
        /// <br/> *  `issueCount` Sorts by the count of issues associated with the component.
        /// <br/> *  `lead` Sorts by the user key of the component's project lead.
        /// <br/> *  `name` Sorts by component name.</param>
        /// <param name="query">Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanComponentWithIssueCount> GetProjectComponentsPaginatedAsync(string projectIdOrKey, long? startAt = null, int? maxResults = null, OrderBy8? orderBy = null, string query = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project components
        /// </summary>
        /// <remarks>
        /// Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectComponent>> GetProjectComponentsAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete project asynchronously
        /// </summary>
        /// <remarks>
        /// Deletes a project asynchronously.
        /// <br/>
        /// <br/>This operation is:
        /// <br/>
        /// <br/> *  transactional, that is, if part of the delete fails the project is not deleted.
        /// <br/> *  [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectAsynchronouslyAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project features
        /// </summary>
        /// <remarks>
        /// Returns the list of features for a project.
        /// </remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContainerForProjectFeatures> GetFeaturesForProjectAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set project feature state
        /// </summary>
        /// <remarks>
        /// Sets the state of a project feature.
        /// </remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <param name="featureKey">The key of the feature.</param>
        /// <param name="body">Details of the feature state change.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContainerForProjectFeatures> ToggleFeatureForProjectAsync(string projectIdOrKey, string featureKey, ProjectFeatureState body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project property keys
        /// </summary>
        /// <remarks>
        /// Returns all [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) keys for the project.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PropertyKeys> GetProjectPropertyKeysAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project property
        /// </summary>
        /// <remarks>
        /// Returns the value of a [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="propertyKey">The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityProperty> GetProjectPropertyAsync(string projectIdOrKey, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set project property
        /// </summary>
        /// <remarks>
        /// Sets the value of the [project property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties). You can use project properties to store custom data against the project.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the property is created.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="propertyKey">The key of the project property. The maximum length is 255 characters.</param>
        /// <returns>Returned if the project property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetProjectPropertyAsync(string projectIdOrKey, string propertyKey, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete project property
        /// </summary>
        /// <remarks>
        /// Deletes the [property](https://developer.atlassian.com/cloud/jira/platform/storing-data-without-a-database/#a-id-jira-entity-properties-a-jira-entity-properties) from a project.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the property.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="propertyKey">The project property key. Use [Get project property keys](#api-rest-api-3-project-projectIdOrKey-properties-get) to get a list of all project property keys.</param>
        /// <returns>Returned if the project property is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectPropertyAsync(string projectIdOrKey, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Restore deleted or archived project
        /// </summary>
        /// <remarks>
        /// Restores a project that has been archived or placed in the Jira recycle bin.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)for Company managed projects.
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project for Team managed projects.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Project> RestoreAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project roles for project
        /// </summary>
        /// <remarks>
        /// Returns a list of [project roles](https://confluence.atlassian.com/x/3odKLg) for the project returning the name and self URL for each role.
        /// <br/>
        /// <br/>Note that all project roles are shared with all projects in Jira Cloud. See [Get all project roles](#api-rest-api-3-role-get) for more information.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for any project on the site or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Uri>> GetProjectRolesAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project role for project
        /// </summary>
        /// <remarks>
        /// Returns a project role's details and actors associated with the project. The list of actors is sorted by display name.
        /// <br/>
        /// <br/>To check whether a user belongs to a role based on their group memberships, use [Get user](#api-rest-api-3-user-get) with the `groups` expand parameter selected. Then check whether the user keys and groups match with the actors returned for the project.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <param name="excludeInactiveUsers">Exclude inactive users.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> GetProjectRoleAsync(string projectIdOrKey, long id, bool? excludeInactiveUsers = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set actors for project role
        /// </summary>
        /// <remarks>
        /// Sets the actors for a project role for a project, replacing all existing actors.
        /// <br/>
        /// <br/>To add actors to the project without overwriting the existing list, use [Add actors to project role](#api-rest-api-3-project-projectIdOrKey-role-id-post).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <param name="body">The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.</param>
        /// <returns>Returned if the request is successful. The complete list of actors for the project is returned.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> SetActorsAsync(string projectIdOrKey, long id, ProjectRoleActorsUpdateBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add actors to project role
        /// </summary>
        /// <remarks>
        /// Adds actors to a project role for the project.
        /// <br/>
        /// <br/>To replace all actors for the project, use [Set actors for project role](#api-rest-api-3-project-projectIdOrKey-role-id-put).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <param name="body">The groups or users to associate with the project role for this project. Provide the user account ID, group name, or group ID. As a group's name can change, use of group ID is recommended.</param>
        /// <returns>Returned if the request is successful. The complete list of actors for the project is returned.
        /// <br/>
        /// <br/>For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a `user` actor for this project.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> AddActorUsersAsync(string projectIdOrKey, long id, ActorsMap body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete actors from project role
        /// </summary>
        /// <remarks>
        /// Deletes actors from a project role for the project.
        /// <br/>
        /// <br/>To remove default actors from the project role, use [Delete default actors from project role](#api-rest-api-3-role-id-actors-delete).
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <param name="user">The user account ID of the user to remove from the project role.</param>
        /// <param name="group">The name of the group to remove from the project role. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.</param>
        /// <param name="groupId">The ID of the group to remove from the project role. This parameter cannot be used with the `group` parameter.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteActorAsync(string projectIdOrKey, long id, string user = null, string group = null, string groupId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project role details
        /// </summary>
        /// <remarks>
        /// Returns all [project roles](https://confluence.atlassian.com/x/3odKLg) and the details for each role. Note that the list of project roles is common to all projects.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="currentMember">Whether the roles should be filtered to include only those the user is assigned to.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectRoleDetails>> GetProjectRoleDetailsAsync(string projectIdOrKey, bool? currentMember = null, bool? excludeConnectAddons = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all statuses for project
        /// </summary>
        /// <remarks>
        /// Returns the valid statuses for a project. The statuses are grouped by issue type, as each project has a set of valid issue types and each issue type has a set of valid statuses.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IssueTypeWithStatus>> GetAllStatusesAsync(string projectIdOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project versions paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `description` Sorts by version description.
        /// <br/> *  `name` Sorts by version name.
        /// <br/> *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.
        /// <br/> *  `sequence` Sorts by the order of appearance in the user interface.
        /// <br/> *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.</param>
        /// <param name="query">Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive).</param>
        /// <param name="status">A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `issuesstatus` Returns the number of issues in each status category for each version.
        /// <br/> *  `operations` Returns actions that can be performed on the specified version.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanVersion> GetProjectVersionsPaginatedAsync(string projectIdOrKey, long? startAt = null, int? maxResults = null, OrderBy9? orderBy = null, string query = null, string status = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project versions
        /// </summary>
        /// <remarks>
        /// Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Version>> GetProjectVersionsAsync(string projectIdOrKey, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project's sender email
        /// </summary>
        /// <remarks>
        /// Returns the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectId">The project ID.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectEmailAddress> GetProjectEmailAsync(long projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set project's sender email
        /// </summary>
        /// <remarks>
        /// Sets the [project's sender email address](https://confluence.atlassian.com/x/dolKLg).
        /// <br/>
        /// <br/>If `emailAddress` is an empty string, the default email address is restored.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectId">The project ID.</param>
        /// <param name="body">The project's sender email address to be set.</param>
        /// <returns>Returned if the project's sender email address is successfully set.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateProjectEmailAsync(long projectId, ProjectEmailAddress body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project issue type hierarchy
        /// </summary>
        /// <remarks>
        /// Get the issue type hierarchy for a next-gen project.
        /// <br/>
        /// <br/>The issue type hierarchy for a project consists of:
        /// <br/>
        /// <br/> *  *Epic* at level 1 (optional).
        /// <br/> *  One or more issue types at level 0 such as *Story*, *Task*, or *Bug*. Where the issue type *Epic* is defined, these issue types are used to break down the content of an epic.
        /// <br/> *  *Subtask* at level -1 (optional). This issue type enables level 0 issue types to be broken down into components. Issues based on a level -1 issue type must have a parent issue.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
        /// </remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<ProjectIssueTypeHierarchy> GetHierarchyAsync(long projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project issue security scheme
        /// </summary>
        /// <remarks>
        /// Returns the [issue security scheme](https://confluence.atlassian.com/x/J4lKLg) associated with the project.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or the *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
        /// </remarks>
        /// <param name="projectKeyOrId">The project ID or project key (case sensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityScheme> GetProjectIssueSecuritySchemeAsync(string projectKeyOrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project notification scheme
        /// </summary>
        /// <remarks>
        /// Gets a [notification scheme](https://confluence.atlassian.com/x/8YdKLg) associated with the project.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
        /// </remarks>
        /// <param name="projectKeyOrId">The project ID or project key (case sensitive).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information
        /// <br/> *  `field` Returns information about any custom fields assigned to receive an event
        /// <br/> *  `group` Returns information about any groups assigned to receive an event
        /// <br/> *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information
        /// <br/> *  `projectRole` Returns information about any project roles assigned to receive an event
        /// <br/> *  `user` Returns information about any users assigned to receive an event</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<NotificationScheme> GetNotificationSchemeForProjectAsync(string projectKeyOrId, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get assigned permission scheme
        /// </summary>
        /// <remarks>
        /// Gets the [permission scheme](https://confluence.atlassian.com/x/yodKLg) associated with the project.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).
        /// </remarks>
        /// <param name="projectKeyOrId">The project ID or project key (case sensitive).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `user` Returns information about the user who is granted the permission.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionScheme> GetAssignedPermissionSchemeAsync(string projectKeyOrId, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign permission scheme
        /// </summary>
        /// <remarks>
        /// Assigns a permission scheme with a project. See [Managing project permissions](https://confluence.atlassian.com/x/yodKLg) for more information about permission schemes.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg)
        /// </remarks>
        /// <param name="projectKeyOrId">The project ID or project key (case sensitive).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
        /// <br/>
        /// <br/> *  `all` Returns all expandable information.
        /// <br/> *  `field` Returns information about the custom field granted the permission.
        /// <br/> *  `group` Returns information about the group that is granted the permission.
        /// <br/> *  `permissions` Returns all permission grants for each permission scheme.
        /// <br/> *  `projectRole` Returns information about the project role granted the permission.
        /// <br/> *  `user` Returns information about the user who is granted the permission.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PermissionScheme> AssignPermissionSchemeAsync(string projectKeyOrId, IdBean body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project issue security levels
        /// </summary>
        /// <remarks>
        /// Returns all [issue security](https://confluence.atlassian.com/x/J4lKLg) levels for the project that the user has access to.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project, however, issue security levels are only returned for authenticated user with *Set Issue Security* [global permission](https://confluence.atlassian.com/x/x4dKLg) for the project.
        /// </remarks>
        /// <param name="projectKeyOrId">The project ID or project key (case sensitive).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectIssueSecurityLevels> GetSecurityLevelsForProjectAsync(string projectKeyOrId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all project categories
        /// </summary>
        /// <remarks>
        /// Returns all project categories.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectCategory>> GetAllProjectCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create project category
        /// </summary>
        /// <remarks>
        /// Creates a project category.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectCategory> CreateProjectCategoryAsync(ProjectCategory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project category by ID
        /// </summary>
        /// <remarks>
        /// Returns a project category.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="id">The ID of the project category.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectCategory> GetProjectCategoryByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update project category
        /// </summary>
        /// <remarks>
        /// Updates a project category.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UpdatedProjectCategory> UpdateProjectCategoryAsync(long id, ProjectCategory body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete project category
        /// </summary>
        /// <remarks>
        /// Deletes a project category.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">ID of the project category to delete.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveProjectCategoryAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validate project key
        /// </summary>
        /// <remarks>
        /// Validates a project key by confirming the key is a valid string and not in use.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="key">The project key.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ErrorCollection> ValidateProjectKeyAsync(string key = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get valid project key
        /// </summary>
        /// <remarks>
        /// Validates a project key and, if the key is invalid or in use, generates a valid random string for the project key.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="key">The project key.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetValidProjectKeyAsync(string key = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get valid project name
        /// </summary>
        /// <remarks>
        /// Checks that a project name isn't in use. If the name isn't in use, the passed string is returned. If the name is in use, this operation attempts to generate a valid project name based on the one supplied, usually by adding a sequence number. If a valid project name cannot be generated, a 404 response is returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="name">The project name.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> GetValidProjectNameAsync(string name, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get resolutions
        /// </summary>
        /// <remarks>
        /// Returns a list of all issue resolution values.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Resolution>> GetResolutionsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create resolution
        /// </summary>
        /// <remarks>
        /// Creates an issue resolution.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResolutionId> CreateResolutionAsync(CreateResolutionDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set default resolution
        /// </summary>
        /// <remarks>
        /// Sets default issue resolution.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetDefaultResolutionAsync(SetDefaultResolutionRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move resolutions
        /// </summary>
        /// <remarks>
        /// Changes the order of issue resolutions.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> MoveResolutionsAsync(ReorderIssueResolutionsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search resolutions
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of resolutions. The list can contain all resolutions or a subset determined by any combination of these criteria:
        /// <br/>
        /// <br/> *  a list of resolutions IDs.
        /// <br/> *  whether the field configuration is a default. This returns resolutions from company-managed (classic) projects only, as there is no concept of default resolutions in team-managed projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of resolutions IDs to be filtered out</param>
        /// <param name="onlyDefault">When set to true, return default only, when IDs provided, if none of them is default, return empty page. Default value is false</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanResolutionJsonBean> SearchResolutionsAsync(string startAt = null, string maxResults = null, System.Collections.Generic.IEnumerable<string> id = null, bool? onlyDefault = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get resolution
        /// </summary>
        /// <remarks>
        /// Returns an issue resolution value.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="id">The ID of the issue resolution value.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Resolution> GetResolutionAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update resolution
        /// </summary>
        /// <remarks>
        /// Updates an issue resolution.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue resolution.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateResolutionAsync(string id, UpdateResolutionDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete resolution
        /// </summary>
        /// <remarks>
        /// Deletes an issue resolution.
        /// <br/>
        /// <br/>This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain subsequent updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the issue resolution.</param>
        /// <param name="replaceWith">The ID of the issue resolution that will replace the currently selected resolution.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteResolutionAsync(string id, string replaceWith, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all project roles
        /// </summary>
        /// <remarks>
        /// Gets a list of all project roles, complete with project role details and default actors.
        /// <br/>
        /// <br/>### About project roles ###
        /// <br/>
        /// <br/>[Project roles](https://confluence.atlassian.com/x/3odKLg) are a flexible way to to associate users and groups with projects. In Jira Cloud, the list of project roles is shared globally with all projects, but each project can have a different set of actors associated with it (unlike groups, which have the same membership throughout all Jira applications).
        /// <br/>
        /// <br/>Project roles are used in [permission schemes](#api-rest-api-3-permissionscheme-get), [email notification schemes](#api-rest-api-3-notificationscheme-get), [issue security levels](#api-rest-api-3-issuesecurityschemes-get), [comment visibility](#api-rest-api-3-comment-list-post), and workflow conditions.
        /// <br/>
        /// <br/>#### Members and actors ####
        /// <br/>
        /// <br/>In the Jira REST API, a member of a project role is called an *actor*. An *actor* is a group or user associated with a project role.
        /// <br/>
        /// <br/>Actors may be set as [default members](https://confluence.atlassian.com/x/3odKLg#Managingprojectroles-Specifying'defaultmembers'foraprojectrole) of the project role or set at the project level:
        /// <br/>
        /// <br/> *  Default actors: Users and groups that are assigned to the project role for all newly created projects. The default actors can be removed at the project level later if desired.
        /// <br/> *  Actors: Users and groups that are associated with a project role for a project, which may differ from the default actors. This enables you to assign a user to different roles in different projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProjectRole>> GetAllProjectRolesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create project role
        /// </summary>
        /// <remarks>
        /// Creates a new project role with no [default actors](#api-rest-api-3-resolution-get). You can use the [Add default actors to project role](#api-rest-api-3-role-id-actors-post) operation to add default actors to the project role after creating it.
        /// <br/>
        /// <br/>*Note that although a new project role is available to all projects upon creation, any default actors that are associated with the project role are not added to projects that existed prior to the role being created.*&lt;
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> CreateProjectRoleAsync(CreateUpdateRoleRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get project role by ID
        /// </summary>
        /// <remarks>
        /// Gets the project role details and the default actors associated with the role. The list of default actors is sorted by display name.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> GetProjectRoleByIdAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Fully update project role
        /// </summary>
        /// <remarks>
        /// Updates the project role's name and description. You must include both a name and a description in the request.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> FullyUpdateProjectRoleAsync(long id, CreateUpdateRoleRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Partial update project role
        /// </summary>
        /// <remarks>
        /// Updates either the project role's name or its description.
        /// <br/>
        /// <br/>You cannot update both the name and description at the same time using this operation. If you send a request with a name and a description only the name is updated.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> PartialUpdateProjectRoleAsync(long id, CreateUpdateRoleRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete project role
        /// </summary>
        /// <remarks>
        /// Deletes a project role. You must specify a replacement project role if you wish to delete a project role that is in use.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the project role to delete. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <param name="swap">The ID of the project role that will replace the one being deleted.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteProjectRoleAsync(long id, long? swap = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get default actors for project role
        /// </summary>
        /// <remarks>
        /// Returns the [default actors](#api-rest-api-3-resolution-get) for the project role.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> GetProjectRoleActorsForRoleAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add default actors to project role
        /// </summary>
        /// <remarks>
        /// Adds [default actors](#api-rest-api-3-resolution-get) to a role. You may add groups or users, but you cannot add groups and users in the same request.
        /// <br/>
        /// <br/>Changing a project role's default actors does not affect project role members for projects already created.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> AddProjectRoleActorsToRoleAsync(long id, ActorInputBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete default actors from project role
        /// </summary>
        /// <remarks>
        /// Deletes the [default actors](#api-rest-api-3-resolution-get) from a project role. You may delete a group or user, but you cannot delete a group and a user in the same request.
        /// <br/>
        /// <br/>Changing a project role's default actors does not affect project role members for projects already created.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.</param>
        /// <param name="user">The user account ID of the user to remove as a default actor.</param>
        /// <param name="groupId">The group ID of the group to be removed as a default actor. This parameter cannot be used with the `group` parameter.</param>
        /// <param name="group">The group name of the group to be removed as a default actor.This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProjectRole> DeleteProjectRoleActorsFromRoleAsync(long id, string user = null, string groupId = null, string group = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get screens
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&amp;id=10001`.</param>
        /// <param name="queryString">String used to perform a case-insensitive partial match with screen name.</param>
        /// <param name="scope">The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, `scope=GLOBAL&amp;scope=PROJECT`.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `id` Sorts by screen ID.
        /// <br/> *  `name` Sorts by screen name.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanScreen> GetScreensAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> id = null, string queryString = null, System.Collections.Generic.IEnumerable<Anonymous3> scope = null, OrderBy10? orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create screen
        /// </summary>
        /// <remarks>
        /// Creates a screen with a default field tab.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Screen> CreateScreenAsync(ScreenDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add field to default screen
        /// </summary>
        /// <remarks>
        /// Adds a field to the default tab of the default screen.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="fieldId">The ID of the field.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AddFieldToDefaultScreenAsync(string fieldId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update screen
        /// </summary>
        /// <remarks>
        /// Updates a screen. Only screens used in classic projects can be updated.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Screen> UpdateScreenAsync(long screenId, UpdateScreenDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete screen
        /// </summary>
        /// <remarks>
        /// Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.
        /// <br/>
        /// <br/>Only screens used in classic projects can be deleted.
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScreenAsync(long screenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available screen fields
        /// </summary>
        /// <remarks>
        /// Returns the fields that can be added to a tab on a screen.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScreenableField>> GetAvailableScreenFieldsAsync(long screenId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all screen tabs
        /// </summary>
        /// <remarks>
        /// Returns the list of tabs for a screen.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/> *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="projectKey">The key of the project.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScreenableTab>> GetAllScreenTabsAsync(long screenId, string projectKey = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create screen tab
        /// </summary>
        /// <remarks>
        /// Creates a tab for a screen.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScreenableTab> AddScreenTabAsync(long screenId, ScreenableTab body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update screen tab
        /// </summary>
        /// <remarks>
        /// Updates the name of a screen tab.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScreenableTab> RenameScreenTabAsync(long screenId, long tabId, ScreenableTab body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete screen tab
        /// </summary>
        /// <remarks>
        /// Deletes a screen tab.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScreenTabAsync(long screenId, long tabId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all screen tab fields
        /// </summary>
        /// <remarks>
        /// Returns all fields for a screen tab.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/> *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <param name="projectKey">The key of the project.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScreenableField>> GetAllScreenTabFieldsAsync(long screenId, long tabId, string projectKey = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add screen tab field
        /// </summary>
        /// <remarks>
        /// Adds a field to a screen tab.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScreenableField> AddScreenTabFieldAsync(long screenId, long tabId, AddFieldBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove screen tab field
        /// </summary>
        /// <remarks>
        /// Removes a field from a screen tab.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <param name="id">The ID of the field.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveScreenTabFieldAsync(long screenId, long tabId, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move screen tab field
        /// </summary>
        /// <remarks>
        /// Moves a screen tab field.
        /// <br/>
        /// <br/>If `after` and `position` are provided in the request, `position` is ignored.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <param name="id">The ID of the field.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> MoveScreenTabFieldAsync(long screenId, long tabId, string id, MoveFieldBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move screen tab
        /// </summary>
        /// <remarks>
        /// Moves a screen tab.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <param name="pos">The position of tab. The base index is 0.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> MoveScreenTabAsync(long screenId, long tabId, int pos, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get screen schemes
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of screen schemes.
        /// <br/>
        /// <br/>Only screen schemes used in classic projects are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&amp;id=10001`.</param>
        /// <param name="expand">Use [expand](#expansion) include additional information in the response. This parameter accepts `issueTypeScreenSchemes` that, for each screen schemes, returns information about the issue type screen scheme the screen scheme is assigned to.</param>
        /// <param name="queryString">String used to perform a case-insensitive partial match with screen scheme name.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `id` Sorts by screen scheme ID.
        /// <br/> *  `name` Sorts by screen scheme name.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanScreenScheme> GetScreenSchemesAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<long> id = null, string expand = null, string queryString = null, OrderBy11? orderBy = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create screen scheme
        /// </summary>
        /// <remarks>
        /// Creates a screen scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScreenSchemeId> CreateScreenSchemeAsync(ScreenSchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update screen scheme
        /// </summary>
        /// <remarks>
        /// Updates a screen scheme. Only screen schemes used in classic projects can be updated.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenSchemeId">The ID of the screen scheme.</param>
        /// <param name="body">The screen scheme update details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateScreenSchemeAsync(string screenSchemeId, UpdateScreenSchemeDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete screen scheme
        /// </summary>
        /// <remarks>
        /// Deletes a screen scheme. A screen scheme cannot be deleted if it is used in an issue type screen scheme.
        /// <br/>
        /// <br/>Only screens schemes used in classic projects can be deleted.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="screenSchemeId">The ID of the screen scheme.</param>
        /// <returns>Returned if the screen scheme is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteScreenSchemeAsync(string screenSchemeId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for issues using JQL (GET)
        /// </summary>
        /// <remarks>
        /// Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
        /// <br/>
        /// <br/>If the JQL query expression is too large to be encoded as a query parameter, use the [POST](#api-rest-api-3-search-post) version of this resource.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Issues are included in the response where the user has:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="jql">The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:
        /// <br/>
        /// <br/> *  If no JQL expression is provided, all issues are returned.
        /// <br/> *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.
        /// <br/> *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.</param>
        /// <param name="validateQuery">Determines how to validate the JQL query and treat the validation results. Supported values are:
        /// <br/>
        /// <br/> *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
        /// <br/> *  `warn` Returns all errors as warnings.
        /// <br/> *  `none` No validation is performed.
        /// <br/> *  `true` *Deprecated* A legacy synonym for `strict`.
        /// <br/> *  `false` *Deprecated* A legacy synonym for `warn`.
        /// <br/>
        /// <br/>Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.</param>
        /// <param name="fields">A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `*all` Returns all fields.
        /// <br/> *  `*navigable` Returns navigable fields.
        /// <br/> *  Any issue field, prefixed with a minus to exclude.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/> *  `summary,comment` Returns only the summary and comments fields.
        /// <br/> *  `-description` Returns all navigable (default) fields except description.
        /// <br/> *  `*all,-comment` Returns all fields except comments.
        /// <br/>
        /// <br/>This parameter may be specified multiple times. For example, `fields=field1,field2&amp;fields=field3`.
        /// <br/>
        /// <br/>Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `renderedFields` Returns field values rendered in HTML format.
        /// <br/> *  `names` Returns the display name of each field.
        /// <br/> *  `schema` Returns the schema describing a field type.
        /// <br/> *  `transitions` Returns all possible transitions for the issue.
        /// <br/> *  `operations` Returns all possible operations for the issue.
        /// <br/> *  `editmeta` Returns information about how each field can be edited.
        /// <br/> *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
        /// <br/> *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.</param>
        /// <param name="properties">A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&amp;properties=prop3`. A maximum of 5 issue property keys can be specified.</param>
        /// <param name="fieldsByKeys">Reference fields by their key (rather than ID).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResults> SearchForIssuesUsingJqlAsync(string jql = null, int? startAt = null, int? maxResults = null, ValidateQuery? validateQuery = null, System.Collections.Generic.IEnumerable<string> fields = null, string expand = null, System.Collections.Generic.IEnumerable<string> properties = null, bool? fieldsByKeys = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search for issues using JQL (POST)
        /// </summary>
        /// <remarks>
        /// Searches for issues using [JQL](https://confluence.atlassian.com/x/egORLQ).
        /// <br/>
        /// <br/>There is a [GET](#api-rest-api-3-search-get) version of this resource that can be used for smaller JQL query expressions.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Issues are included in the response where the user has:
        /// <br/>
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the issue.
        /// <br/> *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.
        /// </remarks>
        /// <param name="body">A JSON object containing the search request.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SearchResults> SearchForIssuesUsingJqlPostAsync(SearchRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue security level
        /// </summary>
        /// <remarks>
        /// Returns details of an issue security level.
        /// <br/>
        /// <br/>Use [Get issue security scheme](#api-rest-api-3-issuesecurityschemes-id-get) to obtain the IDs of issue security levels associated with the issue security scheme.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="id">The ID of the issue security level.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<SecurityLevel> GetIssueSecurityLevelAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Jira instance info
        /// </summary>
        /// <remarks>
        /// Returns information about the Jira instance.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ServerInformation> GetServerInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue navigator default columns
        /// </summary>
        /// <remarks>
        /// Returns the default issue navigator columns.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ColumnItem>> GetIssueNavigatorDefaultColumnsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set issue navigator default columns
        /// </summary>
        /// <remarks>
        /// Sets the default issue navigator columns.
        /// <br/>
        /// <br/>The `columns` parameter accepts a navigable field value and is expressed as HTML form data. To specify multiple columns, pass multiple `columns` parameters. For example, in curl:
        /// <br/>
        /// <br/>`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/settings/columns`
        /// <br/>
        /// <br/>If no column details are sent, then all default columns are removed.
        /// <br/>
        /// <br/>A navigable field is one that can be used as a column on the issue navigator. Find details of navigable issue columns using [Get fields](#api-rest-api-3-field-get).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="body">A navigable field value.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetIssueNavigatorDefaultColumnsAsync(System.Collections.Generic.IEnumerable<string> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all statuses
        /// </summary>
        /// <remarks>
        /// Returns a list of all statuses associated with active workflows.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StatusDetails>> GetStatusesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status
        /// </summary>
        /// <remarks>
        /// Returns a status. The status must be associated with an active workflow to be returned.
        /// <br/>
        /// <br/>If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>[Permissions](#permissions) required: None.
        /// </remarks>
        /// <param name="idOrName">The ID or name of the status.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusDetails> GetStatusAsync(string idOrName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all status categories
        /// </summary>
        /// <remarks>
        /// Returns a list of all status categories.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<StatusCategory>> GetStatusCategoriesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status category
        /// </summary>
        /// <remarks>
        /// Returns a status category. Status categories provided a mechanism for categorizing [statuses](#api-rest-api-3-status-idOrName-get).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="idOrKey">The ID or key of the status category.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<StatusCategory> GetStatusCategoryAsync(string idOrKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk get statuses
        /// </summary>
        /// <remarks>
        /// Returns a list of the statuses specified by one or more status IDs.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// <br/> *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `usages` Returns the project and issue types that use the status in their workflow.
        /// <br/> *  `workflowUsages` Returns the workflows that use the status.</param>
        /// <param name="id">The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&amp;id=10001.
        /// <br/>
        /// <br/>Min items `1`, Max items `50`</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JiraStatus>> GetStatusesByIdAsync(string expand = null, System.Collections.Generic.IEnumerable<string> id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk update statuses
        /// </summary>
        /// <remarks>
        /// Updates statuses by ID.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// <br/> *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// </remarks>
        /// <param name="body">The list of statuses that will be updated.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateStatusesAsync(StatusUpdateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk create statuses
        /// </summary>
        /// <remarks>
        /// Creates statuses for a global or project scope.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// <br/> *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// </remarks>
        /// <param name="body">Details of the statuses being created and their scope.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<JiraStatus>> CreateStatusesAsync(StatusCreateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk delete Statuses
        /// </summary>
        /// <remarks>
        /// Deletes statuses by ID.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// <br/> *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// </remarks>
        /// <param name="id">The list of status IDs. To include multiple IDs, provide an ampersand-separated list. For example, id=10000&amp;id=10001.
        /// <br/>
        /// <br/>Min items `1`, Max items `50`</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteStatusesByIdAsync(System.Collections.Generic.IEnumerable<string> id = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Search statuses paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#pagination) list of statuses that match a search on name or project.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer projects* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// <br/> *  *Administer Jira* [project permission.](https://confluence.atlassian.com/x/yodKLg)
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `usages` Returns the project and issue types that use the status in their workflow.
        /// <br/> *  `workflowUsages` Returns the workflows that use the status.</param>
        /// <param name="projectId">The project the status is part of or null for global statuses.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="searchString">Term to match status names against or null to search for all statuses in the search scope.</param>
        /// <param name="statusCategory">Category of the status to filter by. The supported values are: `TODO`, `IN_PROGRESS`, and `DONE`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageOfStatuses> SearchAsync(string expand = null, string projectId = null, long? startAt = null, int? maxResults = null, string searchString = null, string statusCategory = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get task
        /// </summary>
        /// <remarks>
        /// Returns the status of a [long-running asynchronous task](#async).
        /// <br/>
        /// <br/>When a task has finished, this operation returns the JSON blob applicable to the task. See the documentation of the operation that created the task for details. Task details are not permanently retained. As of September 2019, details are retained for 14 days although this period may change without notice.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** either of:
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/> *  Creator of the task.
        /// </remarks>
        /// <param name="taskId">The ID of the task.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<TaskProgressBeanObject> GetTaskAsync(string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Cancel task
        /// </summary>
        /// <remarks>
        /// Cancels a task.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** either of:
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/> *  Creator of the task.
        /// </remarks>
        /// <param name="taskId">The ID of the task.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CancelTaskAsync(string taskId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get UI modifications
        /// </summary>
        /// <remarks>
        /// Gets UI modifications. UI modifications can only be retrieved by Forge apps.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `data` Returns UI modification data.
        /// <br/> *  `contexts` Returns UI modification contexts.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanUiModificationDetails> GetUiModificationsAsync(long? startAt = null, int? maxResults = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create UI modification
        /// </summary>
        /// <remarks>
        /// Creates a UI modification. UI modification can only be created by Forge apps.
        /// <br/>
        /// <br/>Each app can define up to 3000 UI modifications. Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *None* if the UI modification is created without contexts.
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
        /// </remarks>
        /// <param name="body">Details of the UI modification.</param>
        /// <returns>Returned if the UI modification is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UiModificationIdentifiers> CreateUiModificationAsync(CreateUiModificationDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update UI modification
        /// </summary>
        /// <remarks>
        /// Updates a UI modification. UI modification can only be updated by Forge apps.
        /// <br/>
        /// <br/>Each UI modification can define up to 1000 contexts. The same context can be assigned to maximum 100 UI modifications.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *None* if the UI modification is created without contexts.
        /// <br/> *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, if the UI modification is created with contexts.
        /// </remarks>
        /// <param name="uiModificationId">The ID of the UI modification.</param>
        /// <param name="body">Details of the UI modification.</param>
        /// <returns>Returned if the UI modification is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateUiModificationAsync(string uiModificationId, UpdateUiModificationDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete UI modification
        /// </summary>
        /// <remarks>
        /// Deletes a UI modification. All the contexts that belong to the UI modification are deleted too. UI modification can only be deleted by Forge apps.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="uiModificationId">The ID of the UI modification.</param>
        /// <returns>Returned if the UI modification is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteUiModificationAsync(string uiModificationId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get avatars
        /// </summary>
        /// <remarks>
        /// Returns the system and custom avatars for a project or issue type.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
        /// <br/> *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
        /// <br/> *  for system avatars, none.
        /// </remarks>
        /// <param name="type">The avatar type.</param>
        /// <param name="entityId">The ID of the item the avatar is associated with.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Avatars> GetAvatarsAsync(Type2 type, string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Load avatar
        /// </summary>
        /// <remarks>
        /// Loads a custom avatar for a project or issue type.
        /// <br/>
        /// <br/>Specify the avatar's local file location in the body of the request. Also, include the following headers:
        /// <br/>
        /// <br/> *  `X-Atlassian-Token: no-check` To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).
        /// <br/> *  `Content-Type: image/image type` Valid image types are JPEG, GIF, or PNG.
        /// <br/>
        /// <br/>For example:  
        /// <br/>`curl --request POST `
        /// <br/>
        /// <br/>`--user email@example.com:&lt;api_token&gt; `
        /// <br/>
        /// <br/>`--header 'X-Atlassian-Token: no-check' `
        /// <br/>
        /// <br/>`--header 'Content-Type: image/&lt; image_type&gt;' `
        /// <br/>
        /// <br/>`--data-binary "&lt;@/path/to/file/with/your/avatar&gt;" `
        /// <br/>
        /// <br/>`--url 'https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}'`
        /// <br/>
        /// <br/>The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square's sides is set to the smaller of the height or width of the image.
        /// <br/>
        /// <br/>The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.
        /// <br/>
        /// <br/>After creating the avatar use:
        /// <br/>
        /// <br/> *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type's displayed avatar.
        /// <br/> *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project's displayed avatar.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="type">The avatar type.</param>
        /// <param name="entityId">The ID of the item the avatar is associated with.</param>
        /// <param name="size">The length of each side of the crop region.</param>
        /// <param name="x">The X coordinate of the top-left corner of the crop region.</param>
        /// <param name="y">The Y coordinate of the top-left corner of the crop region.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Avatar> StoreAvatarAsync(Type3 type, string entityId, int size, object body, int? x = null, int? y = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete avatar
        /// </summary>
        /// <remarks>
        /// Deletes an avatar from a project or issue type.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="type">The avatar type.</param>
        /// <param name="owningObjectId">The ID of the item the avatar is associated with.</param>
        /// <param name="id">The ID of the avatar.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteAvatarAsync(Type4 type, string owningObjectId, long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get avatar image by type
        /// </summary>
        /// <remarks>
        /// Returns the default project or issue type avatar image.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="type">The icon type of the avatar.</param>
        /// <param name="size">The size of the avatar image. If not provided the default size is returned.</param>
        /// <param name="format">The format to return the avatar image in. If not provided the original content format is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetAvatarImageByTypeAsync(Type5 type, Size? size = null, Format? format = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get avatar image by ID
        /// </summary>
        /// <remarks>
        /// Returns a project or issue type avatar image by ID.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  For system avatars, none.
        /// <br/> *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
        /// <br/> *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
        /// </remarks>
        /// <param name="type">The icon type of the avatar.</param>
        /// <param name="id">The ID of the avatar.</param>
        /// <param name="size">The size of the avatar image. If not provided the default size is returned.</param>
        /// <param name="format">The format to return the avatar image in. If not provided the original content format is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetAvatarImageByIDAsync(Type6 type, long id, Size2? size = null, Format2? format = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get avatar image by owner
        /// </summary>
        /// <remarks>
        /// Returns the avatar image for a project or issue type.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  For system avatars, none.
        /// <br/> *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.
        /// <br/> *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.
        /// </remarks>
        /// <param name="type">The icon type of the avatar.</param>
        /// <param name="entityId">The ID of the project or issue type the avatar belongs to.</param>
        /// <param name="size">The size of the avatar image. If not provided the default size is returned.</param>
        /// <param name="format">The format to return the avatar image in. If not provided the original content format is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GetAvatarImageByOwnerAsync(Type7 type, string entityId, Size3? size = null, Format3? format = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user
        /// </summary>
        /// <remarks>
        /// Returns a user.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the user's preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.</param>
        /// <param name="key">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `groups` includes all groups and nested groups to which the user belongs.
        /// <br/> *  `applicationRoles` includes details of all the applications to which the user has access.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> GetUserAsync(string accountId = null, string username = null, string key = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create user
        /// </summary>
        /// <remarks>
        /// Creates a user. This resource is retained for legacy compatibility. As soon as a more suitable alternative is available this resource will be deprecated.
        /// <br/>
        /// <br/>If the user exists and has access to Jira, the operation returns a 201 status. If the user exists but does not have access to Jira, the operation returns a 400 status.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="body">Details about the user to be created.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<User> CreateUserAsync(NewUserDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete user
        /// </summary>
        /// <remarks>
        /// Deletes a user. If the operation completes successfully then the user is removed from Jira's user base. This operation does not delete the user's Atlassian account.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Site administration (that is, membership of the *site-admin* [group](https://confluence.atlassian.com/x/24xjL)).
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="key">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RemoveUserAsync(string accountId, string username = null, string key = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find users assignable to projects
        /// </summary>
        /// <remarks>
        /// Returns a list of users who can be assigned issues in one or more projects. The list may be restricted to users whose attributes match a string.
        /// <br/>
        /// <br/>This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned issues in the projects. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned issues in the projects, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** None.
        /// </remarks>
        /// <param name="projectKeys">A list of project keys (case sensitive). This parameter accepts a comma-separated list.</param>
        /// <param name="query">A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="accountId">A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FindBulkAssignableUsersAsync(string projectKeys, string query = null, string username = null, string accountId = null, int? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find users assignable to issues
        /// </summary>
        /// <remarks>
        /// Returns a list of users that can be assigned to an issue. Use this operation to find the list of users who can be assigned to:
        /// <br/>
        /// <br/> *  a new issue, by providing the `projectKeyOrId`.
        /// <br/> *  an updated issue, by providing the `issueKey`.
        /// <br/> *  to an issue during a transition (workflow action), by providing the `issueKey` and the transition id in `actionDescriptorId`. You can obtain the IDs of an issue's valid transitions using the `transitions` option in the `expand` parameter of [ Get issue](#api-rest-api-3-issue-issueIdOrKey-get).
        /// <br/>
        /// <br/>In all these cases, you can pass an account ID to determine if a user can be assigned to an issue. The user is returned in the response if they can be assigned to the issue or issue transition.
        /// <br/>
        /// <br/>This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that can be assigned the issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who can be assigned the issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="query">A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified.</param>
        /// <param name="sessionId">The sessionId of this request. SessionId is the same until the assignee is set.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="accountId">A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.</param>
        /// <param name="project">The project ID or project key (case sensitive). Required, unless `issueKey` is specified.</param>
        /// <param name="issueKey">The key of the issue. Required, unless `project` is specified.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue.</param>
        /// <param name="actionDescriptorId">The ID of the transition.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FindAssignableUsersAsync(string query = null, string sessionId = null, string username = null, string accountId = null, string project = null, string issueKey = null, int? startAt = null, int? maxResults = null, int? actionDescriptorId = null, bool? recommend = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk get users
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of the users specified by one or more account IDs.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="accountId">The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&amp;accountId=5b10ac8d82e05b22cc7d4ef5`.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="username">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="key">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanUser> BulkGetUsersAsync(System.Collections.Generic.IEnumerable<string> accountId, long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<string> username = null, System.Collections.Generic.IEnumerable<string> key = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get account IDs for users
        /// </summary>
        /// <remarks>
        /// Returns the account IDs for the users specified in the `key` or `username` parameters. Note that multiple `key` or `username` parameters can be specified.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="username">Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&amp;username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present.</param>
        /// <param name="key">Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&amp;key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserMigrationBean>> BulkGetUsersMigrationAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<string> username = null, System.Collections.Generic.IEnumerable<string> key = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user default columns
        /// </summary>
        /// <remarks>
        /// Returns the default [issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If `accountId` is not passed in the request, the calling user's details are returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLgl), to get the column details for any user.
        /// <br/> *  Permission to access Jira, to get the calling user's column details.
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="username">This parameter is no longer available See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ColumnItem>> GetUserDefaultColumnsAsync(string accountId = null, string username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set user default columns
        /// </summary>
        /// <remarks>
        /// Sets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user. If an account ID is not passed, the calling user's default columns are set. If no column details are sent, then all default columns are removed.
        /// <br/>
        /// <br/>The parameters for this resource are expressed as HTML form data. For example, in curl:
        /// <br/>
        /// <br/>`curl -X PUT -d columns=summary -d columns=description https://your-domain.atlassian.net/rest/api/3/user/columns?accountId=5b10ac8d82e05b22cc7d4ef5'`
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
        /// <br/> *  Permission to access Jira, to set the calling user's columns.
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="body">The ID of a column to set. To set multiple columns, send multiple `columns` parameters.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetUserColumnsAsync(string accountId = null, System.Collections.Generic.IEnumerable<string> body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset user default columns
        /// </summary>
        /// <remarks>
        /// Resets the default [ issue table columns](https://confluence.atlassian.com/x/XYdKLg) for the user to the system default. If `accountId` is not passed, the calling user's default columns are reset.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set the columns on any user.
        /// <br/> *  Permission to access Jira, to set the calling user's columns.
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetUserColumnsAsync(string accountId = null, string username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user email
        /// </summary>
        /// <remarks>
        /// Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnrestrictedUserEmail> GetUserEmailAsync(string accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user email bulk
        /// </summary>
        /// <remarks>
        /// Returns a user's email address. This API is only available to apps approved by Atlassian, according to these [guidelines](https://community.developer.atlassian.com/t/guidelines-for-requesting-access-to-email-address/27603).
        /// </remarks>
        /// <param name="accountId">The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value).</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UnrestrictedUserEmail> GetUserEmailBulkAsync(System.Collections.Generic.IEnumerable<string> accountId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user groups
        /// </summary>
        /// <remarks>
        /// Returns the groups to which a user belongs.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="key">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupName>> GetUserGroupsAsync(string accountId, string username = null, string key = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find users with permissions
        /// </summary>
        /// <remarks>
        /// Returns a list of users who fulfill these criteria:
        /// <br/>
        /// <br/> *  their user attributes match a search string.
        /// <br/> *  they have a set of permissions for a project or issue.
        /// <br/>
        /// <br/>If no search string is provided, a list of all users with the permissions is returned.
        /// <br/>
        /// <br/>This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission for the project or issue. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission for the project or issue, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get users for any project.
        /// <br/> *  *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for a project, to get users for that project.
        /// </remarks>
        /// <param name="permissions">A comma separated list of permissions. Permissions can be specified as any:
        /// <br/>
        /// <br/> *  permission returned by [Get all permissions](#api-rest-api-3-permissions-get).
        /// <br/> *  custom project permission added by Connect apps.
        /// <br/> *  (deprecated) one of the following:
        /// <br/>    
        /// <br/>     *  ASSIGNABLE\_USER
        /// <br/>     *  ASSIGN\_ISSUE
        /// <br/>     *  ATTACHMENT\_DELETE\_ALL
        /// <br/>     *  ATTACHMENT\_DELETE\_OWN
        /// <br/>     *  BROWSE
        /// <br/>     *  CLOSE\_ISSUE
        /// <br/>     *  COMMENT\_DELETE\_ALL
        /// <br/>     *  COMMENT\_DELETE\_OWN
        /// <br/>     *  COMMENT\_EDIT\_ALL
        /// <br/>     *  COMMENT\_EDIT\_OWN
        /// <br/>     *  COMMENT\_ISSUE
        /// <br/>     *  CREATE\_ATTACHMENT
        /// <br/>     *  CREATE\_ISSUE
        /// <br/>     *  DELETE\_ISSUE
        /// <br/>     *  EDIT\_ISSUE
        /// <br/>     *  LINK\_ISSUE
        /// <br/>     *  MANAGE\_WATCHER\_LIST
        /// <br/>     *  MODIFY\_REPORTER
        /// <br/>     *  MOVE\_ISSUE
        /// <br/>     *  PROJECT\_ADMIN
        /// <br/>     *  RESOLVE\_ISSUE
        /// <br/>     *  SCHEDULE\_ISSUE
        /// <br/>     *  SET\_ISSUE\_SECURITY
        /// <br/>     *  TRANSITION\_ISSUE
        /// <br/>     *  VIEW\_VERSION\_CONTROL
        /// <br/>     *  VIEW\_VOTERS\_AND\_WATCHERS
        /// <br/>     *  VIEW\_WORKFLOW\_READONLY
        /// <br/>     *  WORKLOG\_DELETE\_ALL
        /// <br/>     *  WORKLOG\_DELETE\_OWN
        /// <br/>     *  WORKLOG\_EDIT\_ALL
        /// <br/>     *  WORKLOG\_EDIT\_OWN
        /// <br/>     *  WORK\_ISSUE</param>
        /// <param name="query">A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="accountId">A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.</param>
        /// <param name="issueKey">The issue key for the issue.</param>
        /// <param name="projectKey">The project key for the project (case sensitive).</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FindUsersWithAllPermissionsAsync(string permissions, string query = null, string username = null, string accountId = null, string issueKey = null, string projectKey = null, int? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find users for picker
        /// </summary>
        /// <remarks>
        /// Returns a list of users whose attributes match the query term. The returned object includes the `html` field where the matched query term is highlighted with the HTML strong tag. A list of account IDs can be provided to exclude users from the results.
        /// <br/>
        /// <br/>This operation takes the users in the range defined by `maxResults`, up to the thousandth user, and then returns only the users from that range that match the query term. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the query term, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return search results for an exact name match only.
        /// </remarks>
        /// <param name="query">A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.</param>
        /// <param name="maxResults">The maximum number of items to return. The total number of matched users is returned in `total`.</param>
        /// <param name="showAvatar">Include the URI to the user's avatar.</param>
        /// <param name="exclude">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="excludeAccountIds">A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&amp;excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FoundUsers> FindUsersForPickerAsync(string query, int? maxResults = null, bool? showAvatar = null, System.Collections.Generic.IEnumerable<string> exclude = null, System.Collections.Generic.IEnumerable<string> excludeAccountIds = null, string avatarSize = null, bool? excludeConnectUsers = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user property keys
        /// </summary>
        /// <remarks>
        /// Returns the keys of all properties for a user.
        /// <br/>
        /// <br/>Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to access the property keys on any user.
        /// <br/> *  Access to Jira, to access the calling user's property keys.
        /// </remarks>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="userKey">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="username">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PropertyKeys> GetUserPropertyKeysAsync(string accountId = null, string userKey = null, string username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user property
        /// </summary>
        /// <remarks>
        /// Returns the value of a user's property. If no property key is provided [Get user property keys](#api-rest-api-3-user-properties-get) is called.
        /// <br/>
        /// <br/>Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to get a property from any user.
        /// <br/> *  Access to Jira, to get a property from the calling user's record.
        /// </remarks>
        /// <param name="propertyKey">The key of the user's property.</param>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="userKey">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="username">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityProperty> GetUserPropertyAsync(string propertyKey, string accountId = null, string userKey = null, string username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set user property
        /// </summary>
        /// <remarks>
        /// Sets the value of a user's property. Use this resource to store custom data against a user.
        /// <br/>
        /// <br/>Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to set a property on any user.
        /// <br/> *  Access to Jira, to set a property on the calling user's record.
        /// </remarks>
        /// <param name="propertyKey">The key of the user's property. The maximum length is 255 characters.</param>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="userKey">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="username">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the user property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> SetUserPropertyAsync(string propertyKey, object body, string accountId = null, string userKey = null, string username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete user property
        /// </summary>
        /// <remarks>
        /// Deletes a property from a user.
        /// <br/>
        /// <br/>Note: This operation does not access the [user properties](https://confluence.atlassian.com/x/8YxjL) created and maintained in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), to delete a property from any user.
        /// <br/> *  Access to Jira, to delete a property from the calling user's record.
        /// </remarks>
        /// <param name="propertyKey">The key of the user's property.</param>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.</param>
        /// <param name="userKey">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="username">This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <returns>Returned if the user property is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteUserPropertyAsync(string propertyKey, string accountId = null, string userKey = null, string username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find users
        /// </summary>
        /// <remarks>
        /// Returns a list of active users that match the search string and property.
        /// <br/>
        /// <br/>This operation first applies a filter to match the search string and property, and then takes the filtered users in the range defined by `startAt` and `maxResults`, up to the thousandth user. To get all the users who match the search string and property, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls or calls by users without the required permission return empty search results.
        /// </remarks>
        /// <param name="query">A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified.</param>
        /// <param name="accountId">A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified.</param>
        /// <param name="startAt">The index of the first item to return in a page of filtered results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="property">A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FindUsersAsync(string query = null, string username = null, string accountId = null, int? startAt = null, int? maxResults = null, string property = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find users by query
        /// </summary>
        /// <remarks>
        /// Finds users with a structured query and returns a [paginated](#pagination) list of user details.
        /// <br/>
        /// <br/>This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/>
        /// <br/>The query statements are:
        /// <br/>
        /// <br/> *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
        /// <br/> *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
        /// <br/>
        /// <br/>The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
        /// <br/>
        /// <br/>`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
        /// </remarks>
        /// <param name="query">The search query.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanUser> FindUsersByQueryAsync(string query, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find user keys by query
        /// </summary>
        /// <remarks>
        /// Finds users with a structured query and returns a [paginated](#pagination) list of user keys.
        /// <br/>
        /// <br/>This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the structured query. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the structured query, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// <br/>
        /// <br/>The query statements are:
        /// <br/>
        /// <br/> *  `is assignee of PROJ` Returns the users that are assignees of at least one issue in project *PROJ*.
        /// <br/> *  `is assignee of (PROJ-1, PROJ-2)` Returns users that are assignees on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is reporter of (PROJ-1, PROJ-2)` Returns users that are reporters on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is watcher of (PROJ-1, PROJ-2)` Returns users that are watchers on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is voter of (PROJ-1, PROJ-2)` Returns users that are voters on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is commenter of (PROJ-1, PROJ-2)` Returns users that have posted a comment on the issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `is transitioner of (PROJ-1, PROJ-2)` Returns users that have performed a transition on issues *PROJ-1* or *PROJ-2*.
        /// <br/> *  `[propertyKey].entity.property.path is "property value"` Returns users with the entity property value.
        /// <br/>
        /// <br/>The list of issues can be extended as needed, as in *(PROJ-1, PROJ-2, ... PROJ-n)*. Statements can be combined using the `AND` and `OR` operators to form more complex queries. For example:
        /// <br/>
        /// <br/>`is assignee of PROJ AND [propertyKey].entity.property.path is "property value"`
        /// </remarks>
        /// <param name="query">The search query.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanUserKey> FindUserKeysByQueryAsync(string query, long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Find users with browse permission
        /// </summary>
        /// <remarks>
        /// Returns a list of users who fulfill these criteria:
        /// <br/>
        /// <br/> *  their user attributes match a search string.
        /// <br/> *  they have permission to browse issues.
        /// <br/>
        /// <br/>Use this resource to find users who can browse:
        /// <br/>
        /// <br/> *  an issue, by providing the `issueKey`.
        /// <br/> *  any issue in a project, by providing the `projectKey`.
        /// <br/>
        /// <br/>This operation takes the users in the range defined by `startAt` and `maxResults`, up to the thousandth user, and then returns only the users from that range that match the search string and have permission to browse issues. This means the operation usually returns fewer users than specified in `maxResults`. To get all the users who match the search string and have permission to browse issues, use [Get all users](#api-rest-api-3-users-search-get) and filter the records in your code.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg). Anonymous calls and calls by users without the required permission return empty search results.
        /// </remarks>
        /// <param name="query">A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="accountId">A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.</param>
        /// <param name="issueKey">The issue key for the issue. Required, unless `projectKey` is specified.</param>
        /// <param name="projectKey">The project key for the project (case sensitive). Required, unless `issueKey` is specified.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> FindUsersWithBrowsePermissionAsync(string query = null, string username = null, string accountId = null, string issueKey = null, string projectKey = null, int? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all users default
        /// </summary>
        /// <remarks>
        /// Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return.</param>
        /// <param name="maxResults">The maximum number of items to return.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetAllUsersDefaultAsync(int? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all users
        /// </summary>
        /// <remarks>
        /// Returns a list of all users, including active users, inactive users and previously deleted users that have an Atlassian account.
        /// <br/>
        /// <br/>Privacy controls are applied to the response based on the users' preferences. This could mean, for example, that the user's email address is hidden. See the [Profile visibility overview](https://developer.atlassian.com/cloud/jira/platform/profile-visibility/) for more details.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return.</param>
        /// <param name="maxResults">The maximum number of items to return.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<User>> GetAllUsersAsync(int? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create version
        /// </summary>
        /// <remarks>
        /// Creates a project version.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Version> CreateVersionAsync(Version body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version
        /// </summary>
        /// <remarks>
        /// Returns a project version.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
        /// </remarks>
        /// <param name="id">The ID of the version.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `operations` Returns the list of operations available for this version.
        /// <br/> *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Version> GetVersionAsync(string id, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update version
        /// </summary>
        /// <remarks>
        /// Updates a project version.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
        /// </remarks>
        /// <param name="id">The ID of the version.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Version> UpdateVersionAsync(string id, Version body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete version
        /// </summary>
        /// <remarks>
        /// Deletes a project version.
        /// <br/>
        /// <br/>Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for `fixVersion` and `affectedVersion` provided in this resource.
        /// <br/>
        /// <br/>Alternative versions can be provided to update issues that use the deleted version in `fixVersion` or `affectedVersion`. If alternatives are not provided, occurrences of `fixVersion` and `affectedVersion` that contain the deleted version are cleared.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
        /// </remarks>
        /// <param name="id">The ID of the version.</param>
        /// <param name="moveFixIssuesTo">The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.</param>
        /// <param name="moveAffectedIssuesTo">The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.</param>
        /// <returns>Returned if the version is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task DeleteVersionAsync(string id, string moveFixIssuesTo = null, string moveAffectedIssuesTo = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Merge versions
        /// </summary>
        /// <remarks>
        /// Merges two project versions. The merge is completed by deleting the version specified in `id` and replacing any occurrences of its ID in `fixVersion` with the version ID specified in `moveIssuesTo`.
        /// <br/>
        /// <br/>Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in `fixVersion`, `affectedVersion`, and custom fields.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
        /// </remarks>
        /// <param name="id">The ID of the version to delete.</param>
        /// <param name="moveIssuesTo">The ID of the version to merge into.</param>
        /// <returns>Returned if the version is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> MergeVersionsAsync(string id, string moveIssuesTo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move version
        /// </summary>
        /// <remarks>
        /// Modifies the version's sequence within the project, which affects the display order of the versions in Jira.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
        /// </remarks>
        /// <param name="id">The ID of the version to be moved.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Version> MoveVersionAsync(string id, VersionMoveBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version's related issues count
        /// </summary>
        /// <remarks>
        /// Returns the following counts for a version:
        /// <br/>
        /// <br/> *  Number of issues where the `fixVersion` is set to the version.
        /// <br/> *  Number of issues where the `affectedVersion` is set to the version.
        /// <br/> *  Number of issues where a version custom field is set to the version.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
        /// </remarks>
        /// <param name="id">The ID of the version.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionIssueCounts> GetVersionRelatedIssuesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get related work
        /// </summary>
        /// <remarks>
        /// Returns related work items for the given version id.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.
        /// </remarks>
        /// <param name="id">The ID of the version.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<VersionRelatedWork>> GetRelatedWorkAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update related work
        /// </summary>
        /// <remarks>
        /// Updates the given related work. You can only update generic link related works via Rest APIs. Any archived version related works can't be edited.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
        /// </remarks>
        /// <param name="id">The ID of the version to update the related work on. For the related work id, pass it to the input JSON.</param>
        /// <returns>Returned if the request is successful together with updated related work.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionRelatedWork> UpdateRelatedWorkAsync(string id, VersionRelatedWork body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create related work
        /// </summary>
        /// <remarks>
        /// Creates a related work for the given version. You can only create a generic link type of related works via this API. relatedWorkId will be auto-generated UUID, that does not need to be provided.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionRelatedWork> CreateRelatedWorkAsync(string id, VersionRelatedWork body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete and replace version
        /// </summary>
        /// <remarks>
        /// Deletes a project version.
        /// <br/>
        /// <br/>Alternative versions can be provided to update issues that use the deleted version in `fixVersion`, `affectedVersion`, or any version picker custom fields. If alternatives are not provided, occurrences of `fixVersion`, `affectedVersion`, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.
        /// </remarks>
        /// <param name="id">The ID of the version.</param>
        /// <returns>Returned if the version is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteAndReplaceVersionAsync(string id, DeleteAndReplaceVersionBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get version's unresolved issues count
        /// </summary>
        /// <remarks>
        /// Returns counts of the issues and unresolved issues for the project version.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.
        /// </remarks>
        /// <param name="id">The ID of the version.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<VersionUnresolvedIssuesCount> GetVersionUnresolvedIssuesAsync(string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete related work
        /// </summary>
        /// <remarks>
        /// Deletes the given related work for the given version.
        /// <br/>
        /// <br/>This operation can be accessed anonymously.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Resolve issues:* and *Edit issues* [Managing project permissions](https://confluence.atlassian.com/adminjiraserver/managing-project-permissions-938847145.html) for the project that contains the version.
        /// </remarks>
        /// <param name="versionId">The ID of the version that the target related work belongs to.</param>
        /// <param name="relatedWorkId">The ID of the related work to delete.</param>
        /// <returns>Returned if the related work is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteRelatedWorkAsync(string versionId, string relatedWorkId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get dynamic webhooks for app
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of the webhooks registered by the calling app.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanWebhook> GetDynamicWebhooksForAppAsync(long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register dynamic webhooks
        /// </summary>
        /// <remarks>
        /// Registers webhooks.
        /// <br/>
        /// <br/>**NOTE:** for non-public OAuth apps, webhooks are delivered only if there is a match between the app owner and the user who registered a dynamic webhook.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContainerForRegisteredWebhooks> RegisterDynamicWebhooksAsync(WebhookRegistrationDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete webhooks by ID
        /// </summary>
        /// <remarks>
        /// Removes webhooks by ID. Only webhooks registered by the calling app are removed. If webhooks created by other apps are specified, they are ignored.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWebhookByIdAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get failed webhooks
        /// </summary>
        /// <remarks>
        /// Returns webhooks that have recently failed to be delivered to the requesting app after the maximum number of retries.
        /// <br/>
        /// <br/>After 72 hours the failure may no longer be returned by this operation.
        /// <br/>
        /// <br/>The oldest failure is returned first.
        /// <br/>
        /// <br/>This method uses a cursor-based pagination. To request the next page use the failure time of the last webhook on the list as the `failedAfter` value or use the URL provided in `next`.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only [Connect apps](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) can use this operation.
        /// </remarks>
        /// <param name="maxResults">The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.</param>
        /// <param name="after">The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FailedWebhooks> GetFailedWebhooksAsync(int? maxResults = null, long? after = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Extend webhook life
        /// </summary>
        /// <remarks>
        /// Extends the life of webhook. Webhooks registered through the REST API expire after 30 days. Call this operation to keep them alive.
        /// <br/>
        /// <br/>Unrecognized webhook IDs (those that are not found or belong to other apps) are ignored.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/#connect-apps) and [OAuth 2.0](https://developer.atlassian.com/cloud/jira/platform/oauth-2-3lo-apps) apps can use this operation.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WebhooksExpirationDate> RefreshWebhooksAsync(ContainerForWebhookIDs body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all workflows
        /// </summary>
        /// <remarks>
        /// Returns all workflows in Jira or a workflow. Deprecated, use [Get workflows paginated](#api-rest-api-3-workflow-search-get).
        /// <br/>
        /// <br/>If the `workflowName` parameter is specified, the workflow is returned as an object (not in an array). Otherwise, an array of workflow objects is returned.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="workflowName">The name of the workflow to be returned. Only one workflow can be specified.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<DeprecatedWorkflow>> GetAllWorkflowsAsync(string workflowName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create workflow
        /// </summary>
        /// <remarks>
        /// Creates a workflow. You can define transition rules using the shapes detailed in the following sections. If no transitional rules are specified the default system transition rules are used. Note: This only applies to company-managed scoped workflows. Use [bulk create workflows](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflows/#api-rest-api-3-workflows-create-post) to create both team and company-managed scoped workflows.
        /// <br/>
        /// <br/>#### Conditions ####
        /// <br/>
        /// <br/>Conditions enable workflow rules that govern whether a transition can execute.
        /// <br/>
        /// <br/>##### Always false condition #####
        /// <br/>
        /// <br/>A condition that always fails.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "AlwaysFalseCondition"
        /// <br/>     }
        /// <br/>
        /// <br/>##### Block transition until approval #####
        /// <br/>
        /// <br/>A condition that blocks issue transition if there is a pending approval.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "BlockInProgressApprovalCondition"
        /// <br/>     }
        /// <br/>
        /// <br/>##### Compare number custom field condition #####
        /// <br/>
        /// <br/>A condition that allows transition if a comparison between a number custom field and a value is true.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "CompareNumberCFCondition",
        /// <br/>       "configuration": {
        /// <br/>         "comparator": "=",
        /// <br/>         "fieldId": "customfield_10029",
        /// <br/>         "fieldValue": 2
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `comparator` One of the supported comparator: `=`, `&gt;`, and `&lt;`.
        /// <br/> *  `fieldId` The custom numeric field ID. Allowed field types:
        /// <br/>    
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
        /// <br/>     *  `com.pyxis.greenhopper.jira:jsw-story-points`
        /// <br/> *  `fieldValue` The value for comparison.
        /// <br/>
        /// <br/>##### Hide from user condition #####
        /// <br/>
        /// <br/>A condition that hides a transition from users. The transition can only be triggered from a workflow function or REST API operation.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "RemoteOnlyCondition"
        /// <br/>     }
        /// <br/>
        /// <br/>##### Only assignee condition #####
        /// <br/>
        /// <br/>A condition that allows only the assignee to execute a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "AllowOnlyAssignee"
        /// <br/>     }
        /// <br/>
        /// <br/>##### Only Bamboo notifications workflow condition #####
        /// <br/>
        /// <br/>A condition that makes the transition available only to Bamboo build notifications.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "OnlyBambooNotificationsCondition"
        /// <br/>     }
        /// <br/>
        /// <br/>##### Only reporter condition #####
        /// <br/>
        /// <br/>A condition that allows only the reporter to execute a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "AllowOnlyReporter"
        /// <br/>     }
        /// <br/>
        /// <br/>##### Permission condition #####
        /// <br/>
        /// <br/>A condition that allows only users with a permission to execute a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "PermissionCondition",
        /// <br/>       "configuration": {
        /// <br/>           "permissionKey": "BROWSE_PROJECTS"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
        /// <br/>
        /// <br/>##### Previous status condition #####
        /// <br/>
        /// <br/>A condition that allows a transition based on whether an issue has or has not transitioned through a status.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "PreviousStatusCondition",
        /// <br/>       "configuration": {
        /// <br/>         "ignoreLoopTransitions": true,
        /// <br/>         "includeCurrentStatus": true,
        /// <br/>         "mostRecentStatusOnly": true,
        /// <br/>         "reverseCondition": true,
        /// <br/>         "previousStatus": {
        /// <br/>           "id": "5"
        /// <br/>         }
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>By default this condition allows the transition if the status, as defined by its ID in the `previousStatus` object, matches any previous issue status, unless:
        /// <br/>
        /// <br/> *  `ignoreLoopTransitions` is `true`, then loop transitions (from and to the same status) are ignored.
        /// <br/> *  `includeCurrentStatus` is `true`, then the current issue status is also checked.
        /// <br/> *  `mostRecentStatusOnly` is `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
        /// <br/> *  `reverseCondition` is `true`, then the status must not be present.
        /// <br/>
        /// <br/>##### Separation of duties condition #####
        /// <br/>
        /// <br/>A condition that prevents a user to perform the transition, if the user has already performed a transition on the issue.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "SeparationOfDutiesCondition",
        /// <br/>       "configuration": {
        /// <br/>         "fromStatus": {
        /// <br/>           "id": "5"
        /// <br/>         },
        /// <br/>         "toStatus": {
        /// <br/>           "id": "6"
        /// <br/>         }
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `fromStatus` OPTIONAL. An object containing the ID of the source status of the transition that is blocked. If omitted any transition to `toStatus` is blocked.
        /// <br/> *  `toStatus` An object containing the ID of the target status of the transition that is blocked.
        /// <br/>
        /// <br/>##### Subtask blocking condition #####
        /// <br/>
        /// <br/>A condition that blocks transition on a parent issue if any of its subtasks are in any of one or more statuses.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "SubTaskBlockingCondition",
        /// <br/>       "configuration": {
        /// <br/>         "statuses": [
        /// <br/>           {
        /// <br/>             "id": "1"
        /// <br/>           },
        /// <br/>           {
        /// <br/>             "id": "3"
        /// <br/>           }
        /// <br/>         ]
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `statuses` A list of objects containing status IDs.
        /// <br/>
        /// <br/>##### User is in any group condition #####
        /// <br/>
        /// <br/>A condition that allows users belonging to any group from a list of groups to execute a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "UserInAnyGroupCondition",
        /// <br/>       "configuration": {
        /// <br/>         "groups": [
        /// <br/>           "administrators",
        /// <br/>           "atlassian-addons-admin"
        /// <br/>         ]
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `groups` A list of group names.
        /// <br/>
        /// <br/>##### User is in any project role condition #####
        /// <br/>
        /// <br/>A condition that allows only users with at least one project roles from a list of project roles to execute a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "InAnyProjectRoleCondition",
        /// <br/>       "configuration": {
        /// <br/>         "projectRoles": [
        /// <br/>           {
        /// <br/>             "id": "10002"
        /// <br/>           },
        /// <br/>           {
        /// <br/>             "id": "10003"
        /// <br/>           },
        /// <br/>           {
        /// <br/>             "id": "10012"
        /// <br/>           },
        /// <br/>           {
        /// <br/>             "id": "10013"
        /// <br/>           }
        /// <br/>         ]
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `projectRoles` A list of objects containing project role IDs.
        /// <br/>
        /// <br/>##### User is in custom field condition #####
        /// <br/>
        /// <br/>A condition that allows only users listed in a given custom field to execute the transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "UserIsInCustomFieldCondition",
        /// <br/>       "configuration": {
        /// <br/>         "allowUserInField": false,
        /// <br/>         "fieldId": "customfield_10010"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `allowUserInField` If `true` only a user who is listed in `fieldId` can perform the transition, otherwise, only a user who is not listed in `fieldId` can perform the transition.
        /// <br/> *  `fieldId` The ID of the field containing the list of users.
        /// <br/>
        /// <br/>##### User is in group condition #####
        /// <br/>
        /// <br/>A condition that allows users belonging to a group to execute a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "UserInGroupCondition",
        /// <br/>       "configuration": {
        /// <br/>         "group": "administrators"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `group` The name of the group.
        /// <br/>
        /// <br/>##### User is in group custom field condition #####
        /// <br/>
        /// <br/>A condition that allows users belonging to a group specified in a custom field to execute a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "InGroupCFCondition",
        /// <br/>       "configuration": {
        /// <br/>         "fieldId": "customfield_10012"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `fieldId` The ID of the field. Allowed field types:
        /// <br/>    
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
        /// <br/>     *  `com.pyxis.greenhopper.jira:gh-epic-status`
        /// <br/>
        /// <br/>##### User is in project role condition #####
        /// <br/>
        /// <br/>A condition that allows users with a project role to execute a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "InProjectRoleCondition",
        /// <br/>       "configuration": {
        /// <br/>         "projectRole": {
        /// <br/>           "id": "10002"
        /// <br/>         }
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `projectRole` An object containing the ID of a project role.
        /// <br/>
        /// <br/>##### Value field condition #####
        /// <br/>
        /// <br/>A conditions that allows a transition to execute if the value of a field is equal to a constant value or simply set.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "ValueFieldCondition",
        /// <br/>       "configuration": {
        /// <br/>         "fieldId": "assignee",
        /// <br/>         "fieldValue": "qm:6e1ecee6-8e64-4db6-8c85-916bb3275f51:54b56885-2bd2-4381-8239-78263442520f",
        /// <br/>         "comparisonType": "NUMBER",
        /// <br/>         "comparator": "="
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `fieldId` The ID of a field used in the comparison.
        /// <br/> *  `fieldValue` The expected value of the field.
        /// <br/> *  `comparisonType` The type of the comparison. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, or `OPTIONID`.
        /// <br/> *  `comparator` One of the supported comparator: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`.
        /// <br/>
        /// <br/>**Notes:**
        /// <br/>
        /// <br/> *  If you choose the comparison type `STRING`, only `=` and `!=` are valid options.
        /// <br/> *  You may leave `fieldValue` empty when comparison type is `!=` to indicate that a value is required in the field.
        /// <br/> *  For date fields without time format values as `yyyy-MM-dd`, and for those with time as `yyyy-MM-dd HH:mm`. For example, for July 16 2021 use `2021-07-16`, for 8:05 AM use `2021-07-16 08:05`, and for 4 PM: `2021-07-16 16:00`.
        /// <br/>
        /// <br/>#### Validators ####
        /// <br/>
        /// <br/>Validators check that any input made to the transition is valid before the transition is performed.
        /// <br/>
        /// <br/>##### Date field validator #####
        /// <br/>
        /// <br/>A validator that compares two dates.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "DateFieldValidator",
        /// <br/>       "configuration": {
        /// <br/>           "comparator": "&gt;",
        /// <br/>           "date1": "updated",
        /// <br/>           "date2": "created",
        /// <br/>           "expression": "1d",
        /// <br/>           "includeTime": true
        /// <br/>         }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `comparator` One of the supported comparator: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, or `!=`.
        /// <br/> *  `date1` The date field to validate. Allowed field types:
        /// <br/>    
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
        /// <br/>     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
        /// <br/>     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
        /// <br/>     *  `duedate`
        /// <br/>     *  `created`
        /// <br/>     *  `updated`
        /// <br/>     *  `resolutiondate`
        /// <br/> *  `date2` The second date field. Required, if `expression` is not passed. Allowed field types:
        /// <br/>    
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
        /// <br/>     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
        /// <br/>     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
        /// <br/>     *  `duedate`
        /// <br/>     *  `created`
        /// <br/>     *  `updated`
        /// <br/>     *  `resolutiondate`
        /// <br/> *  `expression` An expression specifying an offset. Required, if `date2` is not passed. Offsets are built with a number, with `-` as prefix for the past, and one of these time units: `d` for day, `w` for week, `m` for month, or `y` for year. For example, -2d means two days into the past and 1w means one week into the future. The `now` keyword enables a comparison with the current date.
        /// <br/> *  `includeTime` If `true`, then the time part of the data is included for the comparison. If the field doesn't have a time part, 00:00:00 is used.
        /// <br/>
        /// <br/>##### Windows date validator #####
        /// <br/>
        /// <br/>A validator that checks that a date falls on or after a reference date and before or on the reference date plus a number of days.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "WindowsDateValidator",
        /// <br/>       "configuration": {
        /// <br/>           "date1": "customfield_10009",
        /// <br/>           "date2": "created",
        /// <br/>           "windowsDays": 5
        /// <br/>         }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `date1` The date field to validate. Allowed field types:
        /// <br/>    
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
        /// <br/>     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
        /// <br/>     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
        /// <br/>     *  `duedate`
        /// <br/>     *  `created`
        /// <br/>     *  `updated`
        /// <br/>     *  `resolutiondate`
        /// <br/> *  `date2` The reference date. Allowed field types:
        /// <br/>    
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:datetime`
        /// <br/>     *  `com.atlassian.jpo:jpo-custom-field-baseline-end`
        /// <br/>     *  `com.atlassian.jpo:jpo-custom-field-baseline-start`
        /// <br/>     *  `duedate`
        /// <br/>     *  `created`
        /// <br/>     *  `updated`
        /// <br/>     *  `resolutiondate`
        /// <br/> *  `windowsDays` A positive integer indicating a number of days.
        /// <br/>
        /// <br/>##### Field required validator #####
        /// <br/>
        /// <br/>A validator that checks fields are not empty. By default, if a field is not included in the current context it's ignored and not validated.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "FieldRequiredValidator",
        /// <br/>         "configuration": {
        /// <br/>             "ignoreContext": true,
        /// <br/>             "errorMessage": "Hey",
        /// <br/>             "fieldIds": [
        /// <br/>                 "versions",
        /// <br/>                 "customfield_10037",
        /// <br/>                 "customfield_10003"
        /// <br/>             ]
        /// <br/>         }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `ignoreContext` If `true`, then the context is ignored and all the fields are validated.
        /// <br/> *  `errorMessage` OPTIONAL. The error message displayed when one or more fields are empty. A default error message is shown if an error message is not provided.
        /// <br/> *  `fieldIds` The list of fields to validate.
        /// <br/>
        /// <br/>##### Field changed validator #####
        /// <br/>
        /// <br/>A validator that checks that a field value is changed. However, this validation can be ignored for users from a list of groups.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "FieldChangedValidator",
        /// <br/>         "configuration": {
        /// <br/>             "fieldId": "comment",
        /// <br/>             "errorMessage": "Hey",
        /// <br/>             "exemptedGroups": [
        /// <br/>                 "administrators",
        /// <br/>                 "atlassian-addons-admin"
        /// <br/>             ]
        /// <br/>         }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `fieldId` The ID of a field.
        /// <br/> *  `errorMessage` OPTIONAL. The error message displayed if the field is not changed. A default error message is shown if the error message is not provided.
        /// <br/> *  `exemptedGroups` OPTIONAL. The list of groups.
        /// <br/>
        /// <br/>##### Field has single value validator #####
        /// <br/>
        /// <br/>A validator that checks that a multi-select field has only one value. Optionally, the validation can ignore values copied from subtasks.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "FieldHasSingleValueValidator",
        /// <br/>         "configuration": {
        /// <br/>             "fieldId": "attachment,
        /// <br/>             "excludeSubtasks": true
        /// <br/>         }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `fieldId` The ID of a field.
        /// <br/> *  `excludeSubtasks` If `true`, then values copied from subtasks are ignored.
        /// <br/>
        /// <br/>##### Parent status validator #####
        /// <br/>
        /// <br/>A validator that checks the status of the parent issue of a subtask. Ìf the issue is not a subtask, no validation is performed.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "ParentStatusValidator",
        /// <br/>         "configuration": {
        /// <br/>             "parentStatuses": [
        /// <br/>                 {
        /// <br/>                   "id":"1"
        /// <br/>                 },
        /// <br/>                 {
        /// <br/>                   "id":"2"
        /// <br/>                 }
        /// <br/>             ]
        /// <br/>         }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `parentStatus` The list of required parent issue statuses.
        /// <br/>
        /// <br/>##### Permission validator #####
        /// <br/>
        /// <br/>A validator that checks the user has a permission.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "PermissionValidator",
        /// <br/>       "configuration": {
        /// <br/>           "permissionKey": "ADMINISTER_PROJECTS"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
        /// <br/>
        /// <br/>##### Previous status validator #####
        /// <br/>
        /// <br/>A validator that checks if the issue has held a status.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "PreviousStatusValidator",
        /// <br/>       "configuration": {
        /// <br/>           "mostRecentStatusOnly": false,
        /// <br/>           "previousStatus": {
        /// <br/>               "id": "15"
        /// <br/>           }
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `mostRecentStatusOnly` If `true`, then only the issue's preceding status (the one immediately before the current status) is checked.
        /// <br/> *  `previousStatus` An object containing the ID of an issue status.
        /// <br/>
        /// <br/>##### Regular expression validator #####
        /// <br/>
        /// <br/>A validator that checks the content of a field against a regular expression.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "RegexpFieldValidator",
        /// <br/>       "configuration": {
        /// <br/>           "regExp": "[0-9]",
        /// <br/>           "fieldId": "customfield_10029"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `regExp`A regular expression.
        /// <br/> *  `fieldId` The ID of a field. Allowed field types:
        /// <br/>    
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:select`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:multiselect`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:textarea`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:textfield`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:url`
        /// <br/>     *  `com.atlassian.jira.plugin.system.customfieldtypes:float`
        /// <br/>     *  `com.pyxis.greenhopper.jira:jsw-story-points`
        /// <br/>     *  `com.pyxis.greenhopper.jira:gh-epic-status`
        /// <br/>     *  `description`
        /// <br/>     *  `summary`
        /// <br/>
        /// <br/>##### User permission validator #####
        /// <br/>
        /// <br/>A validator that checks if a user has a permission. Obsolete. You may encounter this validator when getting transition rules and can pass it when updating or creating rules, for example, when you want to duplicate the rules from a workflow on a new workflow.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "UserPermissionValidator",
        /// <br/>         "configuration": {
        /// <br/>             "permissionKey": "BROWSE_PROJECTS",
        /// <br/>             "nullAllowed": false,
        /// <br/>             "username": "TestUser"
        /// <br/>         }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `permissionKey` The permission to be validated. Allowed values: [built-in](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions) or app defined permissions.
        /// <br/> *  `nullAllowed` If `true`, allows the transition when `username` is empty.
        /// <br/> *  `username` The username to validate against the `permissionKey`.
        /// <br/>
        /// <br/>#### Post functions ####
        /// <br/>
        /// <br/>Post functions carry out any additional processing required after a Jira workflow transition is executed.
        /// <br/>
        /// <br/>##### Fire issue event function #####
        /// <br/>
        /// <br/>A post function that fires an event that is processed by the listeners.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "FireIssueEventFunction",
        /// <br/>       "configuration": {
        /// <br/>         "event": {
        /// <br/>           "id":"1"
        /// <br/>         }
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>**Note:** If provided, this post function overrides the default `FireIssueEventFunction`. Can be included once in a transition.
        /// <br/>
        /// <br/> *  `event` An object containing the ID of the issue event.
        /// <br/>
        /// <br/>##### Update issue status #####
        /// <br/>
        /// <br/>A post function that sets issue status to the linked status of the destination workflow status.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "UpdateIssueStatusFunction"
        /// <br/>     }
        /// <br/>
        /// <br/>**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
        /// <br/>
        /// <br/>##### Create comment #####
        /// <br/>
        /// <br/>A post function that adds a comment entered during the transition to an issue.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "CreateCommentFunction"
        /// <br/>     }
        /// <br/>
        /// <br/>**Note:** This post function is a default function in global and directed transitions. It can only be added to the initial transition and can only be added once.
        /// <br/>
        /// <br/>##### Store issue #####
        /// <br/>
        /// <br/>A post function that stores updates to an issue.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "IssueStoreFunction"
        /// <br/>     }
        /// <br/>
        /// <br/>**Note:** This post function can only be added to the initial transition and can only be added once.
        /// <br/>
        /// <br/>##### Assign to current user function #####
        /// <br/>
        /// <br/>A post function that assigns the issue to the current user if the current user has the `ASSIGNABLE_USER` permission.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "AssignToCurrentUserFunction"
        /// <br/>     }
        /// <br/>
        /// <br/>**Note:** This post function can be included once in a transition.
        /// <br/>
        /// <br/>##### Assign to lead function #####
        /// <br/>
        /// <br/>A post function that assigns the issue to the project or component lead developer.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "AssignToLeadFunction"
        /// <br/>     }
        /// <br/>
        /// <br/>**Note:** This post function can be included once in a transition.
        /// <br/>
        /// <br/>##### Assign to reporter function #####
        /// <br/>
        /// <br/>A post function that assigns the issue to the reporter.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "AssignToReporterFunction"
        /// <br/>     }
        /// <br/>
        /// <br/>**Note:** This post function can be included once in a transition.
        /// <br/>
        /// <br/>##### Clear field value function #####
        /// <br/>
        /// <br/>A post function that clears the value from a field.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "ClearFieldValuePostFunction",
        /// <br/>       "configuration": {
        /// <br/>         "fieldId": "assignee"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `fieldId` The ID of the field.
        /// <br/>
        /// <br/>##### Copy value from other field function #####
        /// <br/>
        /// <br/>A post function that copies the value of one field to another, either within an issue or from parent to subtask.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "CopyValueFromOtherFieldPostFunction",
        /// <br/>       "configuration": {
        /// <br/>         "sourceFieldId": "assignee",
        /// <br/>         "destinationFieldId": "creator",
        /// <br/>         "copyType": "same"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `sourceFieldId` The ID of the source field.
        /// <br/> *  `destinationFieldId` The ID of the destination field.
        /// <br/> *  `copyType` Use `same` to copy the value from a field inside the issue, or `parent` to copy the value from the parent issue.
        /// <br/>
        /// <br/>##### Create Crucible review workflow function #####
        /// <br/>
        /// <br/>A post function that creates a Crucible review for all unreviewed code for the issue.
        /// <br/>
        /// <br/>    {
        /// <br/>         "type": "CreateCrucibleReviewWorkflowFunction"
        /// <br/>     }
        /// <br/>
        /// <br/>**Note:** This post function can be included once in a transition.
        /// <br/>
        /// <br/>##### Set issue security level based on user's project role function #####
        /// <br/>
        /// <br/>A post function that sets the issue's security level if the current user has a project role.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "SetIssueSecurityFromRoleFunction",
        /// <br/>       "configuration": {
        /// <br/>         "projectRole": {
        /// <br/>             "id":"10002"
        /// <br/>         },
        /// <br/>         "issueSecurityLevel": {
        /// <br/>             "id":"10000"
        /// <br/>         }
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `projectRole` An object containing the ID of the project role.
        /// <br/> *  `issueSecurityLevel` OPTIONAL. The object containing the ID of the security level. If not passed, then the security level is set to `none`.
        /// <br/>
        /// <br/>##### Trigger a webhook function #####
        /// <br/>
        /// <br/>A post function that triggers a webhook.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "TriggerWebhookFunction",
        /// <br/>       "configuration": {
        /// <br/>         "webhook": {
        /// <br/>           "id": "1"
        /// <br/>         }
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `webhook` An object containing the ID of the webhook listener to trigger.
        /// <br/>
        /// <br/>##### Update issue custom field function #####
        /// <br/>
        /// <br/>A post function that updates the content of an issue custom field.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "UpdateIssueCustomFieldPostFunction",
        /// <br/>       "configuration": {
        /// <br/>         "mode": "append",
        /// <br/>         "fieldId": "customfield_10003",
        /// <br/>         "fieldValue": "yikes"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `mode` Use `replace` to override the field content with `fieldValue` or `append` to add `fieldValue` to the end of the field content.
        /// <br/> *  `fieldId` The ID of the field.
        /// <br/> *  `fieldValue` The update content.
        /// <br/>
        /// <br/>##### Update issue field function #####
        /// <br/>
        /// <br/>A post function that updates a simple issue field.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "UpdateIssueFieldFunction",
        /// <br/>       "configuration": {
        /// <br/>         "fieldId": "assignee",
        /// <br/>         "fieldValue": "5f0c277e70b8a90025a00776"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `fieldId` The ID of the field. Allowed field types:
        /// <br/>    
        /// <br/>     *  `assignee`
        /// <br/>     *  `description`
        /// <br/>     *  `environment`
        /// <br/>     *  `priority`
        /// <br/>     *  `resolution`
        /// <br/>     *  `summary`
        /// <br/>     *  `timeoriginalestimate`
        /// <br/>     *  `timeestimate`
        /// <br/>     *  `timespent`
        /// <br/> *  `fieldValue` The update value.
        /// <br/> *  If the `fieldId` is `assignee`, the `fieldValue` should be one of these values:
        /// <br/>    
        /// <br/>     *  an account ID.
        /// <br/>     *  `automatic`.
        /// <br/>     *  a blank string, which sets the value to `unassigned`.
        /// <br/>
        /// <br/>#### Connect rules ####
        /// <br/>
        /// <br/>Connect rules are conditions, validators, and post functions of a transition that are registered by Connect apps. To create a rule registered by the app, the app must be enabled and the rule's module must exist.
        /// <br/>
        /// <br/>    {
        /// <br/>       "type": "appKey__moduleKey",
        /// <br/>       "configuration": {
        /// <br/>         "value":"{\"isValid\":\"true\"}"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/> *  `type` A Connect rule key in a form of `appKey__moduleKey`.
        /// <br/> *  `value` The stringified JSON configuration of a Connect rule.
        /// <br/>
        /// <br/>#### Forge rules ####
        /// <br/>
        /// <br/>Forge transition rules are not yet supported.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="body">The workflow details.</param>
        /// <returns>Returned if the workflow is created.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<WorkflowIDs> CreateWorkflowAsync(CreateWorkflowDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get workflow transition rule configurations
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of workflows with transition rules. The workflows can be filtered to return only those containing workflow transition rules:
        /// <br/>
        /// <br/> *  of one or more transition rule types, such as [workflow post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/).
        /// <br/> *  matching one or more transition rule keys.
        /// <br/>
        /// <br/>Only workflows containing transition rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app are returned.
        /// <br/>
        /// <br/>Due to server-side optimizations, workflows with an empty list of rules may be returned; these workflows can be ignored.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
        /// </remarks>
        /// <param name="types">The types of the transition rules to return.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="keys">The transition rule class keys, as defined in the Connect or the Forge app descriptor, of the transition rules to return.</param>
        /// <param name="workflowNames">The list of workflow names to filter by.</param>
        /// <param name="withTags">The list of `tags` to filter by.</param>
        /// <param name="draft">Whether draft or published workflows are returned. If not provided, both workflow types are returned.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanWorkflowTransitionRules> GetWorkflowTransitionRuleConfigurationsAsync(System.Collections.Generic.IEnumerable<Anonymous4> types, long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<string> keys = null, System.Collections.Generic.IEnumerable<string> workflowNames = null, System.Collections.Generic.IEnumerable<string> withTags = null, bool? draft = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update workflow transition rule configurations
        /// </summary>
        /// <remarks>
        /// Updates configuration of workflow transition rules. The following rule types are supported:
        /// <br/>
        /// <br/> *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
        /// <br/> *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
        /// <br/> *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
        /// <br/>
        /// <br/>Only rules created by the calling [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) app can be updated.
        /// <br/>
        /// <br/>To assist with app migration, this operation can be used to:
        /// <br/>
        /// <br/> *  Disable a rule.
        /// <br/> *  Add a `tag`. Use this to filter rules in the [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
        /// <br/>
        /// <br/>Rules are enabled if the `disabled` parameter is not provided.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only [Connect](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) or [Forge](https://developer.atlassian.com/cloud/jira/platform/index/#forge-apps) apps can use this operation.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowTransitionRulesUpdateErrors> UpdateWorkflowTransitionRuleConfigurationsAsync(WorkflowTransitionRulesUpdate body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete workflow transition rule configurations
        /// </summary>
        /// <remarks>
        /// Deletes workflow transition rules from one or more workflows. These rule types are supported:
        /// <br/>
        /// <br/> *  [post functions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-post-function/)
        /// <br/> *  [conditions](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-condition/)
        /// <br/> *  [validators](https://developer.atlassian.com/cloud/jira/platform/modules/workflow-validator/)
        /// <br/>
        /// <br/>Only rules created by the calling Connect app can be deleted.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only Connect apps can use this operation.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowTransitionRulesUpdateErrors> DeleteWorkflowTransitionRuleConfigurationsAsync(WorkflowsWithTransitionRulesDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get workflows paginated
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of published classic workflows. When workflow names are specified, details of those workflows are returned. Otherwise, all published classic workflows are returned.
        /// <br/>
        /// <br/>This operation does not return next-gen workflows.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="workflowName">The name of a workflow to return. To include multiple workflows, provide an ampersand-separated list. For example, `workflowName=name1&amp;workflowName=name2`.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `transitions` For each workflow, returns information about the transitions inside the workflow.
        /// <br/> *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.
        /// <br/> *  `transitions.properties` For each workflow transition, returns information about its properties. Transitions are included automatically if this expand is requested.
        /// <br/> *  `statuses` For each workflow, returns information about the statuses inside the workflow.
        /// <br/> *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.
        /// <br/> *  `default` For each workflow, returns information about whether this is the default workflow.
        /// <br/> *  `schemes` For each workflow, returns information about the workflow schemes the workflow is assigned to.
        /// <br/> *  `projects` For each workflow, returns information about the projects the workflow is assigned to, through workflow schemes.
        /// <br/> *  `hasDraftWorkflow` For each workflow, returns information about whether the workflow has a draft version.
        /// <br/> *  `operations` For each workflow, returns information about the actions that can be undertaken on the workflow.</param>
        /// <param name="queryString">String used to perform a case-insensitive partial match with workflow name.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:
        /// <br/>
        /// <br/> *  `name` Sorts by workflow name.
        /// <br/> *  `created` Sorts by create time.
        /// <br/> *  `updated` Sorts by update time.</param>
        /// <param name="isActive">Filters active and inactive workflows.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanWorkflow> GetWorkflowsPaginatedAsync(long? startAt = null, int? maxResults = null, System.Collections.Generic.IEnumerable<string> workflowName = null, string expand = null, string queryString = null, OrderBy12? orderBy = null, bool? isActive = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get workflow transition properties
        /// </summary>
        /// <remarks>
        /// Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="transitionId">The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.</param>
        /// <param name="workflowName">The name of the workflow that the transition belongs to.</param>
        /// <param name="includeReservedKeys">Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.</param>
        /// <param name="key">The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.</param>
        /// <param name="workflowMode">The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.</param>
        /// <returns>200 response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowTransitionProperty> GetWorkflowTransitionPropertiesAsync(long transitionId, string workflowName, bool? includeReservedKeys = null, string key = null, WorkflowMode? workflowMode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update workflow transition property
        /// </summary>
        /// <remarks>
        /// Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="transitionId">The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.</param>
        /// <param name="key">The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.</param>
        /// <param name="workflowName">The name of the workflow that the transition belongs to.</param>
        /// <param name="workflowMode">The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.</param>
        /// <returns>200 response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowTransitionProperty> UpdateWorkflowTransitionPropertyAsync(long transitionId, string key, string workflowName, WorkflowTransitionProperty body, WorkflowMode2? workflowMode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create workflow transition property
        /// </summary>
        /// <remarks>
        /// Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="transitionId">The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.</param>
        /// <param name="key">The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.</param>
        /// <param name="workflowName">The name of the workflow that the transition belongs to.</param>
        /// <param name="workflowMode">The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.</param>
        /// <returns>200 response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowTransitionProperty> CreateWorkflowTransitionPropertyAsync(long transitionId, string key, string workflowName, WorkflowTransitionProperty body, WorkflowMode3? workflowMode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete workflow transition property
        /// </summary>
        /// <remarks>
        /// Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="transitionId">The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.</param>
        /// <param name="key">The name of the transition property to delete, also known as the name of the property.</param>
        /// <param name="workflowName">The name of the workflow that the transition belongs to.</param>
        /// <param name="workflowMode">The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.</param>
        /// <returns>200 response</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWorkflowTransitionPropertyAsync(long transitionId, string key, string workflowName, WorkflowMode4? workflowMode = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete inactive workflow
        /// </summary>
        /// <remarks>
        /// Deletes a workflow.
        /// <br/>
        /// <br/>The workflow cannot be deleted if it is:
        /// <br/>
        /// <br/> *  an active workflow.
        /// <br/> *  a system workflow.
        /// <br/> *  associated with any workflow scheme.
        /// <br/> *  associated with any draft workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="entityId">The entity ID of the workflow.</param>
        /// <returns>Returned if the workflow is deleted.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteInactiveWorkflowAsync(string entityId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk get workflows
        /// </summary>
        /// <remarks>
        /// Returns a list of workflows and related statuses by providing workflow names, workflow IDs, or project and issue types.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* global permission to access all, including project-scoped, workflows
        /// <br/> *  At least one of the *Administer projects* and *View (read-only) workflow* project permissions to access project-scoped workflows
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
        /// <br/> *  `statuses.usages` Returns the project and issue types that each status is associated with.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowReadResponse> ReadWorkflowsAsync(WorkflowReadRequest body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available workflow capabilities
        /// </summary>
        /// <remarks>
        /// Get the list of workflow capabilities for a specific workflow using either the workflow ID, or the project and issue type ID pair. The response includes the scope of the workflow, defined as global/project-based, and a list of project types that the workflow is scoped to. It also includes all rules organised into their broad categories (conditions, validators, actions, triggers, screens) as well as the source location (Atlassian-provided, Connect, Forge).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* project permission to access all, including global-scoped, workflows
        /// <br/> *  *Administer projects* project permissions to access project-scoped workflows
        /// <br/>
        /// <br/>The current list of Atlassian-provided rules:
        /// <br/>
        /// <br/>#### Validators ####
        /// <br/>
        /// <br/>A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
        /// <br/>
        /// <br/>##### Permission validator #####
        /// <br/>
        /// <br/>A validator rule that checks if a user has the required permissions to execute the transition in the workflow.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:check-permission-validator",
        /// <br/>       "parameters": {
        /// <br/>         "permissionKey": "ADMINISTER_PROJECTS"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `permissionKey` The permission required to perform the transition. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
        /// <br/>
        /// <br/>##### Parent or child blocking validator #####
        /// <br/>
        /// <br/>A validator to block the child issue’s transition depending on the parent issue’s status.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey" : "system:parent-or-child-blocking-validator"
        /// <br/>       "parameters" : {
        /// <br/>         "blocker" : "PARENT"
        /// <br/>         "statusIds" : "1,2,3"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `blocker` currently only supports `PARENT`.
        /// <br/> *  `statusIds` a comma-separated list of status IDs.
        /// <br/>
        /// <br/>##### Previous status validator #####
        /// <br/>
        /// <br/>A validator that checks if an issue has transitioned through specified previous status(es) before allowing the current transition to occur.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:previous-status-validator",
        /// <br/>       "parameters": {
        /// <br/>         "previousStatusIds": "10014",
        /// <br/>         "mostRecentStatusOnly": "true"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `previousStatusIds` a comma-separated list of status IDs, currently only support one ID.
        /// <br/> *  `mostRecentStatusOnly` when `true` only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
        /// <br/>
        /// <br/>##### Validate a field value #####
        /// <br/>
        /// <br/>A validation that ensures a specific field's value meets the defined criteria before allowing an issue to transition in the workflow.
        /// <br/>
        /// <br/>Depending on the rule type, the result will vary:
        /// <br/>
        /// <br/>###### Field required ######
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:validate-field-value",
        /// <br/>       "parameters": {
        /// <br/>         "ruleType": "fieldRequired",
        /// <br/>         "fieldsRequired": "assignee",
        /// <br/>         "ignoreContext": "true",
        /// <br/>         "errorMessage": "An assignee must be set!"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `fieldsRequired` the ID of the field that is required. For a custom field, it would look like `customfield_123`.
        /// <br/> *  `ignoreContext` controls the impact of context settings on field validation. When set to `true`, the validator doesn't check a required field if its context isn't configured for the current issue. When set to `false`, the validator requires a field even if its context is invalid. Allowed values: `true`, `false`.
        /// <br/> *  `errorMessage` is the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
        /// <br/>
        /// <br/>###### Field changed ######
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:validate-field-value",
        /// <br/>       "parameters": {
        /// <br/>         "ruleType": "fieldChanged",
        /// <br/>         "groupsExemptFromValidation": "6862ac20-8672-4f68-896d-4854f5efb79e",
        /// <br/>         "fieldKey": "versions",
        /// <br/>         "errorMessage": "Affect versions must be modified before transition"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `groupsExemptFromValidation` a comma-separated list of group IDs to be exempt from the validation.
        /// <br/> *  `fieldKey` the ID of the field that has changed. For a custom field, it would look like `customfield_123`.
        /// <br/> *  `errorMessage` the error message to display if the user does not provide a value during the transition. A default error message will be shown if you don't provide one (Optional).
        /// <br/>
        /// <br/>###### Field has a single value ######
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:validate-field-value",
        /// <br/>       "parameters": {
        /// <br/>         "ruleType": "fieldHasSingleValue",
        /// <br/>         "fieldKey": "created",
        /// <br/>         "excludeSubtasks": "true"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
        /// <br/> *  `excludeSubtasks` Option to exclude values copied from sub-tasks. Allowed values: `true`, `false`.
        /// <br/>
        /// <br/>###### Field matches regular expression ######
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:validate-field-value",
        /// <br/>       "parameters": {
        /// <br/>         "ruleType": "fieldMatchesRegularExpression",
        /// <br/>         "regexp": "[0-9]{4}",
        /// <br/>         "fieldKey": "description"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `regexp` the regular expression used to validate the field’s content.
        /// <br/> *  `fieldKey` the ID of the field to validate. For a custom field, it would look like `customfield_123`.
        /// <br/>
        /// <br/>###### Date field comparison ######
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:validate-field-value",
        /// <br/>       "parameters": {
        /// <br/>         "ruleType": "dateFieldComparison",
        /// <br/>         "date1FieldKey": "duedate",
        /// <br/>         "date2FieldKey": "customfield_10054",
        /// <br/>         "includeTime": "true",
        /// <br/>         "conditionSelected": "&gt;="
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
        /// <br/> *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
        /// <br/> *  `includeTime` if `true`, compares both date and time. Allowed values: `true`, `false`.
        /// <br/> *  `conditionSelected` the condition to compare with. Allowed values: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`.
        /// <br/>
        /// <br/>###### Date range comparison ######
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:validate-field-value",
        /// <br/>       "parameters": {
        /// <br/>         "ruleType": "windowDateComparison",
        /// <br/>         "date1FieldKey": "customfield_10009",
        /// <br/>         "date2FieldKey": "customfield_10054",
        /// <br/>         "numberOfDays": "3"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `date1FieldKey` the ID of the first field to compare. For a custom field, it would look like `customfield_123`.
        /// <br/> *  `date2FieldKey` the ID of the second field to compare. For a custom field, it would look like `customfield_123`.
        /// <br/> *  `numberOfDays` maximum number of days past the reference date (`date2FieldKey`) to pass validation.
        /// <br/>
        /// <br/>This rule is composed by aggregating the following legacy rules:
        /// <br/>
        /// <br/> *  FieldRequiredValidator
        /// <br/> *  FieldChangedValidator
        /// <br/> *  FieldHasSingleValueValidator
        /// <br/> *  RegexpFieldValidator
        /// <br/> *  DateFieldValidator
        /// <br/> *  WindowsDateValidator
        /// <br/>
        /// <br/>##### Proforma: Forms attached validator #####
        /// <br/>
        /// <br/>Validates that one or more forms are attached to the issue.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey" : "system:proforma-forms-attached"
        /// <br/>       "parameters" : {}
        /// <br/>     }
        /// <br/>
        /// <br/>##### Proforma: Forms submitted validator #####
        /// <br/>
        /// <br/>Validates that all forms attached to the issue have been submitted.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey" : "system:proforma-forms-submitted"
        /// <br/>       "parameters" : {}
        /// <br/>     }
        /// <br/>
        /// <br/>#### Conditions ####
        /// <br/>
        /// <br/>Conditions enable workflow rules that govern whether a transition can execute.
        /// <br/>
        /// <br/>##### Check field value #####
        /// <br/>
        /// <br/>A condition rule evaluates as true if a specific field's value meets the defined criteria. This rule ensures that an issue can only transition to the next step in the workflow if the field's value matches the desired condition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:check-field-value",
        /// <br/>       "parameters": {
        /// <br/>         "fieldId": "description",
        /// <br/>         "fieldValue": "[\"Done\"]",
        /// <br/>         "comparator": "=",
        /// <br/>         "comparisonType": "STRING"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `fieldId` The ID of the field to check the value of. For non-system fields, it will look like `customfield_123`. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
        /// <br/> *  `fieldValue` the list of values to check against the field’s value.
        /// <br/> *  `comparator` The comparison logic. Allowed values: `&gt;`, `&gt;=`, `=`, `&lt;=`, `&lt;`, `!=`.
        /// <br/> *  `comparisonType` The type of data being compared. Allowed values: `STRING`, `NUMBER`, `DATE`, `DATE_WITHOUT_TIME`, `OPTIONID`.
        /// <br/>
        /// <br/>##### Restrict issue transition #####
        /// <br/>
        /// <br/>This rule ensures that issue transitions are restricted based on user accounts, roles, group memberships, and permissions, maintaining control over who can transition an issue. This condition evaluates as `true` if any of the following criteria is met.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:restrict-issue-transition",
        /// <br/>       "parameters": {
        /// <br/>         "accountIds": "allow-reporter,5e68ac137d64450d01a77fa0",
        /// <br/>         "roleIds": "10002,10004",
        /// <br/>         "groupIds": "703ff44a-7dc8-4f4b-9aa6-a65bf3574fa4",
        /// <br/>         "permissionKeys": "ADMINISTER_PROJECTS",
        /// <br/>         "groupCustomFields": "customfield_10028",
        /// <br/>         "allowUserCustomFields": "customfield_10072,customfield_10144,customfield_10007",
        /// <br/>         "denyUserCustomFields": "customfield_10107"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `accountIds` a comma-separated list of the user account IDs. It also allows generic values like: `allow-assignee`, `allow-reporter`, and `accountIds` Note: This is only supported in team-managed projects
        /// <br/> *  `roleIds` a comma-separated list of role IDs.
        /// <br/> *  `groupIds` a comma-separated list of group IDs.
        /// <br/> *  `permissionKeys` a comma-separated list of permission keys. Allowed values: [built-in Jira permissions](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-permission-schemes/#built-in-permissions).
        /// <br/> *  `groupCustomFields` a comma-separated list of group custom field IDs.
        /// <br/> *  `allowUserCustomFields` a comma-separated list of user custom field IDs to allow for issue transition.
        /// <br/> *  `denyUserCustomFields` a comma-separated list of user custom field IDs to deny for issue transition.
        /// <br/>
        /// <br/>This rule is composed by aggregating the following legacy rules:
        /// <br/>
        /// <br/> *  AllowOnlyAssignee
        /// <br/> *  AllowOnlyReporter
        /// <br/> *  InAnyProjectRoleCondition
        /// <br/> *  InProjectRoleCondition
        /// <br/> *  UserInAnyGroupCondition
        /// <br/> *  UserInGroupCondition
        /// <br/> *  PermissionCondtion
        /// <br/> *  InGroupCFCondition
        /// <br/> *  UserIsInCustomFieldCondition
        /// <br/>
        /// <br/>##### Previous status condition #####
        /// <br/>
        /// <br/>A condition that evaluates based on an issue's previous status(es) and specific criteria.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey" : "system:previous-status-condition"
        /// <br/>       "parameters" : {
        /// <br/>         "previousStatusIds" : "10004",
        /// <br/>         "not": "true",
        /// <br/>         "mostRecentStatusOnly" : "true",
        /// <br/>         "includeCurrentStatus": "true",
        /// <br/>         "ignoreLoopTransitions": "true"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `previousStatusIds` a comma-separated list of status IDs, current only support one ID.
        /// <br/> *  `not` indicates if the condition should be reversed. When `true` it checks that the issue has not been in the selected statuses. Allowed values: `true`, `false`.
        /// <br/> *  `mostRecentStatusOnly` when true only considers the most recent status for the condition evaluation. Allowed values: `true`, `false`.
        /// <br/> *  `includeCurrentStatus` includes the current status when evaluating if the issue has been through the selected statuses. Allowed values: `true`, `false`.
        /// <br/> *  `ignoreLoopTransitions` ignore loop transitions. Allowed values: `true`, `false`.
        /// <br/>
        /// <br/>##### Parent or child blocking condition #####
        /// <br/>
        /// <br/>A condition to block the parent’s issue transition depending on the child’s issue status.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey" : "system:parent-or-child-blocking-condition"
        /// <br/>       "parameters" : {
        /// <br/>         "blocker" : "CHILD",
        /// <br/>         "statusIds" : "1,2,3"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `blocker` currently only supports `CHILD`.
        /// <br/> *  `statusIds` a comma-separated list of status IDs.
        /// <br/>
        /// <br/>##### Separation of duties #####
        /// <br/>
        /// <br/>A condition preventing the user from performing, if the user has already performed a transition on the issue.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:separation-of-duties",
        /// <br/>       "parameters": {
        /// <br/>         "fromStatusId": "10161",
        /// <br/>         "toStatusId": "10160"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `fromStatusId` represents the status ID from which the issue is transitioning. It ensures that the user performing the current transition has not performed any actions when the issue was in the specified status.
        /// <br/> *  `toStatusId` represents the status ID to which the issue is transitioning. It ensures that the user performing the current transition is not the same user who has previously transitioned the issue.
        /// <br/>
        /// <br/>##### Restrict transitions #####
        /// <br/>
        /// <br/>A condition preventing all users from transitioning the issue can also optionally include APIs as well.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:restrict-from-all-users",
        /// <br/>       "parameters": {
        /// <br/>         "restrictMode": "users"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `restrictMode` restricts the issue transition including/excluding APIs. Allowed values: `"users"`, `"usersAndAPI"`.
        /// <br/>
        /// <br/>##### Jira Service Management block until approved #####
        /// <br/>
        /// <br/>Block an issue transition until approval. Note: This is only supported in team-managed projects.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:jsd-approvals-block-until-approved",
        /// <br/>       "parameters": {
        /// <br/>         "approvalConfigurationJson": "{"statusExternalUuid...}"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
        /// <br/>
        /// <br/>##### Jira Service Management block until rejected #####
        /// <br/>
        /// <br/>Block an issue transition until rejected. Note: This is only supported in team-managed projects.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:jsd-approvals-block-until-rejected",
        /// <br/>       "parameters": {
        /// <br/>         "approvalConfigurationJson": "{"statusExternalUuid...}"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `approvalConfigurationJson` a stringified JSON holding the Jira Service Management approval configuration.
        /// <br/>
        /// <br/>##### Block in progress approval #####
        /// <br/>
        /// <br/>Condition to block issue transition if there is pending approval. Note: This is only supported in company-managed projects.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:block-in-progress-approval",
        /// <br/>       "parameters": {}
        /// <br/>     }
        /// <br/>
        /// <br/>#### Post functions ####
        /// <br/>
        /// <br/>Post functions carry out any additional processing required after a workflow transition is executed.
        /// <br/>
        /// <br/>##### Change assignee #####
        /// <br/>
        /// <br/>A post function rule that changes the assignee of an issue after a transition.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:change-assignee",
        /// <br/>       "parameters": {
        /// <br/>         "type": "to-selected-user",
        /// <br/>         "accountId": "example-account-id"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `type` the parameter used to determine the new assignee. Allowed values: `to-selected-user`, `to-unassigned`, `to-current-user`, `to-current-user`, `to-default-user`, `to-default-user`
        /// <br/> *  `accountId` the account ID of the user to assign the issue to. This parameter is required only when the type is `"to-selected-user"`.
        /// <br/>
        /// <br/>##### Copy field value #####
        /// <br/>
        /// <br/>A post function that automates the process of copying values between fields during a specific transition, ensuring data consistency and reducing manual effort.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:copy-value-from-other-field",
        /// <br/>       "parameters": {
        /// <br/>         "sourceFieldKey": "description",
        /// <br/>         "targetFieldKey": "components",
        /// <br/>         "issueSource": "SAME"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `sourceFieldKey` the field key to copy from. For a custom field, it would look like `customfield_123`
        /// <br/> *  `targetFieldKey` the field key to copy to. For a custom field, it would look like `customfield_123`
        /// <br/> *  `issueSource` `SAME` or `PARENT`. Defaults to `SAME` if no value is provided.
        /// <br/>
        /// <br/>##### Update field #####
        /// <br/>
        /// <br/>A post function that updates or appends a specific field with the given value.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:update-field",
        /// <br/>       "parameters": {
        /// <br/>         "field": "customfield_10056",
        /// <br/>         "value": "asdf",
        /// <br/>         "mode": "append"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `field` the ID of the field to update. For a custom field, it would look like `customfield_123`
        /// <br/> *  `value` the value to update the field with.
        /// <br/> *  `mode` `append` or `replace`. Determines if a value will be appended to the current value, or if the current value will be replaced.
        /// <br/>
        /// <br/>##### Trigger webhook #####
        /// <br/>
        /// <br/>A post function that automatically triggers a predefined webhook when a transition occurs in the workflow.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:trigger-webhook",
        /// <br/>       "parameters": {
        /// <br/>         "webhookId": "1"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `webhookId` the ID of the webhook.
        /// <br/>
        /// <br/>#### Screen ####
        /// <br/>
        /// <br/>##### Remind people to update fields #####
        /// <br/>
        /// <br/>A screen rule that prompts users to update a specific field when they interact with an issue screen during a transition. This rule is useful for ensuring that users provide or modify necessary information before moving an issue to the next step in the workflow.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:remind-people-to-update-fields",
        /// <br/>       "params": {
        /// <br/>         "remindingFieldIds": "assignee,customfield_10025",
        /// <br/>         "remindingMessage": "The message",
        /// <br/>         "remindingAlwaysAsk": "true"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `remindingFieldIds` a comma-separated list of field IDs. Note: `fieldId` is used interchangeably with the idea of `fieldKey` here, they refer to the same field.
        /// <br/> *  `remindingMessage` the message to display when prompting the users to update the fields.
        /// <br/> *  `remindingAlwaysAsk` always remind to update fields. Allowed values: `true`, `false`.
        /// <br/>
        /// <br/>##### Shared transition screen #####
        /// <br/>
        /// <br/>A common screen that is shared between transitions in a workflow.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "system:transition-screen",
        /// <br/>       "params": {
        /// <br/>         "screenId": "3"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `screenId` the ID of the screen.
        /// <br/>
        /// <br/>#### Connect &amp; Forge ####
        /// <br/>
        /// <br/>##### Connect rules #####
        /// <br/>
        /// <br/>Validator/Condition/Post function for Connect app.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "connect:expression-validator",
        /// <br/>       "parameters": {
        /// <br/>         "appKey": "com.atlassian.app",
        /// <br/>         "config": "",
        /// <br/>         "id": "90ce590f-e90c-4cd3-8281-165ce41f2ac3",
        /// <br/>         "disabled": "false",
        /// <br/>         "tag": ""
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `ruleKey` Validator: `connect:expression-validator`, Condition: `connect:expression-condition`, and Post function: `connect:remote-workflow-function`
        /// <br/> *  `appKey` the reference to the Connect app
        /// <br/> *  `config` a JSON payload string describing the configuration
        /// <br/> *  `id` the ID of the rule
        /// <br/> *  `disabled` determine if the Connect app is disabled. Allowed values: `true`, `false`.
        /// <br/> *  `tag` additional tags for the Connect app
        /// <br/>
        /// <br/>##### Forge rules #####
        /// <br/>
        /// <br/>Validator/Condition/Post function for Forge app.
        /// <br/>
        /// <br/>    {
        /// <br/>       "ruleKey": "forge:expression-validator",
        /// <br/>       "parameters": {
        /// <br/>         "key": "ari:cloud:ecosystem::extension/{appId}/{environmentId}/static/{moduleKey}",
        /// <br/>         "config": "{"searchString":"workflow validator"}",
        /// <br/>         "id": "a865ddf6-bb3f-4a7b-9540-c2f8b3f9f6c2"
        /// <br/>       }
        /// <br/>     }
        /// <br/>
        /// <br/>Parameters:
        /// <br/>
        /// <br/> *  `ruleKey` Validator: `forge:expression-validator`, Condition: `forge:expression-condition`, and Post function: `forge:workflow-post-function`
        /// <br/> *  `key` the identifier for the Forge app
        /// <br/> *  `config` the persistent stringified JSON configuration for the Forge rule
        /// <br/> *  `id` the ID of the Forge rule
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowCapabilities> WorkflowCapabilitiesAsync(string workflowId = null, string projectId = null, string issueTypeId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk create workflows
        /// </summary>
        /// <remarks>
        /// Create workflows and related statuses.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* project permission to create all, including global-scoped, workflows
        /// <br/> *  *Administer projects* project permissions to create project-scoped workflows
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowCreateResponse> CreateWorkflowsAsync(WorkflowCreateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validate create workflows
        /// </summary>
        /// <remarks>
        /// Validate the payload for bulk create workflows.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* project permission to create all, including global-scoped, workflows
        /// <br/> *  *Administer projects* project permissions to create project-scoped workflows
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowValidationErrorList> ValidateCreateWorkflowsAsync(WorkflowCreateValidateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk update workflows
        /// </summary>
        /// <remarks>
        /// Update workflows and related statuses.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* project permission to create all, including global-scoped, workflows
        /// <br/> *  *Administer projects* project permissions to create project-scoped workflows
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `workflows.usages` Returns the project and issue types that each workflow is associated with.
        /// <br/> *  `statuses.usages` Returns the project and issue types that each status is associated with.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowUpdateResponse> UpdateWorkflowsAsync(WorkflowUpdateRequest body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Validate update workflows
        /// </summary>
        /// <remarks>
        /// Validate the payload for bulk update workflows.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* project permission to create all, including global-scoped, workflows
        /// <br/> *  *Administer projects* project permissions to create project-scoped workflows
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowValidationErrorList> ValidateUpdateWorkflowsAsync(WorkflowUpdateValidateRequestBean body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all workflow schemes
        /// </summary>
        /// <remarks>
        /// Returns a [paginated](#pagination) list of all workflow schemes, not including draft workflow schemes.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PageBeanWorkflowScheme> GetAllWorkflowSchemesAsync(long? startAt = null, int? maxResults = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create workflow scheme
        /// </summary>
        /// <remarks>
        /// Creates a workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> CreateWorkflowSchemeAsync(WorkflowScheme body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get workflow scheme project associations
        /// </summary>
        /// <remarks>
        /// Returns a list of the workflow schemes associated with a list of projects. Each returned workflow scheme includes a list of the requested projects associated with it. Any team-managed or non-existent projects in the request are ignored and no errors are returned.
        /// <br/>
        /// <br/>If the project is associated with the `Default Workflow Scheme` no ID is returned. This is because the way the `Default Workflow Scheme` is stored means it has no ID.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="projectId">The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&amp;projectId=10001`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ContainerOfWorkflowSchemeAssociations> GetWorkflowSchemeProjectAssociationsAsync(System.Collections.Generic.IEnumerable<long> projectId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Assign workflow scheme to project
        /// </summary>
        /// <remarks>
        /// Assigns a workflow scheme to a project. This operation is performed only when there are no issues in the project.
        /// <br/>
        /// <br/>Workflow schemes can only be assigned to classic projects.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AssignSchemeToProjectAsync(WorkflowSchemeProjectAssociation body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk get workflow schemes
        /// </summary>
        /// <remarks>
        /// Returns a list of workflow schemes by providing workflow scheme IDs or project IDs.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* global permission to access all, including project-scoped, workflow schemes
        /// <br/> *  *Administer projects* project permissions to access project-scoped workflow schemes
        /// </remarks>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `workflows.usages` Returns the project and issue types that each workflow in the workflow scheme is associated with.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<WorkflowSchemeReadResponse>> ReadWorkflowSchemesAsync(WorkflowSchemeReadRequest body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update workflow scheme
        /// </summary>
        /// <remarks>
        /// Updates company-managed and team-managed project workflow schemes. This API doesn't have a concept of draft, so any changes made to a workflow scheme are immediately available. When changing the available statuses for issue types, an [asynchronous task](#async) migrates the issues as defined in the provided mappings.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* project permission to update all, including global-scoped, workflow schemes.
        /// <br/> *  *Administer projects* project permission to update project-scoped workflow schemes.
        /// </remarks>
        /// <returns>Returned if the request is successful and there is no asynchronous task.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> UpdateSchemesAsync(WorkflowSchemeUpdateRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get required status mappings for workflow scheme update
        /// </summary>
        /// <remarks>
        /// Gets the required status mappings for the desired changes to a workflow scheme. The results are provided per issue type and workflow. When updating a workflow scheme, status mappings can be provided per issue type, per workflow, or both.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:**
        /// <br/>
        /// <br/> *  *Administer Jira* permission to update all, including global-scoped, workflow schemes.
        /// <br/> *  *Administer projects* project permission to update project-scoped workflow schemes.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowSchemeUpdateRequiredMappingsResponse> UpdateWorkflowSchemeMappingsAsync(WorkflowSchemeUpdateRequiredMappingsRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get workflow scheme
        /// </summary>
        /// <remarks>
        /// Returns a workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.</param>
        /// <param name="returnDraftIfExists">Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> GetWorkflowSchemeAsync(long id, bool? returnDraftIfExists = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Classic update workflow scheme
        /// </summary>
        /// <remarks>
        /// Updates a company-manged project workflow scheme, including the name, default workflow, issue type to project mappings, and more. If the workflow scheme is active (that is, being used by at least one project), then a draft workflow scheme is created or updated instead, provided that `updateDraftIfNeeded` is set to `true`.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> UpdateWorkflowSchemeAsync(long id, WorkflowScheme body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete workflow scheme
        /// </summary>
        /// <remarks>
        /// Deletes a workflow scheme. Note that a workflow scheme cannot be deleted if it is active (that is, being used by at least one project).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DeleteWorkflowSchemeAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Create a draft workflow scheme from an active workflow scheme, by copying the active workflow scheme. Note that an active workflow scheme can only have one draft workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the active workflow scheme that the draft is created from.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> CreateWorkflowSchemeDraftFromParentAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get default workflow
        /// </summary>
        /// <remarks>
        /// Returns the default workflow for a workflow scheme. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="returnDraftIfExists">Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DefaultWorkflow> GetDefaultWorkflowAsync(long id, bool? returnDraftIfExists = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update default workflow
        /// </summary>
        /// <remarks>
        /// Sets the default workflow for a workflow scheme.
        /// <br/>
        /// <br/>Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request object and a draft workflow scheme is created or updated with the new default workflow. The draft workflow scheme can be published in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="body">The new default workflow.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> UpdateDefaultWorkflowAsync(long id, DefaultWorkflow body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete default workflow
        /// </summary>
        /// <remarks>
        /// Resets the default workflow for a workflow scheme. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
        /// <br/>
        /// <br/>Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the default workflow reset. The draft workflow scheme can be published in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="updateDraftIfNeeded">Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> DeleteDefaultWorkflowAsync(long id, bool? updateDraftIfNeeded = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Returns the draft workflow scheme for an active workflow scheme. Draft workflow schemes allow changes to be made to the active workflow schemes: When an active workflow scheme is updated, a draft copy is created. The draft is modified, then the changes in the draft are copied back to the active workflow scheme. See [Configuring workflow schemes](https://confluence.atlassian.com/x/tohKLg) for more information.  
        /// <br/>Note that:
        /// <br/>
        /// <br/> *  Only active workflow schemes can have draft workflow schemes.
        /// <br/> *  An active workflow scheme can only have one draft workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the active workflow scheme that the draft was created from.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> GetWorkflowSchemeDraftAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Updates a draft workflow scheme. If a draft workflow scheme does not exist for the active workflow scheme, then a draft is created. Note that an active workflow scheme can only have one draft workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the active workflow scheme that the draft was created from.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> UpdateWorkflowSchemeDraftAsync(long id, WorkflowScheme body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Deletes a draft workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the active workflow scheme that the draft was created from.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWorkflowSchemeDraftAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get draft default workflow
        /// </summary>
        /// <remarks>
        /// Returns the default workflow for a workflow scheme's draft. The default workflow is the workflow that is assigned any issue types that have not been mapped to any other workflow. The default workflow has *All Unassigned Issue Types* listed in its issue types for the workflow scheme in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DefaultWorkflow> GetDraftDefaultWorkflowAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update draft default workflow
        /// </summary>
        /// <remarks>
        /// Sets the default workflow for a workflow scheme's draft.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <param name="body">The object for the new default workflow.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> UpdateDraftDefaultWorkflowAsync(long id, DefaultWorkflow body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete draft default workflow
        /// </summary>
        /// <remarks>
        /// Resets the default workflow for a workflow scheme's draft. That is, the default workflow is set to Jira's system workflow (the *jira* workflow).
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> DeleteDraftDefaultWorkflowAsync(long id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get workflow for issue type in draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Returns the issue type-workflow mapping for an issue type in a workflow scheme's draft.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <param name="issueType">The ID of the issue type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypeWorkflowMapping> GetWorkflowSchemeDraftIssueTypeAsync(long id, string issueType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set workflow for issue type in draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Sets the workflow for an issue type in a workflow scheme's draft.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <param name="issueType">The ID of the issue type.</param>
        /// <param name="body">The issue type-project mapping.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> SetWorkflowSchemeDraftIssueTypeAsync(long id, string issueType, IssueTypeWorkflowMapping body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete workflow for issue type in draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Deletes the issue type-workflow mapping for an issue type in a workflow scheme's draft.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <param name="issueType">The ID of the issue type.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> DeleteWorkflowSchemeDraftIssueTypeAsync(long id, string issueType, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Publish draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Publishes a draft workflow scheme.
        /// <br/>
        /// <br/>Where the draft workflow includes new workflow statuses for an issue type, mappings are provided to update issues with the original workflow status to the new workflow status.
        /// <br/>
        /// <br/>This operation is [asynchronous](#async). Follow the `location` link in the response to determine the status of the task and use [Get task](#api-rest-api-3-task-taskId-get) to obtain updates.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <param name="body">Details of the status mappings.</param>
        /// <param name="validateOnly">Whether the request only performs a validation.</param>
        /// <returns>Returned if the request is only for validation and is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PublishDraftWorkflowSchemeAsync(long id, PublishDraftWorkflowScheme body, bool? validateOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue types for workflows in draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Returns the workflow-issue type mappings for a workflow scheme's draft.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <param name="workflowName">The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypesWorkflowMapping> GetDraftWorkflowAsync(long id, string workflowName = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set issue types for workflow in workflow scheme
        /// </summary>
        /// <remarks>
        /// Sets the issue types for a workflow in a workflow scheme's draft. The workflow can also be set as the default workflow for the draft workflow scheme. Unmapped issues types are mapped to the default workflow.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <param name="workflowName">The name of the workflow.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> UpdateDraftWorkflowMappingAsync(long id, string workflowName, IssueTypesWorkflowMapping body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue types for workflow in draft workflow scheme
        /// </summary>
        /// <remarks>
        /// Deletes the workflow-issue type mapping for a workflow in a workflow scheme's draft.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme that the draft belongs to.</param>
        /// <param name="workflowName">The name of the workflow.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteDraftWorkflowMappingAsync(long id, string workflowName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get workflow for issue type in workflow scheme
        /// </summary>
        /// <remarks>
        /// Returns the issue type-workflow mapping for an issue type in a workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="issueType">The ID of the issue type.</param>
        /// <param name="returnDraftIfExists">Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypeWorkflowMapping> GetWorkflowSchemeIssueTypeAsync(long id, string issueType, bool? returnDraftIfExists = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set workflow for issue type in workflow scheme
        /// </summary>
        /// <remarks>
        /// Sets the workflow for an issue type in a workflow scheme.
        /// <br/>
        /// <br/>Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new issue type-workflow mapping. The draft workflow scheme can be published in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="issueType">The ID of the issue type.</param>
        /// <param name="body">The issue type-project mapping.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> SetWorkflowSchemeIssueTypeAsync(long id, string issueType, IssueTypeWorkflowMapping body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete workflow for issue type in workflow scheme
        /// </summary>
        /// <remarks>
        /// Deletes the issue type-workflow mapping for an issue type in a workflow scheme.
        /// <br/>
        /// <br/>Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the issue type-workflow mapping deleted. The draft workflow scheme can be published in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="issueType">The ID of the issue type.</param>
        /// <param name="updateDraftIfNeeded">Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> DeleteWorkflowSchemeIssueTypeAsync(long id, string issueType, bool? updateDraftIfNeeded = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get issue types for workflows in workflow scheme
        /// </summary>
        /// <remarks>
        /// Returns the workflow-issue type mappings for a workflow scheme.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="workflowName">The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.</param>
        /// <param name="returnDraftIfExists">Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IssueTypesWorkflowMapping> GetWorkflowAsync(long id, string workflowName = null, bool? returnDraftIfExists = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set issue types for workflow in workflow scheme
        /// </summary>
        /// <remarks>
        /// Sets the issue types for a workflow in a workflow scheme. The workflow can also be set as the default workflow for the workflow scheme. Unmapped issues types are mapped to the default workflow.
        /// <br/>
        /// <br/>Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` in the request body and a draft workflow scheme is created or updated with the new workflow-issue types mappings. The draft workflow scheme can be published in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="workflowName">The name of the workflow.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowScheme> UpdateWorkflowMappingAsync(long id, string workflowName, IssueTypesWorkflowMapping body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete issue types for workflow in workflow scheme
        /// </summary>
        /// <remarks>
        /// Deletes the workflow-issue type mapping for a workflow in a workflow scheme.
        /// <br/>
        /// <br/>Note that active workflow schemes cannot be edited. If the workflow scheme is active, set `updateDraftIfNeeded` to `true` and a draft workflow scheme is created or updated with the workflow-issue type mapping deleted. The draft workflow scheme can be published in Jira.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
        /// </remarks>
        /// <param name="id">The ID of the workflow scheme.</param>
        /// <param name="workflowName">The name of the workflow.</param>
        /// <param name="updateDraftIfNeeded">Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DeleteWorkflowMappingAsync(long id, string workflowName, bool? updateDraftIfNeeded = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get IDs of deleted worklogs
        /// </summary>
        /// <remarks>
        /// Returns a list of IDs and delete timestamps for worklogs deleted after a date and time.
        /// <br/>
        /// <br/>This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
        /// <br/>
        /// <br/>This resource does not return worklogs deleted during the minute preceding the request.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira.
        /// </remarks>
        /// <param name="since">The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChangedWorklogs> GetIdsOfWorklogsDeletedSinceAsync(long? since = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get worklogs
        /// </summary>
        /// <remarks>
        /// Returns worklog details for a list of worklog IDs.
        /// <br/>
        /// <br/>The returned list of worklogs is limited to 1000 items.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
        /// <br/>
        /// <br/> *  the worklog is set as *Viewable by All Users*.
        /// <br/> *  the user is a member of a project role or group with permission to view the worklog.
        /// </remarks>
        /// <param name="body">A JSON object containing a list of worklog IDs.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Worklog>> GetWorklogsForIdsAsync(WorklogIdsRequestBean body, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get IDs of updated worklogs
        /// </summary>
        /// <remarks>
        /// Returns a list of IDs and update timestamps for worklogs updated after a date and time.
        /// <br/>
        /// <br/>This resource is paginated, with a limit of 1000 worklogs per page. Each page lists worklogs from oldest to youngest. If the number of items in the date range exceeds 1000, `until` indicates the timestamp of the youngest item on the page. Also, `nextPage` provides the URL for the next page of worklogs. The `lastPage` parameter is set to true on the last page of worklogs.
        /// <br/>
        /// <br/>This resource does not return worklogs updated during the minute preceding the request.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Permission to access Jira, however, worklogs are only returned where either of the following is true:
        /// <br/>
        /// <br/> *  the worklog is set as *Viewable by All Users*.
        /// <br/> *  the user is a member of a project role or group with permission to view the worklog.
        /// </remarks>
        /// <param name="since">The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ChangedWorklogs> GetIdsOfWorklogsModifiedSinceAsync(long? since = null, string expand = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get app properties
        /// </summary>
        /// <remarks>
        /// Gets all the properties of an app.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
        /// <br/>Additionally, Forge apps published on the Marketplace can access properties of Connect apps they were [migrated from](https://developer.atlassian.com/platform/forge/build-a-connect-on-forge-app/).
        /// </remarks>
        /// <param name="addonKey">The key of the app, as defined in its descriptor.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PropertyKeys> AddonPropertiesResource_getAddonProperties_getAsync(string addonKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get app property
        /// </summary>
        /// <remarks>
        /// Returns the key and value of an app's property.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
        /// <br/>Additionally, Forge apps published on the Marketplace can access properties of Connect apps they were [migrated from](https://developer.atlassian.com/platform/forge/build-a-connect-on-forge-app/).
        /// </remarks>
        /// <param name="addonKey">The key of the app, as defined in its descriptor.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<EntityProperty> AddonPropertiesResource_getAddonProperty_getAsync(string addonKey, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set app property
        /// </summary>
        /// <remarks>
        /// Sets the value of an app's property. Use this resource to store custom data for your app.
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
        /// </remarks>
        /// <param name="addonKey">The key of the app, as defined in its descriptor.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationMessage> AddonPropertiesResource_putAddonProperty_putAsync(string addonKey, string propertyKey, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete app property
        /// </summary>
        /// <remarks>
        /// Deletes an app's property.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only a Connect app whose key matches `addonKey` can make this request.
        /// </remarks>
        /// <param name="addonKey">The key of the app, as defined in its descriptor.</param>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddonPropertiesResource_deleteAddonProperty_deleteAsync(string addonKey, string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get modules
        /// </summary>
        /// <remarks>
        /// Returns all modules registered dynamically by the calling app.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only Connect apps can make this request.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ConnectModules> DynamicModulesResource_getModules_getAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register modules
        /// </summary>
        /// <remarks>
        /// Registers a list of modules.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only Connect apps can make this request.
        /// </remarks>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DynamicModulesResource_registerModules_postAsync(ConnectModules body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove modules
        /// </summary>
        /// <remarks>
        /// Remove all or a list of modules registered by the calling app.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only Connect apps can make this request.
        /// </remarks>
        /// <param name="moduleKey">The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.
        /// <br/>For example, `moduleKey=dynamic-attachment-entity-property&amp;moduleKey=dynamic-select-field`.
        /// <br/>Nonexistent keys are ignored.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DynamicModulesResource_removeModules_deleteAsync(System.Collections.Generic.IEnumerable<string> moduleKey = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk update custom field value
        /// </summary>
        /// <remarks>
        /// Updates the value of a custom field added by Connect apps on one or more issues.
        /// <br/>The values of up to 200 custom fields can be updated.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only Connect apps can make this request.
        /// </remarks>
        /// <param name="atlassian_Transfer_Id">The ID of the transfer.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> AppIssueFieldValueUpdateResource_updateIssueFields_putAsync(System.Guid atlassian_Transfer_Id, ConnectCustomFieldValues body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Bulk update entity properties
        /// </summary>
        /// <remarks>
        /// Updates the values of multiple entity properties for an object, up to 50 updates per request. This operation is for use by Connect apps during app migration.
        /// </remarks>
        /// <param name="atlassian_Transfer_Id">The app migration transfer ID.</param>
        /// <param name="entityType">The type indicating the object that contains the entity properties.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MigrationResource_updateEntityPropertiesValue_putAsync(System.Guid atlassian_Transfer_Id, EntityType entityType, System.Collections.Generic.IEnumerable<EntityPropertyDetails> body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get workflow transition rule configurations
        /// </summary>
        /// <remarks>
        /// Returns configurations for workflow transition rules migrated from server to cloud and owned by the calling Connect app.
        /// </remarks>
        /// <param name="atlassian_Transfer_Id">The app migration transfer ID.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<WorkflowRulesSearchDetails> MigrationResource_workflowRuleSearch_postAsync(System.Guid atlassian_Transfer_Id, WorkflowRulesSearch body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set app property (Forge)
        /// </summary>
        /// <remarks>
        /// Sets the value of a Forge app's property.
        /// <br/>These values can be retrieved in [Jira expressions](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/)
        /// <br/>through the `app` [context variable](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables).
        /// <br/>
        /// <br/>For other use cases, use the [Storage API](https://developer.atlassian.com/platform/forge/runtime-reference/storage-api/).
        /// <br/>
        /// <br/>The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only Forge apps can make this request.
        /// </remarks>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the property is updated.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OperationMessage> AddonPropertiesResource_putAppProperty_putAsync(string propertyKey, object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete app property (Forge)
        /// </summary>
        /// <remarks>
        /// Deletes a Forge app's property.
        /// <br/>
        /// <br/>**[Permissions](#permissions) required:** Only Forge apps can make this request.
        /// </remarks>
        /// <param name="propertyKey">The key of the property.</param>
        /// <returns>Returned if the request is successful.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddonPropertiesResource_deleteAppProperty_deleteAsync(string propertyKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ActorInputBean
    {
        /// <summary>
        /// The name of the group to add as a default actor. This parameter cannot be used with the `groupId` parameter. As a group's name can change,use of `groupId` is recommended. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Group { get; set; }

        /// <summary>
        /// The ID of the group to add as a default actor. This parameter cannot be used with the `group` parameter This parameter accepts a comma-separated list. For example, `"groupId":["77f6ab39-e755-4570-a6ae-2d7a8df0bcb8", "0c011f85-69ed-49c4-a801-3b18d0f771bc"]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupId { get; set; }

        /// <summary>
        /// The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> User { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ActorInputBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActorInputBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ActorsMap
    {
        /// <summary>
        /// The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Group { get; set; }

        /// <summary>
        /// The ID of the group to add. This parameter cannot be used with the `group` parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupId { get; set; }

        /// <summary>
        /// The user account ID of the user to add.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> User { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ActorsMap FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ActorsMap>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddFieldBean
    {
        /// <summary>
        /// The ID of the field to add.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FieldId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddFieldBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddFieldBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddGroupBean
    {
        /// <summary>
        /// The name of the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddGroupBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddGroupBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of notifications which should be added to the notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddNotificationsDetails
    {
        /// <summary>
        /// The list of notifications which should be added to the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationSchemeEvents", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NotificationSchemeEventDetails> NotificationSchemeEvents { get; set; } = new System.Collections.ObjectModel.Collection<NotificationSchemeEventDetails>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddNotificationsDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddNotificationsDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AddSecuritySchemeLevelsRequestBean
    {
        /// <summary>
        /// The list of scheme levels which should be added to the security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeLevelBean> Levels { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AddSecuritySchemeLevelsRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AddSecuritySchemeLevelsRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Announcement banner configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AnnouncementBannerConfiguration
    {
        /// <summary>
        /// Hash of the banner data. The client detects updates by comparing hash IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hashId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HashId { get; set; }

        /// <summary>
        /// Flag indicating if the announcement banner can be dismissed by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDismissible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDismissible { get; set; }

        /// <summary>
        /// Flag indicating if the announcement banner is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// The text on the announcement banner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Visibility of the announcement banner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AnnouncementBannerConfigurationVisibility Visibility { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AnnouncementBannerConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnnouncementBannerConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Configuration of the announcement banner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AnnouncementBannerConfigurationUpdate
    {
        /// <summary>
        /// Flag indicating if the announcement banner can be dismissed by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDismissible", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDismissible { get; set; }

        /// <summary>
        /// Flag indicating if the announcement banner is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// The text on the announcement banner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// Visibility of the announcement banner. Can be public or private.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Visibility { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AnnouncementBannerConfigurationUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AnnouncementBannerConfigurationUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A workflow transition rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AppWorkflowTransitionRule
    {
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RuleConfiguration Configuration { get; set; } = new RuleConfiguration();

        /// <summary>
        /// The ID of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the rule, as defined in the Connect or the Forge app descriptor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowTransition Transition { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AppWorkflowTransitionRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AppWorkflowTransitionRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The application the linked item is in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Application
    {
        /// <summary>
        /// The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The name-spaced type of the application, used by registered rendering apps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Application FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Application>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an application property.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApplicationProperty
    {
        /// <summary>
        /// The allowed values, if applicable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> AllowedValues { get; set; }

        /// <summary>
        /// The default value of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultValue { get; set; }

        /// <summary>
        /// The description of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        [Newtonsoft.Json.JsonProperty("example", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Example { get; set; }

        /// <summary>
        /// The ID of the application property. The ID and key are the same.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the application property. The ID and key are the same.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The data type of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The new value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApplicationProperty FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationProperty>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an application role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApplicationRole
    {
        /// <summary>
        /// The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> DefaultGroups { get; set; }

        /// <summary>
        /// The groups that are granted default access for this application role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultGroupsDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> DefaultGroupsDetails { get; set; }

        /// <summary>
        /// Deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defined", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Defined { get; set; }

        /// <summary>
        /// The groups associated with the application role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> GroupDetails { get; set; }

        /// <summary>
        /// The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("hasUnlimitedSeats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasUnlimitedSeats { get; set; }

        /// <summary>
        /// The key of the application role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The display name of the application role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The maximum count of users on your license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfSeats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfSeats { get; set; }

        /// <summary>
        /// Indicates if the application role belongs to Jira platform (`jira-core`).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("platform", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Platform { get; set; }

        /// <summary>
        /// The count of users remaining on your license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainingSeats", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RemainingSeats { get; set; }

        /// <summary>
        /// Determines whether this application role should be selected by default on user creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("selectedByDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SelectedByDefault { get; set; }

        /// <summary>
        /// The number of users counting against your license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int UserCount { get; set; }

        /// <summary>
        /// The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userCountDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserCountDescription { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ApplicationRole FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ApplicationRole>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ArchiveIssueAsyncRequest
    {
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArchiveIssueAsyncRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchiveIssueAsyncRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a filter for exporting archived issues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ArchivedIssuesFilterRequest
    {
        /// <summary>
        /// List archived issues archived by a specified account ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ArchivedBy { get; set; }

        [Newtonsoft.Json.JsonProperty("archivedDateRange", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DateRangeFilterRequest ArchivedDateRange { get; set; }

        /// <summary>
        /// List archived issues with a specified issue type ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypes { get; set; }

        /// <summary>
        /// List archived issues with a specified project key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Projects { get; set; }

        /// <summary>
        /// List archived issues where the reporter is a specified account ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Reporters { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ArchivedIssuesFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ArchivedIssuesFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a field configuration to issue type mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AssociateFieldConfigurationsWithIssueTypesRequest
    {
        /// <summary>
        /// Field configuration to issue type mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mappings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FieldConfigurationToIssueTypeMapping> Mappings { get; set; } = new System.Collections.ObjectModel.Collection<FieldConfigurationToIssueTypeMapping>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AssociateFieldConfigurationsWithIssueTypesRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssociateFieldConfigurationsWithIssueTypesRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Issue security scheme, project, and remapping details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AssociateSecuritySchemeWithProjectDetails
    {
        /// <summary>
        /// The list of scheme levels which should be remapped to new levels of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldToNewSecurityLevelMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<OldToNewSecurityLevelMappingsBean> OldToNewSecurityLevelMappings { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The ID of the issue security scheme. Providing null will clear the association with the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SchemeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AssociateSecuritySchemeWithProjectDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssociateSecuritySchemeWithProjectDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an item associated with the changed record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AssociatedItemBean
    {
        /// <summary>
        /// The ID of the associated record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the associated record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the associated parent record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentId { get; set; }

        /// <summary>
        /// The name of the associated parent record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parentName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ParentName { get; set; }

        /// <summary>
        /// The type of the associated record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TypeName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AssociatedItemBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AssociatedItemBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about an attachment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Attachment
    {
        /// <summary>
        /// Details of the user who added the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Author { get; set; }

        /// <summary>
        /// The content of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// The datetime the attachment was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The file name of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }

        /// <summary>
        /// The ID of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The MIME type of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        /// <summary>
        /// The URL of the attachment details response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The size of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Size { get; set; }

        /// <summary>
        /// The URL of a thumbnail representing the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Attachment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Attachment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AttachmentArchive
    {
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentArchiveEntry> Entries { get; set; }

        [Newtonsoft.Json.JsonProperty("moreAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MoreAvailable { get; set; }

        [Newtonsoft.Json.JsonProperty("totalEntryCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalEntryCount { get; set; }

        [Newtonsoft.Json.JsonProperty("totalNumberOfEntriesAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalNumberOfEntriesAvailable { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttachmentArchive FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentArchive>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AttachmentArchiveEntry
    {
        [Newtonsoft.Json.JsonProperty("abbreviatedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AbbreviatedName { get; set; }

        [Newtonsoft.Json.JsonProperty("entryIndex", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long EntryIndex { get; set; }

        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Size { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttachmentArchiveEntry FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentArchiveEntry>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AttachmentArchiveImpl
    {
        /// <summary>
        /// The list of the items included in the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentArchiveEntry> Entries { get; set; }

        /// <summary>
        /// The number of items in the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalEntryCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int TotalEntryCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttachmentArchiveImpl FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentArchiveImpl>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Metadata for an item in an attachment archive.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AttachmentArchiveItemReadable
    {
        /// <summary>
        /// The position of the item within the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Index { get; set; }

        /// <summary>
        /// The label for the archive item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// The MIME type of the archive item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; }

        /// <summary>
        /// The path of the archive item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Path { get; set; }

        /// <summary>
        /// The size of the archive item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Size { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttachmentArchiveItemReadable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentArchiveItemReadable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Metadata for an archive (for example a zip) and its contents.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AttachmentArchiveMetadataReadable
    {
        /// <summary>
        /// The list of the items included in the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AttachmentArchiveItemReadable> Entries { get; set; }

        /// <summary>
        /// The ID of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The MIME type of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mediaType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MediaType { get; set; }

        /// <summary>
        /// The name of the archive file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The number of items included in the archive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalEntryCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalEntryCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttachmentArchiveMetadataReadable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentArchiveMetadataReadable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Metadata for an issue attachment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AttachmentMetadata
    {
        /// <summary>
        /// Details of the user who attached the file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Author { get; set; }

        /// <summary>
        /// The URL of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("content", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Content { get; set; }

        /// <summary>
        /// The datetime the attachment was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The name of the attachment file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filename", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Filename { get; set; }

        /// <summary>
        /// The ID of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The MIME type of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mimeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MimeType { get; set; }

        /// <summary>
        /// Additional properties of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The URL of the attachment metadata details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The size of the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Size { get; set; }

        /// <summary>
        /// The URL of a thumbnail representing the attachment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("thumbnail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Thumbnail { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttachmentMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the instance's attachment settings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AttachmentSettings
    {
        /// <summary>
        /// Whether the ability to add attachments is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Enabled { get; set; }

        /// <summary>
        /// The maximum size of attachments permitted, in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uploadLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UploadLimit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AttachmentSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AttachmentSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An audit record.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AuditRecordBean
    {
        /// <summary>
        /// The list of items associated with the changed record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("associatedItems", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AssociatedItemBean> AssociatedItems { get; set; }

        /// <summary>
        /// Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("authorKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AuthorKey { get; set; }

        /// <summary>
        /// The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }

        /// <summary>
        /// The list of values changed in the record event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangedValueBean> ChangedValues { get; set; }

        /// <summary>
        /// The date and time on which the audit record was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The description of the audit record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The event the audit record originated from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("eventSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventSource { get; set; }

        /// <summary>
        /// The ID of the audit record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("objectItem", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssociatedItemBean ObjectItem { get; set; }

        /// <summary>
        /// The URL of the computer where the creation of the audit record was initiated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remoteAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemoteAddress { get; set; }

        /// <summary>
        /// The summary of the audit record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AuditRecordBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AuditRecordBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Container for a list of audit records.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AuditRecords
    {
        /// <summary>
        /// The requested or default limit on the number of audit items to be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Limit { get; set; }

        /// <summary>
        /// The number of audit items skipped before the first item in this list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("offset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Offset { get; set; }

        /// <summary>
        /// The list of audit items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("records", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AuditRecordBean> Records { get; set; }

        /// <summary>
        /// The total number of audit items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AuditRecords FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AuditRecords>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A field auto-complete suggestion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AutoCompleteSuggestion
    {
        /// <summary>
        /// The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The value of a suggested item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AutoCompleteSuggestion FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AutoCompleteSuggestion>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The results from a JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AutoCompleteSuggestions
    {
        /// <summary>
        /// The list of suggested item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AutoCompleteSuggestion> Results { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AutoCompleteSuggestions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AutoCompleteSuggestions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of the available dashboard gadget.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailableDashboardGadget
    {
        /// <summary>
        /// The module key of the gadget type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moduleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModuleKey { get; set; }

        /// <summary>
        /// The title of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// The URI of the gadget type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableDashboardGadget FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableDashboardGadget>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of available gadgets.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailableDashboardGadgetsResponse
    {
        /// <summary>
        /// The list of available gadgets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gadgets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AvailableDashboardGadget> Gadgets { get; set; } = new System.Collections.ObjectModel.Collection<AvailableDashboardGadget>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableDashboardGadgetsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableDashboardGadgetsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The Connect provided ecosystem rules available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailableWorkflowConnectRule
    {
        /// <summary>
        /// The add-on providing the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addonKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AddonKey { get; set; }

        /// <summary>
        /// The URL creation path segment defined in the Connect module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CreateUrl { get; set; }

        /// <summary>
        /// The rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL edit path segment defined in the Connect module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EditUrl { get; set; }

        /// <summary>
        /// The module providing the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moduleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModuleKey { get; set; }

        /// <summary>
        /// The rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The rule key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleKey { get; set; }

        /// <summary>
        /// The rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableWorkflowConnectRuleRuleType RuleType { get; set; }

        /// <summary>
        /// The URL view path segment defined in the Connect module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ViewUrl { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableWorkflowConnectRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableWorkflowConnectRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The Forge provided ecosystem rules available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailableWorkflowForgeRule
    {
        /// <summary>
        /// The rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique ARI of the forge rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The rule key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleKey { get; set; }

        /// <summary>
        /// The rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableWorkflowForgeRuleRuleType RuleType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableWorkflowForgeRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableWorkflowForgeRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The Atlassian provided system rules available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailableWorkflowSystemRule
    {
        /// <summary>
        /// The rule description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// List of rules that conflict with this one.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incompatibleRuleKeys", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IncompatibleRuleKeys { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Whether the rule can be added added to an initial transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAvailableForInitialTransition", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAvailableForInitialTransition { get; set; }

        /// <summary>
        /// Whether the rule is visible.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isVisible", Required = Newtonsoft.Json.Required.Always)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// The rule name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The rule key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleKey { get; set; }

        /// <summary>
        /// The rule type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public AvailableWorkflowSystemRuleRuleType RuleType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableWorkflowSystemRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableWorkflowSystemRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of available trigger types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailableWorkflowTriggerTypes
    {
        /// <summary>
        /// The description of the trigger rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the trigger rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type identifier of trigger rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableWorkflowTriggerTypes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableWorkflowTriggerTypes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The trigger rules available.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvailableWorkflowTriggers
    {
        /// <summary>
        /// The list of available trigger types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("availableTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AvailableWorkflowTriggerTypes> AvailableTypes { get; set; } = new System.Collections.ObjectModel.Collection<AvailableWorkflowTriggerTypes>();

        /// <summary>
        /// The rule key of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleKey { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvailableWorkflowTriggers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvailableWorkflowTriggers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an avatar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Avatar
    {
        /// <summary>
        /// The file name of the avatar icon. Returned for system avatars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fileName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileName { get; set; }

        /// <summary>
        /// The ID of the avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the avatar can be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDeletable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDeletable { get; set; }

        /// <summary>
        /// Whether the avatar is used in Jira. For example, shown as a project's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSelected", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSelected { get; set; }

        /// <summary>
        /// Whether the avatar is a system avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSystemAvatar", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSystemAvatar { get; set; }

        /// <summary>
        /// The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Owner { get; set; }

        /// <summary>
        /// The list of avatar icon URLs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("urls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Uri> Urls { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Avatar FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Avatar>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class AvatarUrlsBean
    {
        /// <summary>
        /// The URL of the item's 16x16 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("16x16", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _16x16 { get; set; }

        /// <summary>
        /// The URL of the item's 24x24 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("24x24", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _24x24 { get; set; }

        /// <summary>
        /// The URL of the item's 32x32 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("32x32", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _32x32 { get; set; }

        /// <summary>
        /// The URL of the item's 48x48 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("48x48", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _48x48 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static AvatarUrlsBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<AvatarUrlsBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about system and custom avatars.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Avatars
    {
        /// <summary>
        /// Custom avatars list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> Custom { get; set; }

        /// <summary>
        /// System avatars list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> System { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Avatars FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Avatars>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details for changing owners of shareable entities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkChangeOwnerDetails
    {
        /// <summary>
        /// Whether the name is fixed automatically if it's duplicated after changing owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autofixName", Required = Newtonsoft.Json.Required.Always)]
        public bool AutofixName { get; set; }

        /// <summary>
        /// The account id of the new owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newOwner", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewOwner { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkChangeOwnerDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkChangeOwnerDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the options to create for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkCustomFieldOptionCreateRequest
    {
        /// <summary>
        /// Details of options to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldOptionCreate> Options { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkCustomFieldOptionCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkCustomFieldOptionCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the options to update for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkCustomFieldOptionUpdateRequest
    {
        /// <summary>
        /// Details of the options to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldOptionUpdate> Options { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkCustomFieldOptionUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkCustomFieldOptionUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Errors of bulk edit action.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkEditActionError
    {
        /// <summary>
        /// The error messages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ErrorMessages { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Errors { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkEditActionError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkEditActionError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a request to bulk edit shareable entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkEditShareableEntityRequest
    {
        /// <summary>
        /// Allowed action for bulk edit shareable entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BulkEditShareableEntityRequestAction Action { get; set; }

        /// <summary>
        /// The details of change owner action.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changeOwnerDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BulkChangeOwnerDetails ChangeOwnerDetails { get; set; }

        /// <summary>
        /// The id list of shareable entities to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> EntityIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// Whether the actions are executed by users with Administer Jira global permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extendAdminPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ExtendAdminPermissions { get; set; }

        /// <summary>
        /// The permission details to be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionDetails PermissionDetails { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkEditShareableEntityRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkEditShareableEntityRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a request to bulk edit shareable entity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkEditShareableEntityResponse
    {
        /// <summary>
        /// Allowed action for bulk edit shareable entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("action", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BulkEditShareableEntityResponseAction Action { get; set; }

        /// <summary>
        /// The mapping dashboard id to errors if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityErrors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, BulkEditActionError> EntityErrors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkEditShareableEntityResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkEditShareableEntityResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A container for the watch status of a list of issues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkIssueIsWatching
    {
        /// <summary>
        /// The map of issue ID to boolean watch status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesIsWatching", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, bool> IssuesIsWatching { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkIssueIsWatching FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkIssueIsWatching>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Bulk issue property update request details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkIssuePropertyUpdateRequest
    {
        /// <summary>
        /// EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are `issue` and `user`. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }

        /// <summary>
        /// The bulk operation filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("filter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFilterForBulkPropertySet Filter { get; set; }

        /// <summary>
        /// The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkIssuePropertyUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkIssuePropertyUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkOperationErrorResult
    {
        [Newtonsoft.Json.JsonProperty("elementErrors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorCollection ElementErrors { get; set; }

        [Newtonsoft.Json.JsonProperty("failedElementNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FailedElementNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkOperationErrorResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkOperationErrorResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of global and project permissions granted to the user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkPermissionGrants
    {
        /// <summary>
        /// List of permissions granted to the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalPermissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> GlobalPermissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// List of project permissions and the projects and issues those permissions provide access to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectPermissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<BulkProjectPermissionGrants> ProjectPermissions { get; set; } = new System.Collections.ObjectModel.Collection<BulkProjectPermissionGrants>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkPermissionGrants FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkPermissionGrants>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of global permissions to look up and project permissions with associated projects and issues to look up.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkPermissionsRequestBean
    {
        /// <summary>
        /// The account ID of a user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// Global permissions to look up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GlobalPermissions { get; set; }

        /// <summary>
        /// Project permissions with associated projects and issues to look up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BulkProjectPermissions> ProjectPermissions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkPermissionsRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkPermissionsRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of project permissions and the projects and issues those permissions grant access to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkProjectPermissionGrants
    {
        /// <summary>
        /// IDs of the issues the user has the permission for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> Issues { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// A project permission,
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Permission { get; set; }

        /// <summary>
        /// IDs of the projects the user has the permission for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> Projects { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkProjectPermissionGrants FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkProjectPermissionGrants>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of project permissions and associated issues and projects to look up.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BulkProjectPermissions
    {
        /// <summary>
        /// List of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Issues { get; set; }

        /// <summary>
        /// List of project permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// List of project IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Projects { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static BulkProjectPermissions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<BulkProjectPermissions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A change item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangeDetails
    {
        /// <summary>
        /// The name of the field changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        /// <summary>
        /// The ID of the field changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldId { get; set; }

        /// <summary>
        /// The type of the field changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldtype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Fieldtype { get; set; }

        /// <summary>
        /// The details of the original value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string From { get; set; }

        /// <summary>
        /// The details of the original value as a string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fromString", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FromString { get; set; }

        /// <summary>
        /// The details of the new value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string To { get; set; }

        /// <summary>
        /// The details of the new value as a string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toString", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ToString { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChangeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The account ID of the new owner.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangeFilterOwner
    {
        /// <summary>
        /// The account ID of the new owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChangeFilterOwner FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangeFilterOwner>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of names changed in the record event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangedValueBean
    {
        /// <summary>
        /// The value of the field before the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangedFrom { get; set; }

        /// <summary>
        /// The value of the field after the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changedTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ChangedTo { get; set; }

        /// <summary>
        /// The name of the field changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChangedValueBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangedValueBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a changed worklog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangedWorklog
    {
        /// <summary>
        /// Details of properties associated with the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityProperty> Properties { get; set; }

        /// <summary>
        /// The datetime of the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updatedTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long UpdatedTime { get; set; }

        /// <summary>
        /// The ID of the worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worklogId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long WorklogId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChangedWorklog FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangedWorklog>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of changed worklogs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ChangedWorklogs
    {
        [Newtonsoft.Json.JsonProperty("lastPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LastPage { get; set; }

        /// <summary>
        /// The URL of the next list of changed worklogs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of this changed worklogs list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The datetime of the first worklog item in the list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("since", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Since { get; set; }

        /// <summary>
        /// The datetime of the last worklog item in the list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("until", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Until { get; set; }

        /// <summary>
        /// Changed worklog list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangedWorklog> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ChangedWorklogs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ChangedWorklogs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A log of changes made to issue fields. Changelogs related to workflow associations are currently being deprecated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Changelog
    {
        /// <summary>
        /// The user who made the change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Author { get; set; }

        /// <summary>
        /// The date on which the change took place.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The history metadata associated with the changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadata HistoryMetadata { get; set; }

        /// <summary>
        /// The ID of the changelog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The list of items changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ChangeDetails> Items { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Changelog FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Changelog>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue navigator column item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ColumnItem
    {
        /// <summary>
        /// The issue navigator column label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// The issue navigator column value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ColumnItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ColumnItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A comment.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Comment
    {
        /// <summary>
        /// The ID of the user who created the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Author { get; set; }

        /// <summary>
        /// The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Body { get; set; }

        /// <summary>
        /// The date and time at which the comment was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The ID of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jsdAuthorCanSeeRequest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JsdAuthorCanSeeRequest { get; set; }

        /// <summary>
        /// Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jsdPublic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool JsdPublic { get; set; }

        /// <summary>
        /// A list of comment properties. Optional on create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityProperty> Properties { get; set; }

        /// <summary>
        /// The rendered version of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderedBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RenderedBody { get; set; }

        /// <summary>
        /// The URL of the comment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The ID of the user who updated the comment last.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateAuthor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails UpdateAuthor { get; set; }

        /// <summary>
        /// The date and time at which the comment was updated last.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        /// <summary>
        /// The group or role to which this comment is visible. Optional on create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visibility Visibility { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Comment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Comment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Count of issues assigned to a component.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ComponentIssuesCount
    {
        /// <summary>
        /// The count of issues assigned to a component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueCount { get; set; }

        /// <summary>
        /// The URL for this count of issues for a component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ComponentIssuesCount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComponentIssuesCount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a component with a count of the issues it contains.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ComponentWithIssueCount
    {
        /// <summary>
        /// The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Assignee { get; set; }

        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:
        /// <br/>
        /// <br/> *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
        /// <br/> *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
        /// <br/> *  `UNASSIGNED` an assignee is not set for issues created with this component.
        /// <br/> *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComponentWithIssueCountAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// The description for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAssigneeTypeValid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAssigneeTypeValid { get; set; }

        /// <summary>
        /// Count of issues for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueCount { get; set; }

        /// <summary>
        /// The user details for the component's lead user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Lead { get; set; }

        /// <summary>
        /// The name for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The key of the project to which the component is assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// Not used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realAssignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User RealAssignee { get; set; }

        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
        /// <br/>
        /// <br/> *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
        /// <br/> *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
        /// <br/> *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
        /// <br/> *  `PROJECT_DEFAULT` when none of the preceding cases are true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realAssigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComponentWithIssueCountRealAssigneeType RealAssigneeType { get; set; }

        /// <summary>
        /// The URL for this count of the issues contained in the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ComponentWithIssueCount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ComponentWithIssueCount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, "A OR B AND C" is parsed as "(A OR B) AND C". See Setting the precedence of operators for more information about precedence in JQL queries.`
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CompoundClause
    {
        /// <summary>
        /// The list of nested clauses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clauses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JqlQueryClause> Clauses { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryClause>();

        /// <summary>
        /// The operator between the clauses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CompoundClauseOperator Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CompoundClause FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CompoundClause>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The conditions group associated with the transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConditionGroupConfiguration
    {
        /// <summary>
        /// The nested conditions of the condition group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConditionGroupConfiguration> ConditionGroups { get; set; }

        /// <summary>
        /// The rules for this condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Conditions { get; set; }

        /// <summary>
        /// Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionGroupConfigurationOperation Operation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConditionGroupConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConditionGroupConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The conditions group associated with the transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConditionGroupUpdate
    {
        /// <summary>
        /// The nested conditions of the condition group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditionGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConditionGroupUpdate> ConditionGroups { get; set; }

        /// <summary>
        /// The rules for this condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Conditions { get; set; }

        /// <summary>
        /// Determines how the conditions in the group are evaluated. Accepts either `ANY` or `ALL`. If `ANY` is used, at least one condition in the group must be true for the group to evaluate to true. If `ALL` is used, all conditions in the group must be true for the group to evaluate to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operation", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConditionGroupUpdateOperation Operation { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConditionGroupUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConditionGroupUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the configuration of Jira.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Configuration
    {
        /// <summary>
        /// Whether the ability to add attachments to issues is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attachmentsEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AttachmentsEnabled { get; set; }

        /// <summary>
        /// Whether the ability to link issues is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueLinkingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IssueLinkingEnabled { get; set; }

        /// <summary>
        /// Whether the ability to create subtasks for issues is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subTasksEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SubTasksEnabled { get; set; }

        /// <summary>
        /// The configuration of time tracking.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeTrackingConfiguration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeTrackingConfiguration TimeTrackingConfiguration { get; set; }

        /// <summary>
        /// Whether the ability to track time is enabled. This property is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeTrackingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool TimeTrackingEnabled { get; set; }

        /// <summary>
        /// Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unassignedIssuesAllowed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UnassignedIssuesAllowed { get; set; }

        /// <summary>
        /// Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("votingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool VotingEnabled { get; set; }

        /// <summary>
        /// Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchingEnabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool WatchingEnabled { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Configuration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Configuration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of custom field details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConnectCustomFieldValue
    {
        /// <summary>
        /// The type of custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("_type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ConnectCustomFieldValue_type _type { get; set; }

        /// <summary>
        /// The custom field ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldID", Required = Newtonsoft.Json.Required.Always)]
        public int FieldID { get; set; }

        /// <summary>
        /// The issue ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueID", Required = Newtonsoft.Json.Required.Always)]
        public int IssueID { get; set; }

        /// <summary>
        /// The value of number type custom field when `_type` is `NumberIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Number { get; set; }

        /// <summary>
        /// The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionID { get; set; }

        /// <summary>
        /// The value of richText type custom field when `_type` is `RichTextIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("richText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RichText { get; set; }

        /// <summary>
        /// The value of string type custom field when `_type` is `StringIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("string", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string String { get; set; }

        /// <summary>
        /// The value of of text custom field type when `_type` is `TextIssueField`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConnectCustomFieldValue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConnectCustomFieldValue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of updates for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConnectCustomFieldValues
    {
        /// <summary>
        /// The list of custom field update details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateValueList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ConnectCustomFieldValue> UpdateValueList { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConnectCustomFieldValues FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConnectCustomFieldValues>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A [Connect module](https://developer.atlassian.com/cloud/jira/platform/about-jira-modules/) in the same format as in the
    /// <br/>[app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConnectModule
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConnectModule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConnectModule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConnectModules
    {
        /// <summary>
        /// A list of app modules in the same format as the `modules` property in the
        /// <br/>[app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modules", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ConnectModule> Modules { get; set; } = new System.Collections.ObjectModel.Collection<ConnectModule>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConnectModules FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConnectModules>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A workflow transition rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConnectWorkflowTransitionRule
    {
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RuleConfiguration Configuration { get; set; } = new RuleConfiguration();

        /// <summary>
        /// The ID of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the rule, as defined in the Connect app descriptor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowTransition Transition { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConnectWorkflowTransitionRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConnectWorkflowTransitionRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of features on a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContainerForProjectFeatures
    {
        /// <summary>
        /// The project features.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("features", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectFeature> Features { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContainerForProjectFeatures FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContainerForProjectFeatures>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Container for a list of registered webhooks. Webhook details are returned in the same order as the request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContainerForRegisteredWebhooks
    {
        /// <summary>
        /// A list of registered webhooks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhookRegistrationResult", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RegisteredWebhook> WebhookRegistrationResult { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContainerForRegisteredWebhooks FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContainerForRegisteredWebhooks>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Container for a list of webhook IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContainerForWebhookIDs
    {
        /// <summary>
        /// A list of webhook IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhookIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> WebhookIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContainerForWebhookIDs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContainerForWebhookIDs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A container for a list of workflow schemes together with the projects they are associated with.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContainerOfWorkflowSchemeAssociations
    {
        /// <summary>
        /// A list of workflow schemes together with projects they are associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowSchemeAssociations> Values { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowSchemeAssociations>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContainerOfWorkflowSchemeAssociations FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContainerOfWorkflowSchemeAssociations>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Context
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Context FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Context>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The project and issue type mapping with a matching custom field context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContextForProjectAndIssueType
    {
        /// <summary>
        /// The ID of the custom field context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContextForProjectAndIssueType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContextForProjectAndIssueType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the contextual configuration for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ContextualConfiguration
    {
        /// <summary>
        /// The field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Configuration { get; set; }

        /// <summary>
        /// The ID of the field context the configuration is associated with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldContextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FieldContextId { get; set; }

        /// <summary>
        /// The ID of the configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The field value schema.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Schema { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ContextualConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ContextualConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The converted JQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ConvertedJQLQueries
    {
        /// <summary>
        /// List of queries containing user information that could not be mapped to an existing user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queriesWithUnknownUsers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JQLQueryWithUnknownUsers> QueriesWithUnknownUsers { get; set; }

        /// <summary>
        /// The list of converted query strings with account IDs in place of user identifiers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryStrings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QueryStrings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ConvertedJQLQueries FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConvertedJQLQueries>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a created custom field context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateCustomFieldContext
    {
        /// <summary>
        /// The description of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; }

        /// <summary>
        /// The name of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The list of project IDs associated with the context. If the list is empty, the context is global.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateCustomFieldContext FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateCustomFieldContext>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Issue security scheme and it's details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateIssueSecuritySchemeDetails
    {
        /// <summary>
        /// The description of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// The list of scheme levels which should be added to the security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeLevelBean> Levels { get; set; }

        /// <summary>
        /// The name of the issue security scheme. Must be unique (case-insensitive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateIssueSecuritySchemeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateIssueSecuritySchemeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateNotificationSchemeDetails
    {
        /// <summary>
        /// The description of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the notification scheme. Must be unique (case-insensitive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        /// <summary>
        /// The list of notifications which should be added to the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationSchemeEvents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationSchemeEventDetails> NotificationSchemeEvents { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateNotificationSchemeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateNotificationSchemeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreatePriorityDetails
    {
        /// <summary>
        /// The description of the priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreatePriorityDetailsIconUrl IconUrl { get; set; }

        /// <summary>
        /// The name of the priority. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Name { get; set; }

        /// <summary>
        /// The status color of the priority in 3-digit or 6-digit hexadecimal format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusColor", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusColor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreatePriorityDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatePriorityDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateProjectDetails
    {
        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateProjectDetailsAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// An integer value for the project's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CategoryId { get; set; }

        /// <summary>
        /// A brief description of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field configuration scheme for the project. Use the [Get all field configuration schemes](#api-rest-api-3-fieldconfigurationscheme-get) operation to get a list of field configuration scheme IDs. If you specify the field configuration scheme you cannot specify the project template key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FieldConfigurationScheme { get; set; }

        /// <summary>
        /// The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecurityScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueSecurityScheme { get; set; }

        /// <summary>
        /// The ID of the issue type scheme for the project. Use the [Get all issue type schemes](#api-rest-api-3-issuetypescheme-get) operation to get a list of issue type scheme IDs. If you specify the issue type scheme you cannot specify the project template key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueTypeScheme { get; set; }

        /// <summary>
        /// The ID of the issue type screen scheme for the project. Use the [Get all issue type screen schemes](#api-rest-api-3-issuetypescreenscheme-get) operation to get a list of issue type screen scheme IDs. If you specify the issue type screen scheme you cannot specify the project template key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueTypeScreenScheme { get; set; }

        /// <summary>
        /// Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>
        /// This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `leadAccountId`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lead { get; set; }

        /// <summary>
        /// The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Cannot be provided with `lead`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NotificationScheme { get; set; }

        /// <summary>
        /// The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PermissionScheme { get; set; }

        /// <summary>
        /// A predefined configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTemplateKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateProjectDetailsProjectTemplateKey ProjectTemplateKey { get; set; }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which defines the application-specific feature set. If you don't specify the project template you have to specify the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateProjectDetailsProjectTypeKey ProjectTypeKey { get; set; }

        /// <summary>
        /// A link to information about this project, such as project documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// The ID of the workflow scheme for the project. Use the [Get all workflow schemes](#api-rest-api-3-workflowscheme-get) operation to get a list of workflow scheme IDs. If you specify the workflow scheme you cannot specify the project template key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long WorkflowScheme { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateProjectDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateProjectDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateResolutionDetails
    {
        /// <summary>
        /// The description of the resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the resolution. Must be unique (case-insensitive).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateResolutionDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateResolutionDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateUiModificationDetails
    {
        /// <summary>
        /// List of contexts of the UI modification. The maximum number of contexts is 1000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contexts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UiModificationContextDetails> Contexts { get; set; }

        /// <summary>
        /// The data of the UI modification. The maximum size of the data is 50000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The description of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateUiModificationDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateUiModificationDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateUpdateRoleRequestBean
    {
        /// <summary>
        /// A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateUpdateRoleRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateUpdateRoleRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A workflow transition condition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateWorkflowCondition
    {
        /// <summary>
        /// The list of workflow conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateWorkflowCondition> Conditions { get; set; }

        /// <summary>
        /// EXPERIMENTAL. The configuration of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// The compound condition operator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateWorkflowConditionOperator Operator { get; set; }

        /// <summary>
        /// The type of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateWorkflowCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateWorkflowCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateWorkflowDetails
    {
        /// <summary>
        /// The description of the workflow. The maximum length is 1000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CreateWorkflowStatusDetails> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<CreateWorkflowStatusDetails>();

        /// <summary>
        /// The transitions of the workflow. For the request to be valid, these transitions must:
        /// <br/>
        /// <br/> *  include one *initial* transition.
        /// <br/> *  not use the same name for a *global* and *directed* transition.
        /// <br/> *  have a unique name for each *global* transition.
        /// <br/> *  have a unique 'to' status for each *global* transition.
        /// <br/> *  have unique names for each transition from a status.
        /// <br/> *  not have a 'from' status on *initial* and *global* transitions.
        /// <br/> *  have a 'from' status on *directed* transitions.
        /// <br/>
        /// <br/>All the transition statuses must be included in `statuses`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CreateWorkflowTransitionDetails> Transitions { get; set; } = new System.Collections.ObjectModel.Collection<CreateWorkflowTransitionDetails>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateWorkflowDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateWorkflowDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a transition status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateWorkflowStatusDetails
    {
        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The properties of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateWorkflowStatusDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateWorkflowStatusDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a workflow transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateWorkflowTransitionDetails
    {
        /// <summary>
        /// The description of the transition. The maximum length is 1000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> From { get; set; }

        /// <summary>
        /// The name of the transition. The maximum length is 60 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The rules of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateWorkflowTransitionRulesDetails Rules { get; set; }

        /// <summary>
        /// The screen of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateWorkflowTransitionScreenDetails Screen { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }

        /// <summary>
        /// The type of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CreateWorkflowTransitionDetailsType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateWorkflowTransitionDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateWorkflowTransitionDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A workflow transition rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateWorkflowTransitionRule
    {
        /// <summary>
        /// EXPERIMENTAL. The configuration of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// The type of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateWorkflowTransitionRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateWorkflowTransitionRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a workflow transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateWorkflowTransitionRulesDetails
    {
        /// <summary>
        /// The workflow conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CreateWorkflowCondition Conditions { get; set; }

        /// <summary>
        /// The workflow post functions.
        /// <br/>
        /// <br/>**Note:** The default post functions are always added to the *initial* transition, as in:
        /// <br/>
        /// <br/>    "postFunctions": [
        /// <br/>        {
        /// <br/>            "type": "IssueCreateFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "IssueReindexFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "FireIssueEventFunction",
        /// <br/>            "configuration": {
        /// <br/>                "event": {
        /// <br/>                    "id": "1",
        /// <br/>                    "name": "issue_created"
        /// <br/>                }
        /// <br/>            }
        /// <br/>        }
        /// <br/>    ]
        /// <br/>
        /// <br/>**Note:** The default post functions are always added to the *global* and *directed* transitions, as in:
        /// <br/>
        /// <br/>    "postFunctions": [
        /// <br/>        {
        /// <br/>            "type": "UpdateIssueStatusFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "CreateCommentFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "GenerateChangeHistoryFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "IssueReindexFunction"
        /// <br/>        },
        /// <br/>        {
        /// <br/>            "type": "FireIssueEventFunction",
        /// <br/>            "configuration": {
        /// <br/>                "event": {
        /// <br/>                    "id": "13",
        /// <br/>                    "name": "issue_generic"
        /// <br/>                }
        /// <br/>            }
        /// <br/>        }
        /// <br/>    ]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postFunctions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateWorkflowTransitionRule> PostFunctions { get; set; }

        /// <summary>
        /// The workflow validators.
        /// <br/>
        /// <br/>**Note:** The default permission validator is always added to the *initial* transition, as in:
        /// <br/>
        /// <br/>    "validators": [
        /// <br/>        {
        /// <br/>            "type": "PermissionValidator",
        /// <br/>            "configuration": {
        /// <br/>                "permissionKey": "CREATE_ISSUES"
        /// <br/>            }
        /// <br/>        }
        /// <br/>    ]
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreateWorkflowTransitionRule> Validators { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateWorkflowTransitionRulesDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateWorkflowTransitionRulesDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a transition screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreateWorkflowTransitionScreenDetails
    {
        /// <summary>
        /// The ID of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreateWorkflowTransitionScreenDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreateWorkflowTransitionScreenDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a created issue or subtask.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreatedIssue
    {
        /// <summary>
        /// The ID of the created issue or subtask.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the created issue or subtask.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the created issue or subtask.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The response code and messages related to any requested transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NestedResponse Transition { get; set; }

        /// <summary>
        /// The response code and messages related to any requested watchers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NestedResponse Watchers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreatedIssue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatedIssue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the issues created and the errors for requests that failed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CreatedIssues
    {
        /// <summary>
        /// Error details for failed issue creation requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<BulkOperationErrorResult> Errors { get; set; }

        /// <summary>
        /// Details of the issues created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreatedIssue> Issues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CreatedIssues FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CreatedIssues>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomContextVariable
    {
        /// <summary>
        /// Type of custom context variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomContextVariable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomContextVariable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of configurations for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldConfigurations
    {
        /// <summary>
        /// The list of custom field configuration details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configurations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(1000)]
        public System.Collections.Generic.ICollection<ContextualConfiguration> Configurations { get; set; } = new System.Collections.ObjectModel.Collection<ContextualConfiguration>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldConfigurations FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldConfigurations>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a custom field context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContext
    {
        /// <summary>
        /// The description of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the context apply to all issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnyIssueType", Required = Newtonsoft.Json.Required.Always)]
        public bool IsAnyIssueType { get; set; }

        /// <summary>
        /// Whether the context is global.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isGlobalContext", Required = Newtonsoft.Json.Required.Always)]
        public bool IsGlobalContext { get; set; }

        /// <summary>
        /// The name of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContext FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContext>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a cascading select custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValue
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a Date custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueDate
    {
        /// <summary>
        /// The default date in ISO format. Ignored if `useCurrent` is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Date { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Whether to use the current date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseCurrent { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueDate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueDate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a date time custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueDateTime
    {
        /// <summary>
        /// The default date-time in ISO format. Ignored if `useCurrent` is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Whether to use the current date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseCurrent { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueDateTime FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueDateTime>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Default value for a float (number) custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueFloat
    {
        /// <summary>
        /// The default floating-point number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public double Number { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueFloat FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueFloat>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a Forge date time custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeDateTimeField
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The default date-time in ISO format. Ignored if `useCurrent` is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DateTime { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// Whether to use the current date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("useCurrent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UseCurrent { get; set; } = false;

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeDateTimeField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeDateTimeField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a Forge group custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeGroupField
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the the default group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeGroupField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeGroupField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a Forge collection of groups custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeMultiGroupField
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The IDs of the default groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeMultiGroupField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeMultiGroupField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default text for a Forge collection of strings custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeMultiStringField
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// List of string values. The maximum length for a value is 254 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeMultiStringField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeMultiStringField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defaults for a Forge collection of users custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeMultiUserField
    {
        /// <summary>
        /// The IDs of the default users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> AccountIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeMultiUserField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeMultiUserField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Default value for a Forge number custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeNumberField
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The default floating-point number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.Always)]
        public double Number { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeNumberField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeNumberField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a Forge object custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeObjectField
    {
        /// <summary>
        /// The default JSON object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Object { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeObjectField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeObjectField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default text for a Forge string custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeStringField
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The default text. The maximum length is 254 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeStringField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeStringField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defaults for a Forge user custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueForgeUserField
    {
        /// <summary>
        /// The ID of the default user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("userFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserFilter UserFilter { get; set; } = new UserFilter();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueForgeUserField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueForgeUserField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Default value for a labels custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueLabels
    {
        /// <summary>
        /// The default labels value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Labels { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueLabels FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueLabels>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a User Picker (multiple) custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueMultiUserPicker
    {
        /// <summary>
        /// The IDs of the default users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> AccountIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueMultiUserPicker FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueMultiUserPicker>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a multiple group picker custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueMultipleGroupPicker
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The IDs of the default groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueMultipleGroupPicker FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueMultipleGroupPicker>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a multi-select custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueMultipleOption
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The list of IDs of the default options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> OptionIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueMultipleOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueMultipleOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a multiple version picker custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueMultipleVersionPicker
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// The IDs of the default versions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> VersionIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueMultipleVersionPicker FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueMultipleVersionPicker>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a project custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueProject
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the default project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueProject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueProject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default text for a read only custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueReadOnly
    {
        /// <summary>
        /// The default text. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueReadOnly FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueReadOnly>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a group picker custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueSingleGroupPicker
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the the default group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string GroupId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueSingleGroupPicker FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueSingleGroupPicker>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a single select custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueSingleOption
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the default option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OptionId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueSingleOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueSingleOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a version picker custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueSingleVersionPicker
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// The ID of the default version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string VersionId { get; set; }

        /// <summary>
        /// The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are `"releasedFirst"` and `"unreleasedFirst"`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionOrder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VersionOrder { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueSingleVersionPicker FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueSingleVersionPicker>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default text for a text area custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueTextArea
    {
        /// <summary>
        /// The default text. The maximum length is 32767 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueTextArea FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueTextArea>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default text for a text custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueTextField
    {
        /// <summary>
        /// The default text. The maximum length is 254 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueTextField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueTextField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The default value for a URL custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueURL
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// The default URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueURL FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueURL>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Default values to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextDefaultValueUpdate
    {
        [Newtonsoft.Json.JsonProperty("defaultValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DefaultValues> DefaultValues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextDefaultValueUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextDefaultValueUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the custom field options for a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextOption
    {
        /// <summary>
        /// Whether the option is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Disabled { get; set; }

        /// <summary>
        /// The ID of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// For cascading options, the ID of the custom field option containing the cascading option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionId { get; set; }

        /// <summary>
        /// The value of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a context to project association.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextProjectMapping
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// Whether context is global.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isGlobalContext", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsGlobalContext { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextProjectMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextProjectMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Defaults for a User Picker (single) custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextSingleUserPickerDefaults
    {
        /// <summary>
        /// The ID of the default user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("userFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public UserFilter UserFilter { get; set; } = new UserFilter();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextSingleUserPickerDefaults FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextSingleUserPickerDefaults>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a custom field context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldContextUpdateDetails
    {
        /// <summary>
        /// The description of the custom field context. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the custom field context. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldContextUpdateDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldContextUpdateDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of custom field options for a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldCreatedContextOptionsList
    {
        /// <summary>
        /// The created custom field options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContextOption> Options { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldCreatedContextOptionsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldCreatedContextOptionsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldDefinitionJsonBean
    {
        /// <summary>
        /// The description of the custom field, which is displayed in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the custom field, which is displayed in Jira. This is not the unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.  
        /// <br/>The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):
        /// <br/>
        /// <br/> *  `cascadingselect`: `cascadingselectsearcher`
        /// <br/> *  `datepicker`: `daterange`
        /// <br/> *  `datetime`: `datetimerange`
        /// <br/> *  `float`: `exactnumber` or `numberrange`
        /// <br/> *  `grouppicker`: `grouppickersearcher`
        /// <br/> *  `importid`: `exactnumber` or `numberrange`
        /// <br/> *  `labels`: `labelsearcher`
        /// <br/> *  `multicheckboxes`: `multiselectsearcher`
        /// <br/> *  `multigrouppicker`: `multiselectsearcher`
        /// <br/> *  `multiselect`: `multiselectsearcher`
        /// <br/> *  `multiuserpicker`: `userpickergroupsearcher`
        /// <br/> *  `multiversion`: `versionsearcher`
        /// <br/> *  `project`: `projectsearcher`
        /// <br/> *  `radiobuttons`: `multiselectsearcher`
        /// <br/> *  `readonlyfield`: `textsearcher`
        /// <br/> *  `select`: `multiselectsearcher`
        /// <br/> *  `textarea`: `textsearcher`
        /// <br/> *  `textfield`: `textsearcher`
        /// <br/> *  `url`: `exacttextsearcher`
        /// <br/> *  `userpicker`: `userpickergroupsearcher`
        /// <br/> *  `version`: `versionsearcher`
        /// <br/>
        /// <br/>If no searcher is provided, the field isn't searchable. However, [Forge custom fields](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-) have a searcher set automatically, so are always searchable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public CustomFieldDefinitionJsonBeanSearcherKey SearcherKey { get; set; }

        /// <summary>
        /// The type of the custom field. These built-in custom field types are available:
        /// <br/>
        /// <br/> *  `cascadingselect`: Enables values to be selected from two levels of select lists (value: `com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect`)
        /// <br/> *  `datepicker`: Stores a date using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:datepicker`)
        /// <br/> *  `datetime`: Stores a date with a time component (value: `com.atlassian.jira.plugin.system.customfieldtypes:datetime`)
        /// <br/> *  `float`: Stores and validates a numeric (floating point) input (value: `com.atlassian.jira.plugin.system.customfieldtypes:float`)
        /// <br/> *  `grouppicker`: Stores a user group using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:grouppicker`)
        /// <br/> *  `importid`: A read-only field that stores the ID the issue had in the system it was imported from (value: `com.atlassian.jira.plugin.system.customfieldtypes:importid`)
        /// <br/> *  `labels`: Stores labels (value: `com.atlassian.jira.plugin.system.customfieldtypes:labels`)
        /// <br/> *  `multicheckboxes`: Stores multiple values using checkboxes (value: ``)
        /// <br/> *  `multigrouppicker`: Stores multiple user groups using a picker control (value: ``)
        /// <br/> *  `multiselect`: Stores multiple values using a select list (value: `com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes`)
        /// <br/> *  `multiuserpicker`: Stores multiple users using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker`)
        /// <br/> *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:multiversion`)
        /// <br/> *  `project`: Stores a project from a list of projects that the user is permitted to view (value: `com.atlassian.jira.plugin.system.customfieldtypes:project`)
        /// <br/> *  `radiobuttons`: Stores a value using radio buttons (value: `com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons`)
        /// <br/> *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API (value: `com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield`)
        /// <br/> *  `select`: Stores a value from a configurable list of options (value: `com.atlassian.jira.plugin.system.customfieldtypes:select`)
        /// <br/> *  `textarea`: Stores a long text string using a multiline text area (value: `com.atlassian.jira.plugin.system.customfieldtypes:textarea`)
        /// <br/> *  `textfield`: Stores a text string using a single-line text box (value: `com.atlassian.jira.plugin.system.customfieldtypes:textfield`)
        /// <br/> *  `url`: Stores a URL (value: `com.atlassian.jira.plugin.system.customfieldtypes:url`)
        /// <br/> *  `userpicker`: Stores a user using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:userpicker`)
        /// <br/> *  `version`: Stores a version using a picker control (value: `com.atlassian.jira.plugin.system.customfieldtypes:version`)
        /// <br/>
        /// <br/>To create a field based on a [Forge custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#jira-custom-field-type--beta-), use the ID of the Forge custom field type as the value. For example, `ari:cloud:ecosystem::extension/e62f20a2-4b61-4dbe-bfb9-9a88b5e3ac84/548c5df1-24aa-4f7c-bbbb-3038d947cb05/static/my-cf-type-key`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldDefinitionJsonBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldDefinitionJsonBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a custom option for a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldOption
    {
        /// <summary>
        /// The URL of these custom field option details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The value of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a custom field option to create.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldOptionCreate
    {
        /// <summary>
        /// Whether the option is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        /// <summary>
        /// For cascading options, the ID of the custom field object containing the cascading option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("optionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OptionId { get; set; }

        /// <summary>
        /// The value of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldOptionCreate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldOptionCreate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a custom field option for a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldOptionUpdate
    {
        /// <summary>
        /// Whether the option is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        /// <summary>
        /// The ID of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The value of the custom field option.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldOptionUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldOptionUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the replacement for a deleted version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldReplacement
    {
        /// <summary>
        /// The ID of the custom field in which to replace the version number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomFieldId { get; set; }

        /// <summary>
        /// The version number to use as a replacement for the deleted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MoveTo { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldReplacement FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldReplacement>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of custom field options for a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldUpdatedContextOptionsList
    {
        /// <summary>
        /// The updated custom field options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("options", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldOptionUpdate> Options { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldUpdatedContextOptionsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldUpdatedContextOptionsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of issue IDs and the value to update a custom field to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldValueUpdate
    {
        /// <summary>
        /// The list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> IssueIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
        /// <br/>
        /// <br/> *  `string` the value must be a string.
        /// <br/> *  `number` the value must be a number.
        /// <br/> *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
        /// <br/> *  `user` the value must be an object that contains the `accountId` field.
        /// <br/> *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
        /// <br/>
        /// <br/>A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldValueUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldValueUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of updates for a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CustomFieldValueUpdateDetails
    {
        /// <summary>
        /// The list of custom field update details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldValueUpdate> Updates { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static CustomFieldValueUpdateDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<CustomFieldValueUpdateDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a dashboard.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Dashboard
    {
        /// <summary>
        /// The automatic refresh interval for the dashboard in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automaticRefreshMs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AutomaticRefreshMs { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The details of any edit share permissions for the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; }

        /// <summary>
        /// The ID of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the dashboard is selected as a favorite by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isFavourite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsFavourite { get; set; }

        /// <summary>
        /// Whether the current user has permission to edit the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWritable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWritable { get; set; }

        /// <summary>
        /// The name of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The owner of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBean Owner { get; set; }

        /// <summary>
        /// The number of users who have this dashboard as a favorite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("popularity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Popularity { get; set; }

        /// <summary>
        /// The rank of this dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rank", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rank { get; set; }

        /// <summary>
        /// The URL of these dashboard details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The details of any view share permissions for the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; }

        /// <summary>
        /// Whether the current dashboard is system dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemDashboard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SystemDashboard { get; set; }

        /// <summary>
        /// The URL of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string View { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Dashboard FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Dashboard>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a dashboard.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DashboardDetails
    {
        /// <summary>
        /// The description of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The edit permissions for the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; } = new System.Collections.ObjectModel.Collection<SharePermission>();

        /// <summary>
        /// The name of the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The share permissions for the dashboard.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; } = new System.Collections.ObjectModel.Collection<SharePermission>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DashboardDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DashboardDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a gadget.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DashboardGadget
    {
        /// <summary>
        /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DashboardGadgetColor Color { get; set; }

        /// <summary>
        /// The ID of the gadget instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The module key of the gadget type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moduleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModuleKey { get; set; }

        /// <summary>
        /// The position of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DashboardGadgetPosition Position { get; set; } = new DashboardGadgetPosition();

        /// <summary>
        /// The title of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// The URI of the gadget type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DashboardGadget FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DashboardGadget>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a gadget position.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DashboardGadgetPosition
    {
        [Newtonsoft.Json.JsonProperty("The column position of the gadget.", Required = Newtonsoft.Json.Required.Always)]
        public int The_column_position_of_the_gadget { get; set; }

        [Newtonsoft.Json.JsonProperty("The row position of the gadget.", Required = Newtonsoft.Json.Required.Always)]
        public int The_row_position_of_the_gadget { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DashboardGadgetPosition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DashboardGadgetPosition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of gadgets on the dashboard.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DashboardGadgetResponse
    {
        /// <summary>
        /// The list of gadgets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("gadgets", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DashboardGadget> Gadgets { get; set; } = new System.Collections.ObjectModel.Collection<DashboardGadget>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DashboardGadgetResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DashboardGadgetResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the settings for a dashboard gadget.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DashboardGadgetSettings
    {
        /// <summary>
        /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ignoreUriAndModuleKeyValidation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IgnoreUriAndModuleKeyValidation { get; set; }

        /// <summary>
        /// The module key of the gadget type. Can't be provided with `uri`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moduleKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ModuleKey { get; set; }

        /// <summary>
        /// The position of the gadget. When the gadget is placed into the position, other gadgets in the same column are moved down to accommodate it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DashboardGadgetPosition Position { get; set; }

        /// <summary>
        /// The title of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The URI of the gadget type. Can't be provided with `moduleKey`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Uri { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DashboardGadgetSettings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DashboardGadgetSettings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of the gadget to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DashboardGadgetUpdateRequest
    {
        /// <summary>
        /// The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// The position of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DashboardGadgetPosition Position { get; set; }

        /// <summary>
        /// The title of the gadget.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DashboardGadgetUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DashboardGadgetUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List issues archived within a specified date range.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DateRangeFilterRequest
    {
        /// <summary>
        /// List issues archived after a specified date, passed in the YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateAfter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DateAfter { get; set; }

        /// <summary>
        /// List issues archived before a specified date provided in the YYYY-MM-DD format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dateBefore", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DateBefore { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DateRangeFilterRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DateRangeFilterRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of scheme and new default level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DefaultLevelValue
    {
        /// <summary>
        /// The ID of the issue security level to set as default for the specified scheme. Providing null will reset the default level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLevelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string DefaultLevelId { get; set; }

        /// <summary>
        /// The ID of the issue security scheme to set default level for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueSecuritySchemeId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DefaultLevelValue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultLevelValue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the scope of the default sharing for new filters and dashboards.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DefaultShareScope
    {
        /// <summary>
        /// The scope of the default sharing for new filters and dashboards:
        /// <br/>
        /// <br/> *  `AUTHENTICATED` Shared with all logged-in users.
        /// <br/> *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
        /// <br/> *  `PRIVATE` Not shared with any users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public DefaultShareScopeScope Scope { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DefaultShareScope FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultShareScope>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the default workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DefaultWorkflow
    {
        /// <summary>
        /// Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateDraftIfNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// The name of the workflow to set as the default workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Workflow { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DefaultWorkflow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultWorkflow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DeleteAndReplaceVersionBean
    {
        /// <summary>
        /// An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldReplacementList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldReplacement> CustomFieldReplacementList { get; set; }

        /// <summary>
        /// The ID of the version to update `affectedVersion` to when the field contains the deleted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveAffectedIssuesTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MoveAffectedIssuesTo { get; set; }

        /// <summary>
        /// The ID of the version to update `fixVersion` to when the field contains the deleted version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveFixIssuesTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long MoveFixIssuesTo { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeleteAndReplaceVersionBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeleteAndReplaceVersionBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DeprecatedWorkflow
    {
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The datetime the workflow was last modified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedDate { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedUser { get; set; }

        /// <summary>
        /// The account ID of the user that last modified the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedUserAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModifiedUserAccountId { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope where this workflow applies
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The number of steps included in the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Steps { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DeprecatedWorkflow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DeprecatedWorkflow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The version details of the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DocumentVersion
    {
        /// <summary>
        /// The version UUID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The version number.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long VersionNumber { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static DocumentVersion FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<DocumentVersion>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EntityProperty
    {
        /// <summary>
        /// The key of the property. Required on create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The value of the property. Required on create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EntityProperty FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EntityProperty>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EntityPropertyDetails
    {
        /// <summary>
        /// The entity property ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.Always)]
        public double EntityId { get; set; }

        /// <summary>
        /// The entity property key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>
        /// The new value of the entity property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EntityPropertyDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EntityPropertyDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Error
    {
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Count { get; set; }

        [Newtonsoft.Json.JsonProperty("issueIdsOrKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueIdsOrKeys { get; set; }

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Error FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Error>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Error messages from an operation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorCollection
    {
        /// <summary>
        /// The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ErrorMessages { get; set; }

        /// <summary>
        /// The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Errors { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorCollection FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorCollection>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorMessage
    {
        /// <summary>
        /// The error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ErrorMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ErrorMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Errors
    {
        [Newtonsoft.Json.JsonProperty("issueIsSubtask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error IssueIsSubtask { get; set; }

        [Newtonsoft.Json.JsonProperty("issuesInArchivedProjects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error IssuesInArchivedProjects { get; set; }

        [Newtonsoft.Json.JsonProperty("issuesInUnlicensedProjects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error IssuesInUnlicensedProjects { get; set; }

        [Newtonsoft.Json.JsonProperty("issuesNotFound", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Error IssuesNotFound { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Errors FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Errors>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a notification associated with an event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class EventNotification
    {
        /// <summary>
        /// The email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Expand options that include additional event notification details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The custom user or group field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldDetails Field { get; set; }

        /// <summary>
        /// The specified group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupName Group { get; set; }

        /// <summary>
        /// The ID of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Identifies the recipients of the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public EventNotificationNotificationType NotificationType { get; set; }

        /// <summary>
        /// As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:
        /// <br/>
        /// <br/> *  `User` The `parameter` is the user account ID.
        /// <br/> *  `Group` The `parameter` is the group name.
        /// <br/> *  `ProjectRole` The `parameter` is the project role ID.
        /// <br/> *  `UserCustomField` The `parameter` is the ID of the custom field.
        /// <br/> *  `GroupCustomField` The `parameter` is the ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// The specified project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRole ProjectRole { get; set; }

        /// <summary>
        /// The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:
        /// <br/>
        /// <br/> *  `User`, `recipient` is the user account ID.
        /// <br/> *  `Group`, `recipient` is the group ID.
        /// <br/> *  `ProjectRole`, `recipient` is the project role ID.
        /// <br/> *  `UserCustomField`, `recipient` is the ID of the custom field.
        /// <br/> *  `GroupCustomField`, `recipient` is the ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("recipient", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Recipient { get; set; }

        /// <summary>
        /// The specified user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails User { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static EventNotification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<EventNotification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The response for status request for a running/completed export task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ExportArchivedIssuesTaskProgressResponse
    {
        [Newtonsoft.Json.JsonProperty("fileUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FileUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Payload { get; set; }

        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Progress { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }

        [Newtonsoft.Json.JsonProperty("submittedTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset SubmittedTime { get; set; }

        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ExportArchivedIssuesTaskProgressResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ExportArchivedIssuesTaskProgressResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a failed webhook.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FailedWebhook
    {
        /// <summary>
        /// The webhook body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("failureTime", Required = Newtonsoft.Json.Required.Always)]
        public long FailureTime { get; set; }

        /// <summary>
        /// The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The original webhook destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FailedWebhook FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FailedWebhook>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of failed webhooks.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FailedWebhooks
    {
        /// <summary>
        /// The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.Always)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Next { get; set; }

        /// <summary>
        /// The list of webhooks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FailedWebhook> Values { get; set; } = new System.Collections.ObjectModel.Collection<FailedWebhook>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FailedWebhooks FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FailedWebhooks>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Field
    {
        /// <summary>
        /// Number of contexts where the field is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ContextsCount { get; set; }

        /// <summary>
        /// The description of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the field is locked.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Whether the field is shown on screen or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isUnscreenable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsUnscreenable { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("lastUsed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldLastUsed LastUsed { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Number of projects where the field is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectsCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectsCount { get; set; }

        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JsonTypeBean Schema { get; set; } = new JsonTypeBean();

        /// <summary>
        /// Number of screens where the field is used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screensCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ScreensCount { get; set; }

        /// <summary>
        /// The searcher key of the field. Returned for custom fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SearcherKey { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Field FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Field>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A clause that asserts whether a field was changed. For example, `status CHANGED AFTER startOfMonth(-1M)`.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldChangedClause
    {
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JqlQueryField Field { get; set; } = new JqlQueryField();

        /// <summary>
        /// The operator applied to the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldChangedClauseOperator Operator { get; set; }

        /// <summary>
        /// The list of time predicates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("predicates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JqlQueryClauseTimePredicate> Predicates { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryClauseTimePredicate>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldChangedClause FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldChangedClause>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a field configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfiguration
    {
        /// <summary>
        /// The description of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// Whether the field configuration is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a field configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfigurationDetails
    {
        /// <summary>
        /// The description of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the field configuration. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfigurationDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfigurationDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field configuration for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfigurationIssueTypeItem
    {
        /// <summary>
        /// The ID of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FieldConfigurationId { get; set; }

        /// <summary>
        /// The ID of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationSchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FieldConfigurationSchemeId { get; set; }

        /// <summary>
        /// The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfigurationIssueTypeItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfigurationIssueTypeItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A field within a field configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfigurationItem
    {
        /// <summary>
        /// The description of the field within the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field within the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the field is hidden in the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isHidden", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Whether the field is required in the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsRequired { get; set; }

        /// <summary>
        /// The renderer type for the field within the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Renderer { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfigurationItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfigurationItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of field configuration items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfigurationItemsDetails
    {
        /// <summary>
        /// Details of fields in a field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationItems", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<FieldConfigurationItem> FieldConfigurationItems { get; set; } = new System.Collections.ObjectModel.Collection<FieldConfigurationItem>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfigurationItemsDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfigurationItemsDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a field configuration scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfigurationScheme
    {
        /// <summary>
        /// The description of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfigurationScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfigurationScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Associated field configuration scheme and project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfigurationSchemeProjectAssociation
    {
        /// <summary>
        /// The ID of the field configuration scheme. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldConfigurationSchemeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfigurationSchemeProjectAssociation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfigurationSchemeProjectAssociation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Project list with assigned field configuration schema.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfigurationSchemeProjects
    {
        [Newtonsoft.Json.JsonProperty("fieldConfigurationScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FieldConfigurationScheme FieldConfigurationScheme { get; set; }

        /// <summary>
        /// The IDs of projects using the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfigurationSchemeProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfigurationSchemeProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The field configuration to issue type mapping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldConfigurationToIssueTypeMapping
    {
        /// <summary>
        /// The ID of the field configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldConfigurationId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string FieldConfigurationId { get; set; }

        /// <summary>
        /// The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration. An issue type can be included only once in a request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldConfigurationToIssueTypeMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldConfigurationToIssueTypeMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldDetails
    {
        /// <summary>
        /// The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clauseNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ClauseNames { get; set; }

        /// <summary>
        /// Whether the field is a custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Custom { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the field can be used as a column on the issue navigator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("navigable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Navigable { get; set; }

        /// <summary>
        /// Whether the content of the field can be used to order lists.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Orderable { get; set; }

        /// <summary>
        /// The data schema for the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JsonTypeBean Schema { get; set; }

        /// <summary>
        /// The scope of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// Whether the content of the field can be searched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Searchable { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Information about the most recent use of a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldLastUsed
    {
        /// <summary>
        /// Last used value type:
        /// <br/>
        /// <br/> *  *TRACKED*: field is tracked and a last used date is available.
        /// <br/> *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
        /// <br/> *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldLastUsedType Type { get; set; }

        /// <summary>
        /// The date when the value of the field last changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldLastUsed FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldLastUsed>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The metadata describing an issue field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldMetadata
    {
        /// <summary>
        /// The list of values allowed in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allowedValues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> AllowedValues { get; set; }

        /// <summary>
        /// The URL that can be used to automatically complete the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("autoCompleteUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AutoCompleteUrl { get; set; }

        /// <summary>
        /// The configuration properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// The default value of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object DefaultValue { get; set; }

        /// <summary>
        /// Whether the field has a default value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasDefaultValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasDefaultValue { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The list of operations that can be performed on the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Operations { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Whether the field is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("required", Required = Newtonsoft.Json.Required.Always)]
        public bool Required { get; set; }

        /// <summary>
        /// The data type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JsonTypeBean Schema { get; set; } = new JsonTypeBean();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a field that can be used in advanced searches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldReferenceData
    {
        /// <summary>
        /// Whether the field provide auto-complete suggestions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldReferenceDataAuto Auto { get; set; }

        /// <summary>
        /// If the item is a custom field, the ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cfid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Cfid { get; set; }

        /// <summary>
        /// Whether this field has been deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldReferenceDataDeprecated Deprecated { get; set; }

        /// <summary>
        /// The searcher key of the field, only passed when the field is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecatedSearcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeprecatedSearcherKey { get; set; }

        /// <summary>
        /// The display name contains the following:
        /// <br/>
        /// <br/> *  for system fields, the field name. For example, `Summary`.
        /// <br/> *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
        /// <br/> *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The valid search operators for the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Operators { get; set; }

        /// <summary>
        /// Whether the field can be used in a query's `ORDER BY` clause.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("orderable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldReferenceDataOrderable Orderable { get; set; }

        /// <summary>
        /// Whether the content of this field can be searched.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldReferenceDataSearchable Searchable { get; set; }

        /// <summary>
        /// The data types of items in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Types { get; set; }

        /// <summary>
        /// The field identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldReferenceData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldReferenceData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an operation to perform on a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldUpdateOperation
    {
        /// <summary>
        /// The value to add to the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("add", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Add { get; set; }

        /// <summary>
        /// The field value to copy from another issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("copy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Copy { get; set; }

        /// <summary>
        /// The value to edit in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Edit { get; set; }

        /// <summary>
        /// The value to removed from the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remove", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Remove { get; set; }

        /// <summary>
        /// The value to set in the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("set", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Set { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldUpdateOperation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldUpdateOperation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A clause that asserts the current value of a field. For example, `summary ~ test`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldValueClause
    {
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JqlQueryField Field { get; set; } = new JqlQueryField();

        [Newtonsoft.Json.JsonProperty("operand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JqlQueryClauseOperand Operand { get; set; } = new JqlQueryClauseOperand();

        /// <summary>
        /// The operator between the field and operand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldValueClauseOperator Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldValueClause FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldValueClause>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FieldWasClause
    {
        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JqlQueryField Field { get; set; } = new JqlQueryField();

        [Newtonsoft.Json.JsonProperty("operand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JqlQueryClauseOperand Operand { get; set; } = new JqlQueryClauseOperand();

        /// <summary>
        /// The operator between the field and operand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FieldWasClauseOperator Operator { get; set; }

        /// <summary>
        /// The list of time predicates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("predicates", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JqlQueryClauseTimePredicate> Predicates { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryClauseTimePredicate>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FieldWasClause FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FieldWasClause>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Key fields from the linked issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Fields
    {
        /// <summary>
        /// The assignee of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Assignee { get; set; }

        /// <summary>
        /// The type of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTypeDetails IssueType { get; set; }

        /// <summary>
        /// The type of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuetype", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTypeDetails Issuetype { get; set; }

        /// <summary>
        /// The priority of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("priority", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Priority Priority { get; set; }

        /// <summary>
        /// The status of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusDetails Status { get; set; }

        /// <summary>
        /// The summary description of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// The time tracking of the linked issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timetracking", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TimeTrackingDetails Timetracking { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Fields FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Fields>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Filter
    {
        /// <summary>
        /// A description of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The groups and projects that can edit the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; }

        /// <summary>
        /// Whether the filter is selected as a favorite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favourite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Favourite { get; set; }

        /// <summary>
        /// The count of how many users have selected this filter as a favorite, including the filter owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favouritedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FavouritedCount { get; set; }

        /// <summary>
        /// The unique identifier for the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

        /// <summary>
        /// The name of the filter. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Owner { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri SearchUrl { get; set; }

        /// <summary>
        /// The URL of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The groups and projects that the filter is shared with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; }

        /// <summary>
        /// A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharedUsers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserList SharedUsers { get; set; }

        /// <summary>
        /// A paginated list of the users that are subscribed to the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FilterSubscriptionsList Subscriptions { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ViewUrl { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Filter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Filter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FilterDetails
    {
        /// <summary>
        /// The description of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The groups and projects that can edit the filter. This can be specified when updating a filter, but not when creating a filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; }

        /// <summary>
        /// Expand options that include additional filter details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// Whether the filter is selected as a favorite by any users, not including the filter owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favourite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Favourite { get; set; }

        /// <summary>
        /// The count of how many users have selected this filter as a favorite, including the filter owner.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favouritedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long FavouritedCount { get; set; }

        /// <summary>
        /// The unique identifier for the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

        /// <summary>
        /// The name of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The user who owns the filter. Defaults to the creator of the filter, however, Jira administrators can change the owner of a shared filter in the admin settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("owner", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Owner { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-3-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/3/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searchUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri SearchUrl { get; set; }

        /// <summary>
        /// The URL of the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; }

        /// <summary>
        /// The users that are subscribed to the filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscriptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterSubscription> Subscriptions { get; set; }

        /// <summary>
        /// A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri ViewUrl { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a user or group subscribing to a filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FilterSubscription
    {
        /// <summary>
        /// The group subscribing to filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupName Group { get; set; }

        /// <summary>
        /// The ID of the filter subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The user subscribing to filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User User { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterSubscription FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterSubscription>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A paginated list of subscriptions to a filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FilterSubscriptionsList
    {
        /// <summary>
        /// The index of the last item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EndIndex { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterSubscription> Items { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The number of items on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FilterSubscriptionsList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FilterSubscriptionsList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A group found in a search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FoundGroup
    {
        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The group name with the matched query string highlighted with the HTML bold tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html { get; set; }

        [Newtonsoft.Json.JsonProperty("labels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupLabel> Labels { get; set; }

        /// <summary>
        /// The name of the group. The name of a group is mutable, to reliably identify a group use ``groupId`.`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FoundGroup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FoundGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FoundGroups
    {
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FoundGroup> Groups { get; set; }

        /// <summary>
        /// Header text indicating the number of groups in the response and the total number of groups found in the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        /// <summary>
        /// The total number of groups found in the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FoundGroups FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FoundGroups>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FoundUsers
    {
        /// <summary>
        /// Header text indicating the number of users in the response and the total number of users found in the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Header { get; set; }

        /// <summary>
        /// The total number of users found in the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserPickerUser> Users { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FoundUsers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FoundUsers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of users and groups found in a search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FoundUsersAndGroups
    {
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FoundGroups Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FoundUsers Users { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FoundUsersAndGroups FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FoundUsersAndGroups>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FunctionOperand
    {
        /// <summary>
        /// The list of function arguments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Arguments { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// Encoded operand, which can be used directly in a JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedOperand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedOperand { get; set; }

        /// <summary>
        /// The name of the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("function", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Function { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FunctionOperand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionOperand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of functions that can be used in advanced searches.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FunctionReferenceData
    {
        /// <summary>
        /// The display name of the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Whether the function can take a list of arguments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isList", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public FunctionReferenceDataIsList IsList { get; set; }

        /// <summary>
        /// The data types returned by the function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("types", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Types { get; set; }

        /// <summary>
        /// The function identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static FunctionReferenceData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<FunctionReferenceData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GlobalScopeBean
    {
        /// <summary>
        /// Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Attributes> Attributes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GlobalScopeBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GlobalScopeBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Group
    {
        /// <summary>
        /// Expand options that include additional group details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL for these group details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PagedListUserDetailsApplicationUser Users { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Group FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Group>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GroupDetails
    {
        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GroupDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A group label.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GroupLabel
    {
        /// <summary>
        /// The group label name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("text", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Text { get; set; }

        /// <summary>
        /// The title of the group label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The type of the group label.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public GroupLabelType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GroupLabel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupLabel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GroupName
    {
        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL for these group details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static GroupName FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<GroupName>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Jira instance health check results. Deprecated and no longer returned.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HealthCheckResult
    {
        /// <summary>
        /// The description of the Jira health check item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the Jira health check item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the Jira health check item passed or failed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("passed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Passed { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HealthCheckResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HealthCheckResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The project issue type hierarchy.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Hierarchy
    {
        /// <summary>
        /// The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long BaseLevelId { get; set; }

        /// <summary>
        /// Details about the hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SimplifiedHierarchyLevel> Levels { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Hierarchy FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Hierarchy>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of issue history metadata.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HistoryMetadata
    {
        /// <summary>
        /// The activity described in the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activityDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityDescription { get; set; }

        /// <summary>
        /// The key of the activity described in the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("activityDescriptionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ActivityDescriptionKey { get; set; }

        /// <summary>
        /// Details of the user whose action created the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadataParticipant Actor { get; set; }

        /// <summary>
        /// Details of the cause that triggered the creation the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cause", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadataParticipant Cause { get; set; }

        /// <summary>
        /// The description of the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The description key of the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescriptionKey { get; set; }

        /// <summary>
        /// The description of the email address associated the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailDescription { get; set; }

        /// <summary>
        /// The description key of the email address associated the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailDescriptionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailDescriptionKey { get; set; }

        /// <summary>
        /// Additional arbitrary information about the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("extraData", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ExtraData { get; set; }

        /// <summary>
        /// Details of the system that generated the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("generator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadataParticipant Generator { get; set; }

        /// <summary>
        /// The type of the history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HistoryMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of user or system associated with a issue history metadata item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class HistoryMetadataParticipant
    {
        /// <summary>
        /// The URL to an avatar for the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AvatarUrl { get; set; }

        /// <summary>
        /// The display name of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The key of the display name of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayNameKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayNameKey { get; set; }

        /// <summary>
        /// The ID of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The type of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// The URL of the user or system associated with a history record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static HistoryMetadataParticipant FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoryMetadataParticipant>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An icon. If no icon is defined:
    /// <br/>
    /// <br/> *  for a status icon, no status icon displays in Jira.
    /// <br/> *  for the remote object icon, the default link icon displays in Jira.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Icon
    {
        /// <summary>
        /// The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// The title of the icon. This is used as follows:
        /// <br/>
        /// <br/> *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
        /// <br/> *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of an icon that displays at 16x16 pixel in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url16x16", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url16x16 { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Icon FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Icon>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An icon.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IconBean
    {
        /// <summary>
        /// The URL of the tooltip, used only for a status icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("link", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Link { get; set; }

        /// <summary>
        /// The title of the icon, for use as a tooltip on the icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of a 16x16 pixel icon.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url16x16", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url16x16 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IconBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IconBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IdBean
    {
        /// <summary>
        /// The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to get a list of permission scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IdOrKeyBean
    {
        /// <summary>
        /// The ID of the referenced item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The key of the referenced item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IdOrKeyBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IdOrKeyBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IncludedFields
    {
        [Newtonsoft.Json.JsonProperty("actuallyIncluded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ActuallyIncluded { get; set; }

        [Newtonsoft.Json.JsonProperty("excluded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Excluded { get; set; }

        [Newtonsoft.Json.JsonProperty("included", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Included { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IncludedFields FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IncludedFields>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of Issue Ids Or Keys that are to be archived or unarchived
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueArchivalSyncRequest
    {
        [Newtonsoft.Json.JsonProperty("issueIdsOrKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueIdsOrKeys { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueArchivalSyncRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueArchivalSyncRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Number of archived/unarchived issues and list of errors that occurred during the action, if any.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueArchivalSyncResponse
    {
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Errors Errors { get; set; }

        [Newtonsoft.Json.JsonProperty("numberOfIssuesUpdated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NumberOfIssuesUpdated { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueArchivalSyncResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueArchivalSyncResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about an issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueBean
    {
        /// <summary>
        /// Details of changelogs associated with the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changelog", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PageOfChangelogs Changelog { get; set; }

        /// <summary>
        /// The metadata for the fields on the issue that can be amended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editmeta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueUpdateMetadata Editmeta { get; set; }

        /// <summary>
        /// Expand options that include additional issue details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldsToInclude", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IncludedFields FieldsToInclude { get; set; }

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The ID and name of each field present on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Names { get; set; }

        /// <summary>
        /// The operations that can be performed on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Operations Operations { get; set; }

        /// <summary>
        /// Details of the issue properties identified in the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The rendered value of each field present on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("renderedFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> RenderedFields { get; set; }

        /// <summary>
        /// The schema describing each field present on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonTypeBean> Schema { get; set; }

        /// <summary>
        /// The URL of the issue details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The transitions that can be performed on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTransition> Transitions { get; set; }

        /// <summary>
        /// The versions of each field on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionedRepresentations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, object>> VersionedRepresentations { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of changelog IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueChangelogIds
    {
        /// <summary>
        /// The list of changelog IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("changelogIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> ChangelogIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueChangelogIds FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueChangelogIds>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueCommentListRequestBean
    {
        /// <summary>
        /// The list of comment IDs. A maximum of 1000 IDs can be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> Ids { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueCommentListRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueCommentListRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueContextVariable
    {
        /// <summary>
        /// The issue ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The issue key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// Type of custom context variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueContextVariable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueContextVariable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The wrapper for the issue creation metadata for a list of projects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueCreateMetadata
    {
        /// <summary>
        /// Expand options that include additional project details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// List of projects and their issue creation metadata.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIssueCreateMetadata> Projects { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueCreateMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueCreateMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Lists of issues and entity properties. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueEntityProperties
    {
        /// <summary>
        /// A list of entity property IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entitiesIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10000)]
        public System.Collections.Generic.ICollection<long> EntitiesIds { get; set; }

        /// <summary>
        /// A list of entity property keys and values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonNode> Properties { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueEntityProperties FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueEntityProperties>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An issue ID with entity property values. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueEntityPropertiesForMultiUpdate
    {
        /// <summary>
        /// The ID of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueID { get; set; }

        /// <summary>
        /// Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonNode> Properties { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueEntityPropertiesForMultiUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueEntityPropertiesForMultiUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about an issue event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueEvent
    {
        /// <summary>
        /// The ID of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the options for a select list issue field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueFieldOption
    {
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFieldOptionConfiguration Config { get; set; }

        /// <summary>
        /// The unique identifier for the option. This is only unique within the select field's set of options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The option's name, which is displayed in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueFieldOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueFieldOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the projects the option is available in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueFieldOptionConfiguration
    {
        /// <summary>
        /// DEPRECATED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Attributes2> Attributes { get; set; }

        /// <summary>
        /// Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFieldOptionScopeBean Scope { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueFieldOptionConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueFieldOptionConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueFieldOptionCreateBean
    {
        [Newtonsoft.Json.JsonProperty("config", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueFieldOptionConfiguration Config { get; set; }

        /// <summary>
        /// The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The option's name, which is displayed in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueFieldOptionCreateBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueFieldOptionCreateBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueFieldOptionScopeBean
    {
        /// <summary>
        /// Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("global", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GlobalScopeBean Global { get; set; }

        /// <summary>
        /// DEPRECATED
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Projects { get; set; }

        /// <summary>
        /// Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects2", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectScopeBean> Projects2 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueFieldOptionScopeBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueFieldOptionScopeBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Bulk operation filter details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueFilterForBulkPropertyDelete
    {
        /// <summary>
        /// The value of properties to perform the bulk operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// List of issues to perform the bulk delete operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> EntityIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueFilterForBulkPropertyDelete FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueFilterForBulkPropertyDelete>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Bulk operation filter details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueFilterForBulkPropertySet
    {
        /// <summary>
        /// The value of properties to perform the bulk operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object CurrentValue { get; set; }

        /// <summary>
        /// List of issues to perform the bulk operation on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> EntityIds { get; set; }

        /// <summary>
        /// Whether the bulk operation occurs only when the property is present on or absent from an issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasProperty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasProperty { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueFilterForBulkPropertySet FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueFilterForBulkPropertySet>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a link between issues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueLink
    {
        /// <summary>
        /// The ID of the issue link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Provides details about the linked issue. If presenting this link in a user interface, use the `inward` field of the issue link type to label the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inwardIssue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LinkedIssue InwardIssue { get; set; } = new LinkedIssue();

        /// <summary>
        /// Provides details about the linked issue. If presenting this link in a user interface, use the `outward` field of the issue link type to label the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outwardIssue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LinkedIssue OutwardIssue { get; set; } = new LinkedIssue();

        /// <summary>
        /// The URL of the issue link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The type of link between the issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IssueLinkType Type { get; set; } = new IssueLinkType();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueLink FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueLink>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// This object is used as follows:
    /// <br/>
    /// <br/> *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-3-issueLinkType-get).
    /// <br/> *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it defines and reports on issue link types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueLinkType
    {
        /// <summary>
        /// The ID of the issue link type and is used as follows:
        /// <br/>
        /// <br/> *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
        /// <br/> *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description of the issue link type inward link and is used as follows:
        /// <br/>
        /// <br/> *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
        /// <br/> *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inward", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Inward { get; set; }

        /// <summary>
        /// The name of the issue link type and is used as follows:
        /// <br/>
        /// <br/> *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
        /// <br/> *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the issue link type outward link and is used as follows:
        /// <br/>
        /// <br/> *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.
        /// <br/> *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outward", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Outward { get; set; }

        /// <summary>
        /// The URL of the issue link type. Read only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueLinkType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueLinkType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of issue link type beans.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueLinkTypes
    {
        /// <summary>
        /// The issue link type bean.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueLinkTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueLinkType> IssueLinkTypes1 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueLinkTypes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueLinkTypes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of issue IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueList
    {
        /// <summary>
        /// The list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IssueIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of matched issues or errors for each JQL query, in the order the JQL queries were passed.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueMatches
    {
        [Newtonsoft.Json.JsonProperty("matches", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<IssueMatchesForJQL> Matches { get; set; } = new System.Collections.ObjectModel.Collection<IssueMatchesForJQL>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueMatches FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueMatches>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of the issues matched to a JQL query or details of errors encountered during matching.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueMatchesForJQL
    {
        /// <summary>
        /// A list of errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Errors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// A list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("matchedIssues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> MatchedIssues { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueMatchesForJQL FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueMatchesForJQL>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of issues suggested for use in auto-completion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssuePickerSuggestions
    {
        /// <summary>
        /// A list of issues for an issue type suggested for use in auto-completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sections", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssuePickerSuggestionsIssueType> Sections { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssuePickerSuggestions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssuePickerSuggestions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A type of issue suggested for use in auto-completion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssuePickerSuggestionsIssueType
    {
        /// <summary>
        /// The ID of the type of issues suggested for use in auto-completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// A list of issues suggested for use in auto-completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SuggestedIssue> Issues { get; set; }

        /// <summary>
        /// The label of the type of issues suggested for use in auto-completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        /// <summary>
        /// If no issue suggestions are found, returns a message indicating no suggestions were found,
        /// </summary>
        [Newtonsoft.Json.JsonProperty("msg", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Msg { get; set; }

        /// <summary>
        /// If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sub", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sub { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssuePickerSuggestionsIssueType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssuePickerSuggestionsIssueType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Issue security level member.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueSecurityLevelMember
    {
        /// <summary>
        /// The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PermissionHolder Holder { get; set; } = new PermissionHolder();

        /// <summary>
        /// The ID of the issue security level member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The ID of the issue security level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecurityLevelId", Required = Newtonsoft.Json.Required.Always)]
        public long IssueSecurityLevelId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueSecurityLevelMember FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueSecurityLevelMember>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about an project using security scheme mapping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueSecuritySchemeToProjectMapping
    {
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueSecuritySchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueSecuritySchemeToProjectMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueSecuritySchemeToProjectMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTransition
    {
        /// <summary>
        /// Expand options that include additional transition details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, FieldMetadata> Fields { get; set; }

        /// <summary>
        /// Whether there is a screen associated with the issue transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasScreen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasScreen { get; set; }

        /// <summary>
        /// The ID of the issue transition. Required when specifying a transition to undertake.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the transition is available to be performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAvailable { get; set; }

        /// <summary>
        /// Whether the issue has to meet criteria before the issue transition is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isConditional", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsConditional { get; set; }

        /// <summary>
        /// Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isGlobal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsGlobal { get; set; }

        /// <summary>
        /// Whether this is the initial issue transition for the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isInitial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsInitial { get; set; }

        [Newtonsoft.Json.JsonProperty("looped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Looped { get; set; }

        /// <summary>
        /// The name of the issue transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Details of the issue status after the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusDetails To { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTransition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTransition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeCreateBean
    {
        /// <summary>
        /// The description of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The hierarchy level of the issue type. Use:
        /// <br/>
        /// <br/> *  `-1` for Subtask.
        /// <br/> *  `0` for Base.
        /// <br/>
        /// <br/>Defaults to `0`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// The unique name for the issue type. The maximum length is 60 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Deprecated. Use `hierarchyLevel` instead. See the [deprecation notice](https://community.developer.atlassian.com/t/deprecation-of-the-epic-link-parent-link-and-other-related-fields-in-rest-apis-and-webhooks/54048) for details.
        /// <br/>
        /// <br/>Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IssueTypeCreateBeanType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeCreateBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeCreateBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeDetails
    {
        /// <summary>
        /// The ID of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid EntityId { get; set; }

        /// <summary>
        /// Hierarchy level of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// The URL of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Details of the next-gen projects the issue type is available in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL of these issue type details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Whether this issue type is used to create subtasks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subtask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Subtask { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of issue type IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeIds
    {
        /// <summary>
        /// The list of issue type IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IssueTypeIds1 { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeIds FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeIds>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of issue type IDs to be removed from the field configuration scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeIdsToRemove
    {
        /// <summary>
        /// The list of issue type IDs. Must contain unique values not longer than 255 characters and not be empty. Maximum of 100 IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeIdsToRemove FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeIdsToRemove>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeInfo
    {
        /// <summary>
        /// The avatar of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the issue creation metadata for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeIssueCreateMetadata
    {
        /// <summary>
        /// The ID of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid EntityId { get; set; }

        /// <summary>
        /// Expand options that include additional issue type metadata details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// List of the fields available when creating an issue for the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, FieldMetadata> Fields { get; set; }

        /// <summary>
        /// Hierarchy level of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchyLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevel { get; set; }

        /// <summary>
        /// The URL of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Details of the next-gen projects the issue type is available in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL of these issue type details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Whether this issue type is used to create subtasks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subtask", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Subtask { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeIssueCreateMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeIssueCreateMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue type scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScheme
    {
        /// <summary>
        /// The ID of the default issue type of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultIssueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultIssueTypeId { get; set; }

        /// <summary>
        /// The description of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the issue type scheme is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue type scheme and its associated issue types.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeSchemeDetails
    {
        /// <summary>
        /// The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultIssueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultIssueTypeId { get; set; }

        /// <summary>
        /// The description of the issue type scheme. The maximum length is 4000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeSchemeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeSchemeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of an issue type scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeSchemeID
    {
        /// <summary>
        /// The ID of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeSchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeSchemeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeSchemeID FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeSchemeID>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Issue type scheme item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeSchemeMapping
    {
        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeSchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeSchemeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeSchemeMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeSchemeMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the association between an issue type scheme and project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeSchemeProjectAssociation
    {
        /// <summary>
        /// The ID of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeSchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeSchemeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeSchemeProjectAssociation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeSchemeProjectAssociation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Issue type scheme with a list of the projects that use it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeSchemeProjects
    {
        /// <summary>
        /// Details of an issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScheme", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IssueTypeScheme IssueTypeScheme { get; set; } = new IssueTypeScheme();

        /// <summary>
        /// The IDs of the projects using the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeSchemeProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeSchemeProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the name, description, and default issue type for an issue type scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeSchemeUpdateDetails
    {
        /// <summary>
        /// The ID of the default issue type of the issue type scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultIssueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultIssueTypeId { get; set; }

        /// <summary>
        /// The description of the issue type scheme. The maximum length is 4000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeSchemeUpdateDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeSchemeUpdateDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue type screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenScheme
    {
        /// <summary>
        /// The description of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of an issue type screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenSchemeDetails
    {
        /// <summary>
        /// The description of the issue type screen scheme. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeMappings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<IssueTypeScreenSchemeMapping> IssueTypeMappings { get; set; } = new System.Collections.ObjectModel.Collection<IssueTypeScreenSchemeMapping>();

        /// <summary>
        /// The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenSchemeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenSchemeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of an issue type screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenSchemeId
    {
        /// <summary>
        /// The ID of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenSchemeId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenSchemeId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The screen scheme for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenSchemeItem
    {
        /// <summary>
        /// The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenSchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeScreenSchemeId { get; set; }

        /// <summary>
        /// The ID of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screenSchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ScreenSchemeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenSchemeItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenSchemeItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The IDs of the screen schemes for the issue type IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenSchemeMapping
    {
        /// <summary>
        /// The ID of the issue type or *default*. Only issue types used in classic projects are accepted. An entry for *default* must be provided and defines the mapping for all issue types without a screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the screen scheme. Only screen schemes used in classic projects are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screenSchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ScreenSchemeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenSchemeMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenSchemeMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of issue type screen scheme mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenSchemeMappingDetails
    {
        /// <summary>
        /// The list of issue type to screen scheme mappings. A *default* entry cannot be specified because a default entry is added when an issue type screen scheme is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeMappings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<IssueTypeScreenSchemeMapping> IssueTypeMappings { get; set; } = new System.Collections.ObjectModel.Collection<IssueTypeScreenSchemeMapping>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenSchemeMappingDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenSchemeMappingDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Associated issue type screen scheme and project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenSchemeProjectAssociation
    {
        /// <summary>
        /// The ID of the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueTypeScreenSchemeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenSchemeProjectAssociation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenSchemeProjectAssociation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue type screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenSchemeUpdateDetails
    {
        /// <summary>
        /// The description of the issue type screen scheme. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenSchemeUpdateDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenSchemeUpdateDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Issue type screen scheme with a list of the projects that use it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeScreenSchemesProjects
    {
        /// <summary>
        /// Details of an issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenScheme", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IssueTypeScreenScheme IssueTypeScreenScheme { get; set; } = new IssueTypeScreenScheme();

        /// <summary>
        /// The IDs of the projects using the issue type screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeScreenSchemesProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeScreenSchemesProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Mapping of an issue type to a context.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeToContextMapping
    {
        /// <summary>
        /// The ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContextId { get; set; }

        /// <summary>
        /// Whether the context is mapped to any issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAnyIssueType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAnyIssueType { get; set; }

        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueTypeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeToContextMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeToContextMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeUpdateBean
    {
        /// <summary>
        /// The ID of an issue type avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The description of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique name for the issue type. The maximum length is 60 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeUpdateBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeUpdateBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Status details for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeWithStatus
    {
        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue type's status details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        /// <summary>
        /// List of status details for the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusDetails> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusDetails>();

        /// <summary>
        /// Whether this issue type represents subtasks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subtask", Required = Newtonsoft.Json.Required.Always)]
        public bool Subtask { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeWithStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeWithStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the mapping between an issue type and a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypeWorkflowMapping
    {
        /// <summary>
        /// The ID of the issue type. Not required if updating the issue type-workflow mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueType { get; set; }

        /// <summary>
        /// Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateDraftIfNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Workflow { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypeWorkflowMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypeWorkflowMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the mapping between issue types and a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueTypesWorkflowMapping
    {
        /// <summary>
        /// Whether the workflow is the default workflow for the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultMapping", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DefaultMapping { get; set; }

        /// <summary>
        /// The list of issue type IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypes { get; set; }

        /// <summary>
        /// Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateDraftIfNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// The name of the workflow. Optional if updating the workflow-issue types mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Workflow { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueTypesWorkflowMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueTypesWorkflowMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueUpdateDetails
    {
        /// <summary>
        /// List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Fields { get; set; }

        /// <summary>
        /// Additional issue history details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("historyMetadata", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HistoryMetadata HistoryMetadata { get; set; }

        /// <summary>
        /// Details of issue properties to be add or update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityProperty> Properties { get; set; }

        /// <summary>
        /// Details of a transition. Required when performing a transition, optional when creating or editing an issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssueTransition Transition { get; set; }

        /// <summary>
        /// A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("update", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<FieldUpdateOperation>> Update { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueUpdateDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueUpdateDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of editable field details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssueUpdateMetadata
    {
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, FieldMetadata> Fields { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssueUpdateMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssueUpdateMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of issues and JQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssuesAndJQLQueries
    {
        /// <summary>
        /// A list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> IssueIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// A list of JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqls", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Jqls { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssuesAndJQLQueries FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssuesAndJQLQueries>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The description of the page of issues loaded by the provided JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssuesJqlMetaDataBean
    {
        /// <summary>
        /// The number of issues that were loaded in this evaluation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("count", Required = Newtonsoft.Json.Required.Always)]
        public int Count { get; set; }

        /// <summary>
        /// The maximum number of issues that could be loaded in this evaluation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.Always)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.Always)]
        public long StartAt { get; set; }

        /// <summary>
        /// The total number of issues the JQL returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalCount", Required = Newtonsoft.Json.Required.Always)]
        public long TotalCount { get; set; }

        /// <summary>
        /// Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validationWarnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ValidationWarnings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssuesJqlMetaDataBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssuesJqlMetaDataBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Meta data describing the `issues` context variable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssuesMetaBean
    {
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuesJqlMetaDataBean Jql { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssuesMetaBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssuesMetaBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IssuesUpdateBean
    {
        [Newtonsoft.Json.JsonProperty("issueUpdates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueUpdateDetails> IssueUpdates { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static IssuesUpdateBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<IssuesUpdateBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The JQL queries to be converted.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JQLPersonalDataMigrationRequest
    {
        /// <summary>
        /// A list of queries with user identifiers. Maximum of 100 queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queryStrings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> QueryStrings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JQLPersonalDataMigrationRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JQLPersonalDataMigrationRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// JQL queries that contained users that could not be found
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JQLQueryWithUnknownUsers
    {
        /// <summary>
        /// The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found
        /// </summary>
        [Newtonsoft.Json.JsonProperty("convertedQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConvertedQuery { get; set; }

        /// <summary>
        /// The original query, for reference
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalQuery { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JQLQueryWithUnknownUsers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JQLQueryWithUnknownUsers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Lists of JQL reference data.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JQLReferenceData
    {
        /// <summary>
        /// List of JQL query reserved words.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqlReservedWords", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> JqlReservedWords { get; set; }

        /// <summary>
        /// List of fields usable in JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibleFieldNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldReferenceData> VisibleFieldNames { get; set; }

        /// <summary>
        /// List of functions usable in JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibleFunctionNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FunctionReferenceData> VisibleFunctionNames { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JQLReferenceData FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JQLReferenceData>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JexpIssues
    {
        /// <summary>
        /// The JQL query that specifies the set of issues available in the Jira expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JexpJqlIssues Jql { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JexpIssues FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JexpIssues>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JexpJqlIssues
    {
        /// <summary>
        /// The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Query { get; set; }

        /// <summary>
        /// The index of the first issue to return from the JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// Determines how to validate the JQL query and treat the validation results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validation", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JexpJqlIssuesValidation Validation { get; set; } = JiraApiClient.JexpJqlIssuesValidation.Strict;

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JexpJqlIssues FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JexpJqlIssues>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the analysed Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionAnalysis
    {
        [Newtonsoft.Json.JsonProperty("complexity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionComplexity Complexity { get; set; }

        /// <summary>
        /// A list of validation errors. Not included if the expression is valid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraExpressionValidationError> Errors { get; set; }

        /// <summary>
        /// The analysed expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Expression { get; set; }

        /// <summary>
        /// EXPERIMENTAL. The inferred type of the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("valid", Required = Newtonsoft.Json.Required.Always)]
        public bool Valid { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionAnalysis FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionAnalysis>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the complexity of the analysed Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionComplexity
    {
        /// <summary>
        /// Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:
        /// <br/>
        /// <br/> *  `issues.map(i =&gt; i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.
        /// <br/> *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expensiveOperations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ExpensiveOperations { get; set; }

        /// <summary>
        /// Variables used in the formula, mapped to the parts of the expression they refer to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Variables { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionComplexity FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionComplexity>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionEvalContextBean
    {
        /// <summary>
        /// The ID of the board that is available under the `board` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("board", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Board { get; set; }

        /// <summary>
        /// Custom context variables and their types. These variable types are available for use in a custom context:
        /// <br/>
        /// <br/> *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.
        /// <br/> *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.
        /// <br/> *  `json`: A JSON object containing custom content.
        /// <br/> *  `list`: A JSON list of `user`, `issue`, or `json` variable types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Custom> Custom { get; set; }

        /// <summary>
        /// The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerRequest", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomerRequest { get; set; }

        /// <summary>
        /// The issue that is available under the `issue` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdOrKeyBean Issue { get; set; }

        /// <summary>
        /// The collection of issues that is available under the `issues` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JexpIssues Issues { get; set; }

        /// <summary>
        /// The project that is available under the `project` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdOrKeyBean Project { get; set; }

        /// <summary>
        /// The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serviceDesk", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ServiceDesk { get; set; }

        /// <summary>
        /// The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sprint", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Sprint { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionEvalContextBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionEvalContextBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionEvalRequestBean
    {
        /// <summary>
        /// The context in which the Jira expression is evaluated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("context", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionEvalContextBean Context { get; set; }

        /// <summary>
        /// The Jira expression to evaluate.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Expression { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionEvalRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionEvalRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionEvaluationMetaDataBean
    {
        /// <summary>
        /// Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("complexity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionsComplexityBean Complexity { get; set; }

        /// <summary>
        /// Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IssuesMetaBean Issues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionEvaluationMetaDataBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionEvaluationMetaDataBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of Jira expressions for analysis.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionForAnalysis
    {
        /// <summary>
        /// Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contextVariables", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> ContextVariables { get; set; }

        /// <summary>
        /// The list of Jira expressions to analyse.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expressions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Expressions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionForAnalysis FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionForAnalysis>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The result of evaluating a Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionResult
    {
        /// <summary>
        /// Contains various characteristics of the performed expression evaluation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("meta", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JiraExpressionEvaluationMetaDataBean Meta { get; set; }

        /// <summary>
        /// The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:
    /// <br/>
    /// <br/> *  `line` and `column`
    /// <br/> *  `expression`
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionValidationError
    {
        /// <summary>
        /// The text column in which the error occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("column", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Column { get; set; }

        /// <summary>
        /// The part of the expression in which the error occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expression", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expression { get; set; }

        /// <summary>
        /// The text line in which the error occurred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("line", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Line { get; set; }

        /// <summary>
        /// Details about the error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// The error type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JiraExpressionValidationErrorType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionValidationError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionValidationError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the analysed Jira expression.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionsAnalysis
    {
        /// <summary>
        /// The results of Jira expressions analysis.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JiraExpressionAnalysis> Results { get; set; } = new System.Collections.ObjectModel.Collection<JiraExpressionAnalysis>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionsAnalysis FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionsAnalysis>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionsComplexityBean
    {
        /// <summary>
        /// The number of Jira REST API beans returned in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("beans", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JiraExpressionsComplexityValueBean Beans { get; set; } = new JiraExpressionsComplexityValueBean();

        /// <summary>
        /// The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expensiveOperations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JiraExpressionsComplexityValueBean ExpensiveOperations { get; set; } = new JiraExpressionsComplexityValueBean();

        /// <summary>
        /// The number of primitive values returned in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primitiveValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JiraExpressionsComplexityValueBean PrimitiveValues { get; set; } = new JiraExpressionsComplexityValueBean();

        /// <summary>
        /// The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("steps", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JiraExpressionsComplexityValueBean Steps { get; set; } = new JiraExpressionsComplexityValueBean();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionsComplexityBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionsComplexityBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraExpressionsComplexityValueBean
    {
        /// <summary>
        /// The maximum allowed complexity. The evaluation will fail if this value is exceeded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.Always)]
        public int Limit { get; set; }

        /// <summary>
        /// The complexity value of the current expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        public int Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraExpressionsComplexityValueBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraExpressionsComplexityValueBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraStatus
    {
        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusScope Scope { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JiraStatusStatusCategory StatusCategory { get; set; }

        /// <summary>
        /// Projects and issue types where the status is used. Only available if the `usages` expand is requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIssueTypes> Usages { get; set; }

        /// <summary>
        /// The workflows that use this status. Only available if the `workflowUsages` expand is requested.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowUsages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowUsages> WorkflowUsages { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraWorkflow
    {
        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Indicates if the workflow can be edited.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isEditable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsEditable { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowScope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("startPointLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout StartPointLayout { get; set; }

        /// <summary>
        /// The statuses referenced in this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowReferenceStatus> Statuses { get; set; }

        /// <summary>
        /// If there is a current [asynchronous task](#async-operations) operation for this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        /// <summary>
        /// The transitions of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitions> Transitions { get; set; }

        /// <summary>
        /// Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the requested workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIssueTypes> Usages { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DocumentVersion Version { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraWorkflow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraWorkflow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JiraWorkflowStatus
    {
        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowScope Scope { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JiraWorkflowStatusStatusCategory StatusCategory { get; set; }

        /// <summary>
        /// The reference of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

        /// <summary>
        /// The `statuses.usages` expand is an optional parameter that can be used when reading and updating statuses in Jira. It provides additional information about the projects and issue types associated with the requested statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIssueTypes> Usages { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JiraWorkflowStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JiraWorkflowStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Jql function precomputation.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlFunctionPrecomputationBean
    {
        [Newtonsoft.Json.JsonProperty("arguments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Arguments { get; set; }

        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Error { get; set; }

        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Field { get; set; }

        [Newtonsoft.Json.JsonProperty("functionKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionKey { get; set; }

        [Newtonsoft.Json.JsonProperty("functionName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FunctionName { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Operator { get; set; }

        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        [Newtonsoft.Json.JsonProperty("used", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Used { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlFunctionPrecomputationBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlFunctionPrecomputationBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Precomputation id and its new value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlFunctionPrecomputationUpdateBean
    {
        [Newtonsoft.Json.JsonProperty("error", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Error { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlFunctionPrecomputationUpdateBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlFunctionPrecomputationUpdateBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of pairs (id and value) for precomputation updates.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlFunctionPrecomputationUpdateRequestBean
    {
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JqlFunctionPrecomputationUpdateBean> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlFunctionPrecomputationUpdateRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlFunctionPrecomputationUpdateRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of JQL queries to parse.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueriesToParse
    {
        /// <summary>
        /// A list of queries to parse.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queries", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Queries { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueriesToParse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueriesToParse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of JQL queries to sanitize for the given account IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueriesToSanitize
    {
        /// <summary>
        /// The list of JQL queries to sanitize. Must contain unique values. Maximum of 20 queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queries", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JqlQueryToSanitize> Queries { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryToSanitize>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueriesToSanitize FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueriesToSanitize>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A parsed JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQuery
    {
        [Newtonsoft.Json.JsonProperty("orderBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JqlQueryOrderByClause OrderBy { get; set; }

        [Newtonsoft.Json.JsonProperty("where", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JqlQueryClause Where { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQuery FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQuery>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A JQL query clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryClause
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryClause FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryClause>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an operand in a JQL clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryClauseOperand
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryClauseOperand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryClauseOperand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A time predicate for a temporal JQL clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryClauseTimePredicate
    {
        [Newtonsoft.Json.JsonProperty("operand", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JqlQueryClauseOperand Operand { get; set; } = new JqlQueryClauseOperand();

        /// <summary>
        /// The operator between the field and the operand.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JqlQueryClauseTimePredicateOperator Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryClauseTimePredicate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryClauseTimePredicate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryField
    {
        /// <summary>
        /// The encoded name of the field, which can be used directly in a JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedName { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// When the field refers to a value in an entity property, details of the entity property value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("property", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JqlQueryFieldEntityProperty> Property { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an entity property.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryFieldEntityProperty
    {
        /// <summary>
        /// The object on which the property is set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Entity { get; set; }

        /// <summary>
        /// The key of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>
        /// The path in the property value to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("path", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Path { get; set; }

        /// <summary>
        /// The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JqlQueryFieldEntityPropertyType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryFieldEntityProperty FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryFieldEntityProperty>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the order-by JQL clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryOrderByClause
    {
        /// <summary>
        /// The list of order-by clause fields and their ordering directives.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JqlQueryOrderByClauseElement> Fields { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryOrderByClauseElement>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryOrderByClause FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryOrderByClause>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An element of the order-by JQL clause.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryOrderByClauseElement
    {
        /// <summary>
        /// The direction in which to order the results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("direction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JqlQueryOrderByClauseElementDirection Direction { get; set; }

        [Newtonsoft.Json.JsonProperty("field", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public JqlQueryField Field { get; set; } = new JqlQueryField();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryOrderByClauseElement FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryOrderByClauseElement>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The JQL query to sanitize for the account ID. If the account ID is null, sanitizing is performed for an anonymous user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryToSanitize
    {
        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string AccountId { get; set; }

        /// <summary>
        /// The query to sanitize.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryToSanitize FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryToSanitize>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An operand that can be part of a list operand.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JqlQueryUnitaryOperand
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JqlQueryUnitaryOperand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JqlQueryUnitaryOperand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A JSON object with custom content.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JsonContextVariable
    {
        /// <summary>
        /// Type of custom context variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// A JSON object containing custom content.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JsonContextVariable FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonContextVariable>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JsonNode
    {
        [Newtonsoft.Json.JsonProperty("array", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Array { get; set; }

        [Newtonsoft.Json.JsonProperty("bigDecimal", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BigDecimal { get; set; }

        [Newtonsoft.Json.JsonProperty("bigInteger", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BigInteger { get; set; }

        [Newtonsoft.Json.JsonProperty("bigIntegerValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BigIntegerValue { get; set; }

        [Newtonsoft.Json.JsonProperty("binary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Binary { get; set; }

        [Newtonsoft.Json.JsonProperty("binaryValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<byte[]> BinaryValue { get; set; }

        [Newtonsoft.Json.JsonProperty("boolean", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Boolean { get; set; }

        [Newtonsoft.Json.JsonProperty("booleanValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BooleanValue { get; set; }

        [Newtonsoft.Json.JsonProperty("containerNode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ContainerNode { get; set; }

        [Newtonsoft.Json.JsonProperty("decimalValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DecimalValue { get; set; }

        [Newtonsoft.Json.JsonProperty("double", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Double { get; set; }

        [Newtonsoft.Json.JsonProperty("doubleValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double DoubleValue { get; set; }

        [Newtonsoft.Json.JsonProperty("elements", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Elements { get; set; }

        [Newtonsoft.Json.JsonProperty("fieldNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object FieldNames { get; set; }

        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Fields { get; set; }

        [Newtonsoft.Json.JsonProperty("floatingPointNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FloatingPointNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("int", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Int { get; set; }

        [Newtonsoft.Json.JsonProperty("intValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IntValue { get; set; }

        [Newtonsoft.Json.JsonProperty("integralNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IntegralNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("long", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Long { get; set; }

        [Newtonsoft.Json.JsonProperty("longValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LongValue { get; set; }

        [Newtonsoft.Json.JsonProperty("missingNode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool MissingNode { get; set; }

        [Newtonsoft.Json.JsonProperty("null", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Null { get; set; }

        [Newtonsoft.Json.JsonProperty("number", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Number { get; set; }

        [Newtonsoft.Json.JsonProperty("numberType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public JsonNodeNumberType NumberType { get; set; }

        [Newtonsoft.Json.JsonProperty("numberValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NumberValue { get; set; }

        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Object { get; set; }

        [Newtonsoft.Json.JsonProperty("pojo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Pojo { get; set; }

        [Newtonsoft.Json.JsonProperty("textValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TextValue { get; set; }

        [Newtonsoft.Json.JsonProperty("textual", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Textual { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsBoolean", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ValueAsBoolean { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsDouble", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double ValueAsDouble { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsInt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ValueAsInt { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsLong", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ValueAsLong { get; set; }

        [Newtonsoft.Json.JsonProperty("valueAsText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ValueAsText { get; set; }

        [Newtonsoft.Json.JsonProperty("valueNode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ValueNode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JsonNode FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonNode>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The schema of a field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class JsonTypeBean
    {
        /// <summary>
        /// If the field is a custom field, the configuration of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Configuration { get; set; }

        /// <summary>
        /// If the field is a custom field, the URI of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom { get; set; }

        /// <summary>
        /// If the field is a custom field, the custom ID of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomId { get; set; }

        /// <summary>
        /// When the data type is an array, the name of the field items within the array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Items { get; set; }

        /// <summary>
        /// If the field is a system field, the name of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string System { get; set; }

        /// <summary>
        /// The data type of the field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static JsonTypeBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<JsonTypeBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class KeywordOperand
    {
        /// <summary>
        /// The keyword that is the operand value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyword", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public KeywordOperandKeyword Keyword { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static KeywordOperand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<KeywordOperand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a license for the Jira instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class License
    {
        /// <summary>
        /// The applications under this license.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LicensedApplication> Applications { get; set; } = new System.Collections.ObjectModel.Collection<LicensedApplication>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static License FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<License>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A metric that provides insight into the active licence details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LicenseMetric
    {
        /// <summary>
        /// The key of a specific license metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The calculated value of a licence metric linked to the key. An example licence metric is the approximate number of user accounts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LicenseMetric FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicenseMetric>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a licensed Jira application.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LicensedApplication
    {
        /// <summary>
        /// The ID of the application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The licensing plan.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("plan", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LicensedApplicationPlan Plan { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LicensedApplication FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LicensedApplication>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details a link group, which defines issue operations.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LinkGroup
    {
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LinkGroup> Groups { get; set; }

        [Newtonsoft.Json.JsonProperty("header", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimpleLink Header { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("links", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SimpleLink> Links { get; set; }

        [Newtonsoft.Json.JsonProperty("styleClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StyleClass { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Weight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LinkGroup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LinkGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LinkIssueRequestJsonBean
    {
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Comment Comment { get; set; }

        [Newtonsoft.Json.JsonProperty("inwardIssue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LinkedIssue InwardIssue { get; set; } = new LinkedIssue();

        [Newtonsoft.Json.JsonProperty("outwardIssue", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public LinkedIssue OutwardIssue { get; set; } = new LinkedIssue();

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public IssueLinkType Type { get; set; } = new IssueLinkType();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LinkIssueRequestJsonBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LinkIssueRequestJsonBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID or key of a linked issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class LinkedIssue
    {
        /// <summary>
        /// The fields associated with the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fields Fields { get; set; }

        /// <summary>
        /// The ID of an issue. Required if `key` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of an issue. Required if `id` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static LinkedIssue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<LinkedIssue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An operand that is a list of values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ListOperand
    {
        /// <summary>
        /// Encoded operand, which can be used directly in a JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedOperand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedOperand { get; set; }

        /// <summary>
        /// The list of operand values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<JqlQueryUnitaryOperand> Values { get; set; } = new System.Collections.ObjectModel.Collection<JqlQueryUnitaryOperand>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListOperand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListOperand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ListWrapperCallbackApplicationRole
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListWrapperCallbackApplicationRole FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListWrapperCallbackApplicationRole>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ListWrapperCallbackGroupName
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ListWrapperCallbackGroupName FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ListWrapperCallbackGroupName>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a locale.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Locale
    {
        /// <summary>
        /// The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale1 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Locale FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Locale>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MappingsByIssueTypeOverride
    {
        /// <summary>
        /// The ID of the issue type for this mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The list of status mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowAssociationStatusMapping> StatusMappings { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowAssociationStatusMapping>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MappingsByIssueTypeOverride FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MappingsByIssueTypeOverride>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MappingsByWorkflow
    {
        /// <summary>
        /// The ID of the new workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newWorkflowId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewWorkflowId { get; set; }

        /// <summary>
        /// The ID of the old workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldWorkflowId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OldWorkflowId { get; set; }

        /// <summary>
        /// The list of status mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowAssociationStatusMapping> StatusMappings { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowAssociationStatusMapping>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MappingsByWorkflow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MappingsByWorkflow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MoveFieldBean
    {
        /// <summary>
        /// The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri After { get; set; }

        /// <summary>
        /// The named position to which the screen tab field should be moved. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public MoveFieldBeanPosition Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MoveFieldBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MoveFieldBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of issues and their respective properties to set or update. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MultiIssueEntityProperties
    {
        /// <summary>
        /// A list of issue IDs and their respective properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueEntityPropertiesForMultiUpdate> Issues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MultiIssueEntityProperties FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MultiIssueEntityProperties>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A custom field and its new value with a list of issue to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MultipleCustomFieldValuesUpdate
    {
        /// <summary>
        /// The ID or key of the custom field. For example, `customfield_10010`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customField", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomField { get; set; }

        /// <summary>
        /// The list of issue IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> IssueIds { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        /// <summary>
        /// The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#data-types) as follows:
        /// <br/>
        /// <br/> *  `string` the value must be a string.
        /// <br/> *  `number` the value must be a number.
        /// <br/> *  `datetime` the value must be a string that represents a date in the ISO format or the simplified extended ISO format. For example, `"2023-01-18T12:00:00-03:00"` or `"2023-01-18T12:00:00.000Z"`. However, the milliseconds part is ignored.
        /// <br/> *  `user` the value must be an object that contains the `accountId` field.
        /// <br/> *  `group` the value must be an object that contains the group `name` or `groupId` field. Because group names can change, we recommend using `groupId`.
        /// <br/>
        /// <br/>A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/jira-custom-field/#collection-types).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public object Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MultipleCustomFieldValuesUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MultipleCustomFieldValuesUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of updates for a custom fields.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MultipleCustomFieldValuesUpdateDetails
    {
        [Newtonsoft.Json.JsonProperty("updates", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MultipleCustomFieldValuesUpdate> Updates { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static MultipleCustomFieldValuesUpdateDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<MultipleCustomFieldValuesUpdateDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NestedResponse
    {
        [Newtonsoft.Json.JsonProperty("errorCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorCollection ErrorCollection { get; set; }

        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Status { get; set; }

        [Newtonsoft.Json.JsonProperty("warningCollection", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WarningCollection WarningCollection { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NestedResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NestedResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The user details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NewUserDetails
    {
        /// <summary>
        /// Deprecated, do not use.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ApplicationKeys { get; set; }

        /// <summary>
        /// This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The email address for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. If left empty, the user will get default product access. To create a user without product access, set this field to be an empty array.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("products", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Products { get; set; }

        /// <summary>
        /// The URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NewUserDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NewUserDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Notification
    {
        /// <summary>
        /// The HTML body of the email notification for the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("htmlBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HtmlBody { get; set; }

        /// <summary>
        /// Restricts the notifications to users with the specified permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationRecipientsRestrictions Restrict { get; set; }

        /// <summary>
        /// The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subject { get; set; }

        /// <summary>
        /// The plain text body of the email notification for the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("textBody", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TextBody { get; set; }

        /// <summary>
        /// The recipients of the email notification for the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationRecipients To { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Notification FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Notification>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a notification event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationEvent
    {
        /// <summary>
        /// The description of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The template of the event. Only custom events configured by Jira administrators have template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("templateEvent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationEvent TemplateEvent { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the users and groups to receive the notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationRecipients
    {
        /// <summary>
        /// Whether the notification should be sent to the issue's assignees.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Assignee { get; set; }

        /// <summary>
        /// List of groupIds to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; }

        /// <summary>
        /// List of groups to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> Groups { get; set; }

        /// <summary>
        /// Whether the notification should be sent to the issue's reporter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reporter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Reporter { get; set; }

        /// <summary>
        /// List of users to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("users", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDetails> Users { get; set; }

        /// <summary>
        /// Whether the notification should be sent to the issue's voters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Voters { get; set; }

        /// <summary>
        /// Whether the notification should be sent to the issue's watchers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Watchers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationRecipients FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationRecipients>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the group membership or permissions needed to receive the notification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationRecipientsRestrictions
    {
        /// <summary>
        /// List of groupId memberships required to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> GroupIds { get; set; }

        /// <summary>
        /// List of group memberships required to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> Groups { get; set; }

        /// <summary>
        /// List of permissions required to receive the notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RestrictedPermission> Permissions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationRecipientsRestrictions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationRecipientsRestrictions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationScheme
    {
        /// <summary>
        /// The description of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Expand options that include additional notification scheme details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The notification events and associated recipients.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationSchemeEvents", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationSchemeEvent> NotificationSchemeEvents { get; set; }

        /// <summary>
        /// The list of project IDs associated with the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> Projects { get; set; }

        /// <summary>
        /// The scope of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationSchemeAndProjectMappingJsonBean
    {
        [Newtonsoft.Json.JsonProperty("notificationSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NotificationSchemeId { get; set; }

        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationSchemeAndProjectMappingJsonBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationSchemeAndProjectMappingJsonBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a notification scheme event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationSchemeEvent
    {
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NotificationEvent Event { get; set; }

        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EventNotification> Notifications { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationSchemeEvent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationSchemeEvent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a notification scheme event.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationSchemeEventDetails
    {
        /// <summary>
        /// The ID of the event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("event", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public NotificationSchemeEventTypeId Event { get; set; } = new NotificationSchemeEventTypeId();

        /// <summary>
        /// The list of notifications mapped to a specified event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<NotificationSchemeNotificationDetails> Notifications { get; set; } = new System.Collections.ObjectModel.Collection<NotificationSchemeNotificationDetails>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationSchemeEventDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationSchemeEventDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of an event that is being mapped to notifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationSchemeEventTypeId
    {
        /// <summary>
        /// The ID of the notification scheme event.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationSchemeEventTypeId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationSchemeEventTypeId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of a notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationSchemeId
    {
        /// <summary>
        /// The ID of a notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationSchemeId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationSchemeId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a notification within a notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class NotificationSchemeNotificationDetails
    {
        /// <summary>
        /// The notification type, e.g `CurrentAssignee`, `Group`, `EmailAddress`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NotificationType { get; set; }

        /// <summary>
        /// The value corresponding to the specified notification type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static NotificationSchemeNotificationDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<NotificationSchemeNotificationDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OldToNewSecurityLevelMappingsBean
    {
        /// <summary>
        /// The new issue security level ID. Providing null will clear the assigned old level from issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newLevelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewLevelId { get; set; }

        /// <summary>
        /// The old issue security level ID. Providing null will remap all issues without any assigned levels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldLevelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OldLevelId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OldToNewSecurityLevelMappingsBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OldToNewSecurityLevelMappingsBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OperationMessage
    {
        /// <summary>
        /// The human-readable message that describes the result.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// The status code of the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Always)]
        public int StatusCode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OperationMessage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OperationMessage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the operations that can be performed on the issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Operations
    {
        /// <summary>
        /// Details of the link groups defining issue operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("linkGroups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LinkGroup> LinkGroups { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Operations FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Operations>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ordered list of custom field option IDs and information on where to move them.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderOfCustomFieldOptions
    {
        /// <summary>
        /// The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string After { get; set; }

        /// <summary>
        /// A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldOptionIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> CustomFieldOptionIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The position the custom field options should be moved to. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderOfCustomFieldOptionsPosition Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderOfCustomFieldOptions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderOfCustomFieldOptions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An ordered list of issue type IDs and information about where to move them.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class OrderOfIssueTypes
    {
        /// <summary>
        /// The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string After { get; set; }

        /// <summary>
        /// A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The position the issue types should be moved to. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OrderOfIssueTypesPosition Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static OrderOfIssueTypes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<OrderOfIssueTypes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanChangelog
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Changelog> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanChangelog FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanChangelog>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanComment
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Comment> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanComment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanComment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanComponentWithIssueCount
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ComponentWithIssueCount> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanComponentWithIssueCount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanComponentWithIssueCount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanContext
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Context> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanContext FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanContext>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanContextForProjectAndIssueType
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextForProjectAndIssueType> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanContextForProjectAndIssueType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanContextForProjectAndIssueType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanContextualConfiguration
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ContextualConfiguration> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanContextualConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanContextualConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanCustomFieldContext
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContext> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanCustomFieldContext FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanCustomFieldContext>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanCustomFieldContextDefaultValue
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<DefaultValues> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanCustomFieldContextDefaultValue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanCustomFieldContextDefaultValue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanCustomFieldContextOption
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContextOption> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanCustomFieldContextOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanCustomFieldContextOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanCustomFieldContextProjectMapping
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomFieldContextProjectMapping> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanCustomFieldContextProjectMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanCustomFieldContextProjectMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanDashboard
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dashboard> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanDashboard FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanDashboard>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanField
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Field> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanFieldConfigurationDetails
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationDetails> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanFieldConfigurationDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanFieldConfigurationDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanFieldConfigurationIssueTypeItem
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationIssueTypeItem> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanFieldConfigurationIssueTypeItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanFieldConfigurationIssueTypeItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanFieldConfigurationItem
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationItem> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanFieldConfigurationItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanFieldConfigurationItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanFieldConfigurationScheme
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationScheme> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanFieldConfigurationScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanFieldConfigurationScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanFieldConfigurationSchemeProjects
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FieldConfigurationSchemeProjects> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanFieldConfigurationSchemeProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanFieldConfigurationSchemeProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanFilterDetails
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<FilterDetails> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanFilterDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanFilterDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanGroupDetails
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupDetails> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanGroupDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanGroupDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueFieldOption
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueFieldOption> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueFieldOption FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueFieldOption>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueSecurityLevelMember
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueSecurityLevelMember> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueSecurityLevelMember FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueSecurityLevelMember>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueSecuritySchemeToProjectMapping
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueSecuritySchemeToProjectMapping> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueSecuritySchemeToProjectMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueSecuritySchemeToProjectMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueTypeScheme
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeScheme> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueTypeScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueTypeScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueTypeSchemeMapping
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeSchemeMapping> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueTypeSchemeMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueTypeSchemeMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueTypeSchemeProjects
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeSchemeProjects> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueTypeSchemeProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueTypeSchemeProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueTypeScreenScheme
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeScreenScheme> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueTypeScreenScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueTypeScreenScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueTypeScreenSchemeItem
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeScreenSchemeItem> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueTypeScreenSchemeItem FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueTypeScreenSchemeItem>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueTypeScreenSchemesProjects
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeScreenSchemesProjects> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueTypeScreenSchemesProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueTypeScreenSchemesProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanIssueTypeToContextMapping
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeToContextMapping> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanIssueTypeToContextMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanIssueTypeToContextMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanJqlFunctionPrecomputationBean
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JqlFunctionPrecomputationBean> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanJqlFunctionPrecomputationBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanJqlFunctionPrecomputationBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanNotificationScheme
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationScheme> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanNotificationScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanNotificationScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanNotificationSchemeAndProjectMappingJsonBean
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<NotificationSchemeAndProjectMappingJsonBean> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanNotificationSchemeAndProjectMappingJsonBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanNotificationSchemeAndProjectMappingJsonBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanPriority
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Priority> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanPriority FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanPriority>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanProject
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Project> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanProject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanProject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanProjectDetails
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectDetails> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanProjectDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanProjectDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanResolutionJsonBean
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResolutionJsonBean> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanResolutionJsonBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanResolutionJsonBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanScreen
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Screen> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanScreen FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanScreen>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanScreenScheme
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScreenScheme> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanScreenScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanScreenScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanScreenWithTab
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ScreenWithTab> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanScreenWithTab FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanScreenWithTab>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanSecurityLevel
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityLevel> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanSecurityLevel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanSecurityLevel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanSecurityLevelMember
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityLevelMember> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanSecurityLevelMember FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanSecurityLevelMember>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanSecuritySchemeWithProjects
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeWithProjects> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanSecuritySchemeWithProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanSecuritySchemeWithProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanString
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanString FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanString>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanUiModificationDetails
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UiModificationDetails> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanUiModificationDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanUiModificationDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanUser
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanUser FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanUser>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanUserDetails
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDetails> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanUserDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanUserDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanUserKey
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserKey> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanUserKey FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanUserKey>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanVersion
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Version> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanVersion FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanVersion>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanWebhook
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Webhook> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanWebhook FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanWebhook>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanWorkflow
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Workflow> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanWorkflow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanWorkflow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanWorkflowScheme
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowScheme> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanWorkflowScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanWorkflowScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of items.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageBeanWorkflowTransitionRules
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// If there is another page of results, the URL of the next page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri NextPage { get; set; }

        /// <summary>
        /// The URL of the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRules> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageBeanWorkflowTransitionRules FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageBeanWorkflowTransitionRules>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of changelogs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageOfChangelogs
    {
        /// <summary>
        /// The list of changelogs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("histories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Changelog> Histories { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageOfChangelogs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageOfChangelogs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page of comments.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageOfComments
    {
        /// <summary>
        /// The list of comments.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comments", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Comment> Comments { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first item returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// The number of items returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageOfComments FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageOfComments>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A page containing dashboard details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageOfDashboards
    {
        /// <summary>
        /// List of dashboards.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dashboards", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Dashboard> Dashboards { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The URL of the next page of results, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("next", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Next { get; set; }

        /// <summary>
        /// The URL of the previous page of results, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prev", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Prev { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageOfDashboards FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageOfDashboards>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageOfStatuses
    {
        /// <summary>
        /// Whether this is the last page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLast", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLast { get; set; }

        /// <summary>
        /// The maximum number of items that could be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The URL of the next page of results, if any.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nextPage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NextPage { get; set; }

        /// <summary>
        /// The URL of this page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        /// <summary>
        /// Number of items that satisfy the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("values", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraStatus> Values { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageOfStatuses FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageOfStatuses>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Paginated list of worklog details
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageOfWorklogs
    {
        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        /// <summary>
        /// List of worklogs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worklogs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Worklog> Worklogs { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PageOfWorklogs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PageOfWorklogs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A paged list. To access additional details append `[start-index:end-index]` to the expand request. For example, `?expand=sharedUsers[10:40]` returns a list starting at item 10 and finishing at item 40.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PagedListUserDetailsApplicationUser
    {
        /// <summary>
        /// The index of the last item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EndIndex { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDetails> Items { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The number of items on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PagedListUserDetailsApplicationUser FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PagedListUserDetailsApplicationUser>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PaginatedResponseComment
    {
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Comment> Results { get; set; }

        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long StartAt { get; set; }

        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Total { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PaginatedResponseComment FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PaginatedResponseComment>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of parsed JQL queries.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ParsedJqlQueries
    {
        /// <summary>
        /// A list of parsed JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queries", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ParsedJqlQuery> Queries { get; set; } = new System.Collections.ObjectModel.Collection<ParsedJqlQuery>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ParsedJqlQueries FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParsedJqlQueries>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a parsed JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ParsedJqlQuery
    {
        /// <summary>
        /// The list of syntax or validation errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }

        /// <summary>
        /// The JQL query that was parsed and validated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("query", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Query { get; set; }

        /// <summary>
        /// The syntax tree of the query. Empty if the query was invalid.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("structure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JqlQuery Structure { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ParsedJqlQuery FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ParsedJqlQuery>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details for permissions of shareable entities
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PermissionDetails
    {
        /// <summary>
        /// The edit permissions for the shareable entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editPermissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SharePermission> EditPermissions { get; set; } = new System.Collections.ObjectModel.Collection<SharePermission>();

        /// <summary>
        /// The share permissions for the shareable entities.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sharePermissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SharePermission> SharePermissions { get; set; } = new System.Collections.ObjectModel.Collection<SharePermission>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a permission granted to a user or group.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PermissionGrant
    {
        /// <summary>
        /// The user or group being granted the permission. It consists of a `type`, a type-dependent `parameter` and a type-dependent `value`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PermissionHolder Holder { get; set; }

        /// <summary>
        /// The ID of the permission granted details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Permission { get; set; }

        /// <summary>
        /// The URL of the permission granted details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionGrant FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionGrant>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of permission grants.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PermissionGrants
    {
        /// <summary>
        /// Expand options that include additional permission grant details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// Permission grants list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionGrant> Permissions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionGrants FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionGrants>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a user, group, field, or project role that holds a permission. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PermissionHolder
    {
        /// <summary>
        /// Expand options that include additional permission holder details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// As a group's name can change, use of `value` is recommended. The identifier associated withthe `type` value that defines the holder of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// The type of permission holder.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        /// <summary>
        /// The identifier associated with the `type` value that defines the holder of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionHolder FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionHolder>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a permission scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PermissionScheme
    {
        /// <summary>
        /// A description for the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The expand options available for the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the permission scheme. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionGrant> Permissions { get; set; }

        /// <summary>
        /// The scope of the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL of the permission scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of all permission schemes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PermissionSchemes
    {
        /// <summary>
        /// Permission schemes list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionSchemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PermissionScheme> PermissionSchemes1 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionSchemes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionSchemes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about permissions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Permissions
    {
        /// <summary>
        /// List of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, UserPermission> Permissions1 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Permissions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Permissions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PermissionsKeysBean
    {
        /// <summary>
        /// A list of permission keys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Permissions { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermissionsKeysBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermissionsKeysBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of projects in which a user is granted permissions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PermittedProjects
    {
        /// <summary>
        /// A list of projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIdentifierBean> Projects { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PermittedProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PermittedProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Priority
    {
        /// <summary>
        /// The description of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of the icon for the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether this priority is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The name of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The color used to indicate the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusColor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Priority FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Priority>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of an issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PriorityId
    {
        /// <summary>
        /// The ID of the issue priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PriorityId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriorityId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Project
    {
        /// <summary>
        /// Whether the project is archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Archived { get; set; }

        /// <summary>
        /// The user who archived the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User ArchivedBy { get; set; }

        /// <summary>
        /// The date when the project was archived.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archivedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ArchivedDate { get; set; }

        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// The URLs of the project's avatars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// List of the components contained in the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectComponent> Components { get; set; }

        /// <summary>
        /// Whether the project is marked as deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deleted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deleted { get; set; }

        /// <summary>
        /// The user who marked the project as deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User DeletedBy { get; set; }

        /// <summary>
        /// The date when the project was marked as deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deletedDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset DeletedDate { get; set; }

        /// <summary>
        /// A brief description of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// An email address associated with the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Expand options that include additional project details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// Whether the project is selected as a favorite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("favourite", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Favourite { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Insights about the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectInsight Insight { get; set; }

        /// <summary>
        /// Whether the project is private.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPrivate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPrivate { get; set; }

        /// <summary>
        /// The issue type hierarchy for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeHierarchy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Hierarchy IssueTypeHierarchy { get; set; }

        /// <summary>
        /// List of the issue types available in the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeDetails> IssueTypes { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The project landing page info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("landingPageInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectLandingPageInfo LandingPageInfo { get; set; }

        /// <summary>
        /// The username of the project lead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Lead { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// User permissions on the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectPermissions Permissions { get; set; }

        /// <summary>
        /// The category the project belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectCategory ProjectCategory { get; set; }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectTypeKey3 ProjectTypeKey { get; set; }

        /// <summary>
        /// Map of project properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        /// <summary>
        /// The date when the project is deleted permanently.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("retentionTillDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset RetentionTillDate { get; set; }

        /// <summary>
        /// The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Uri> Roles { get; set; }

        /// <summary>
        /// The URL of the project details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// Whether the project is simplified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simplified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Simplified { get; set; }

        /// <summary>
        /// The type of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("style", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectStyle Style { get; set; }

        /// <summary>
        /// A link to information about this project, such as project documentation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid Uuid { get; set; }

        /// <summary>
        /// The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Version> Versions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Project FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Project>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A project and issueType ID pair that identifies a status mapping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectAndIssueTypePair
    {
        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectAndIssueTypePair FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectAndIssueTypePair>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of project avatars.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectAvatars
    {
        /// <summary>
        /// List of avatars added to Jira. These avatars may be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> Custom { get; set; }

        /// <summary>
        /// List of avatars included with Jira. These avatars cannot be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> System { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectAvatars FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectAvatars>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A project category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectCategory
    {
        /// <summary>
        /// The description of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the project category. Required on create, optional on update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectCategory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectCategory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a project component.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectComponent
    {
        /// <summary>
        /// The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Assignee { get; set; }

        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
        /// <br/>
        /// <br/> *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
        /// <br/> *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
        /// <br/> *  `UNASSIGNED` an assignee is not set for issues created with this component.
        /// <br/> *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
        /// <br/>
        /// <br/>Default value: `PROJECT_DEFAULT`.  
        /// <br/>Optional when creating or updating a component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectComponentAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// The description for the component. Optional when creating or updating a component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier for the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAssigneeTypeValid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAssigneeTypeValid { get; set; }

        /// <summary>
        /// The user details for the component's lead user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User Lead { get; set; }

        /// <summary>
        /// The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadUserName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LeadUserName { get; set; }

        /// <summary>
        /// The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The key of the project the component is assigned to. Required when creating a component. Can't be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// The ID of the project the component is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realAssignee", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User RealAssignee { get; set; }

        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
        /// <br/>
        /// <br/> *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
        /// <br/> *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
        /// <br/> *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
        /// <br/> *  `PROJECT_DEFAULT` when none of the preceding cases are true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("realAssigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectComponentRealAssigneeType RealAssigneeType { get; set; }

        /// <summary>
        /// The URL of the component.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectComponent FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectComponent>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectDetails
    {
        /// <summary>
        /// The URLs of the project's avatars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The category the project belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdatedProjectCategory ProjectCategory { get; set; }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypeKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectDetailsProjectTypeKey ProjectTypeKey { get; set; }

        /// <summary>
        /// The URL of the project details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// Whether or not the project is simplified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("simplified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Simplified { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A project's sender email address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectEmailAddress
    {
        /// <summary>
        /// The email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// When using a custom domain, the status of the email address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddressStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> EmailAddressStatus { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectEmailAddress FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectEmailAddress>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a project feature.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectFeature
    {
        /// <summary>
        /// The key of the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("feature", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Feature { get; set; }

        /// <summary>
        /// URI for the image representing the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("imageUri", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUri { get; set; }

        /// <summary>
        /// Localized display description for the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localisedDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalisedDescription { get; set; }

        /// <summary>
        /// Localized display name for the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("localisedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LocalisedName { get; set; }

        /// <summary>
        /// List of keys of the features required to enable the feature.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("prerequisites", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Prerequisites { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectFeatureState2 State { get; set; }

        /// <summary>
        /// Whether the state of the feature can be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toggleLocked", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ToggleLocked { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectFeature FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectFeature>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the feature state.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectFeatureState
    {
        /// <summary>
        /// The feature state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ProjectFeatureStateState State { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectFeatureState FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectFeatureState>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Project ID details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectId
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The identifiers for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIdentifierBean
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIdentifierBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIdentifierBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Identifiers for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIdentifiers
    {
        /// <summary>
        /// The ID of the created project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The key of the created project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the created project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIdentifiers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIdentifiers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of project IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIds
    {
        /// <summary>
        /// The IDs of projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ProjectIds1 { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIds FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIds>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Additional details about a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectInsight
    {
        /// <summary>
        /// The last issue update time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastIssueUpdateTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset LastIssueUpdateTime { get; set; }

        /// <summary>
        /// Total issue count.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("totalIssueCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalIssueCount { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectInsight FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectInsight>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the issue creation metadata for a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIssueCreateMetadata
    {
        /// <summary>
        /// List of the project's avatars, returning the avatar size and associated URL.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// Expand options that include additional project issue create metadata details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// List of the issue types supported by the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuetypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeIssueCreateMetadata> Issuetypes { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIssueCreateMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIssueCreateMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of issue level security items in a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIssueSecurityLevels
    {
        /// <summary>
        /// Issue level security items list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SecurityLevel> Levels { get; set; } = new System.Collections.ObjectModel.Collection<SecurityLevel>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIssueSecurityLevels FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIssueSecurityLevels>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The hierarchy of issue types within a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIssueTypeHierarchy
    {
        /// <summary>
        /// Details of an issue type hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hierarchy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectIssueTypesHierarchyLevel> Hierarchy { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIssueTypeHierarchy FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIssueTypeHierarchy>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The project and issue type mapping.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIssueTypeMapping
    {
        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIssueTypeMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIssueTypeMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The project and issue type mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIssueTypeMappings
    {
        /// <summary>
        /// The project and issue type mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mappings", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ProjectIssueTypeMapping> Mappings { get; set; } = new System.Collections.ObjectModel.Collection<ProjectIssueTypeMapping>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIssueTypeMappings FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIssueTypeMappings>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Projects and issue types where the status is used. Only available if the `usages` expand is requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIssueTypes
    {
        /// <summary>
        /// IDs of the issue types
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssueTypes { get; set; }

        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectId Project { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIssueTypes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIssueTypes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue type hierarchy level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectIssueTypesHierarchyLevel
    {
        /// <summary>
        /// The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid EntityId { get; set; }

        /// <summary>
        /// The list of issue types in the hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTypeInfo> IssueTypes { get; set; }

        /// <summary>
        /// The level of the issue type hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Level { get; set; }

        /// <summary>
        /// The name of the issue type hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectIssueTypesHierarchyLevel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectIssueTypesHierarchyLevel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectLandingPageInfo
    {
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Attributes { get; set; }

        [Newtonsoft.Json.JsonProperty("boardId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long BoardId { get; set; }

        [Newtonsoft.Json.JsonProperty("boardName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoardName { get; set; }

        [Newtonsoft.Json.JsonProperty("projectKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectKey { get; set; }

        [Newtonsoft.Json.JsonProperty("projectType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectType { get; set; }

        [Newtonsoft.Json.JsonProperty("queueCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("queueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long QueueId { get; set; }

        [Newtonsoft.Json.JsonProperty("queueName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueName { get; set; }

        [Newtonsoft.Json.JsonProperty("simpleBoard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SimpleBoard { get; set; }

        [Newtonsoft.Json.JsonProperty("simplified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Simplified { get; set; }

        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectLandingPageInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectLandingPageInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Permissions which a user has on a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectPermissions
    {
        /// <summary>
        /// Whether the logged user can edit the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canEdit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CanEdit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectPermissions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectPermissions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the roles in a project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectRole
    {
        /// <summary>
        /// The list of users who act in this role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoleActor> Actors { get; set; }

        /// <summary>
        /// Whether this role is the admin role for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Admin { get; set; }

        /// <summary>
        /// Whether the calling user is part of this role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentUserRole", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool CurrentUserRole { get; set; }

        /// <summary>
        /// Whether this role is the default role for the project
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        /// <summary>
        /// The description of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the roles are configurable for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleConfigurable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RoleConfigurable { get; set; }

        /// <summary>
        /// The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL the project role details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The translated name of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("translatedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranslatedName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectRole FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectRole>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectRoleActorsUpdateBean
    {
        /// <summary>
        /// The actors to add to the project role.
        /// <br/>
        /// <br/>Add groups using:
        /// <br/>
        /// <br/> *  `atlassian-group-role-actor` and a list of group names.
        /// <br/> *  `atlassian-group-role-actor-id` and a list of group IDs.
        /// <br/>
        /// <br/>As a group's name can change, use of `atlassian-group-role-actor-id` is recommended. For example, `"atlassian-group-role-actor-id":["eef79f81-0b89-4fca-a736-4be531a10869","77f6ab39-e755-4570-a6ae-2d7a8df0bcb8"]`.
        /// <br/>
        /// <br/>Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categorisedActors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> CategorisedActors { get; set; }

        /// <summary>
        /// The ID of the project role. Use [Get all project roles](#api-rest-api-3-role-get) to get a list of project role IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectRoleActorsUpdateBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectRoleActorsUpdateBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a project role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectRoleDetails
    {
        /// <summary>
        /// Whether this role is the admin role for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("admin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Admin { get; set; }

        /// <summary>
        /// Whether this role is the default role for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        /// <summary>
        /// The description of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the roles are configurable for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleConfigurable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RoleConfigurable { get; set; }

        /// <summary>
        /// The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The URL the project role details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The translated name of the project role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("translatedName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranslatedName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectRoleDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectRoleDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the group associated with the role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectRoleGroup
    {
        /// <summary>
        /// The display name of the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The ID of the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the group. As a group's name can change, use of `groupId` is recommended to identify the group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectRoleGroup FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectRoleGroup>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the user associated with the role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectRoleUser
    {
        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string AccountId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectRoleUser FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectRoleUser>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectScopeBean
    {
        /// <summary>
        /// Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("attributes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<Attributes3> Attributes { get; set; }

        /// <summary>
        /// The ID of the project that the option's behavior applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectScopeBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectScopeBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a project type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ProjectType
    {
        /// <summary>
        /// The color of the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("color", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Color { get; set; }

        /// <summary>
        /// The key of the project type's description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("descriptionI18nKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DescriptionI18nKey { get; set; }

        /// <summary>
        /// The formatted key of the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("formattedKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FormattedKey { get; set; }

        /// <summary>
        /// The icon of the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Icon { get; set; }

        /// <summary>
        /// The key of the project type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ProjectType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ProjectType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Property key details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PropertyKey
    {
        /// <summary>
        /// The key of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PropertyKey FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertyKey>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of property keys.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PropertyKeys
    {
        /// <summary>
        /// Property key details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PropertyKey> Keys { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PropertyKeys FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PropertyKeys>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the status mappings for publishing a draft workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PublishDraftWorkflowScheme
    {
        /// <summary>
        /// Mappings of statuses to new statuses for issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusMapping> StatusMappings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PublishDraftWorkflowScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PublishDraftWorkflowScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Properties that identify a published workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PublishedWorkflowId
    {
        /// <summary>
        /// The entity ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static PublishedWorkflowId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<PublishedWorkflowId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// ID of a registered webhook or error messages explaining why a webhook wasn't registered.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RegisteredWebhook
    {
        /// <summary>
        /// The ID of the webhook. Returned if the webhook is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("createdWebhookId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CreatedWebhookId { get; set; }

        /// <summary>
        /// Error messages specifying why the webhook creation failed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RegisteredWebhook FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RegisteredWebhook>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue remote link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RemoteIssueLink
    {
        /// <summary>
        /// Details of the remote application the linked item is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Application Application { get; set; }

        /// <summary>
        /// The global ID of the link, such as the ID of the item on the remote system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalId { get; set; }

        /// <summary>
        /// The ID of the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Details of the item linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemoteObject Object { get; set; }

        /// <summary>
        /// Description of the relationship between the issue and the linked item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Relationship { get; set; }

        /// <summary>
        /// The URL of the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemoteIssueLink FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemoteIssueLink>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the identifiers for a created or updated remote issue link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RemoteIssueLinkIdentifies
    {
        /// <summary>
        /// The ID of the remote issue link, such as the ID of the item on the remote system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The URL of the remote issue link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemoteIssueLinkIdentifies FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemoteIssueLinkIdentifies>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a remote issue link.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RemoteIssueLinkRequest
    {
        /// <summary>
        /// Details of the remote application the linked item is in. For example, trello.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("application", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Application Application { get; set; }

        /// <summary>
        /// An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&amp;pageId=123`.
        /// <br/>
        /// <br/>Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.
        /// <br/>
        /// <br/>The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("globalId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GlobalId { get; set; }

        /// <summary>
        /// Details of the item linked to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("object", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public RemoteObject Object { get; set; } = new RemoteObject();

        /// <summary>
        /// Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationship", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Relationship { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemoteIssueLinkRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemoteIssueLinkRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The linked item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RemoteObject
    {
        /// <summary>
        /// Details of the icon for the item. If no icon is defined, the default link icon is used in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Icon Icon { get; set; }

        /// <summary>
        /// The status of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Status Status { get; set; }

        /// <summary>
        /// The summary details of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// The title of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of the item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemoteObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemoteObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RemoveOptionFromIssuesResult
    {
        /// <summary>
        /// A collection of errors related to unchanged issues. The collection size is limited, which means not all errors may be returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimpleErrorCollection Errors { get; set; }

        /// <summary>
        /// The IDs of the modified issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("modifiedIssues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ModifiedIssues { get; set; }

        /// <summary>
        /// The IDs of the unchanged issues, those issues where errors prevent modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unmodifiedIssues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> UnmodifiedIssues { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RemoveOptionFromIssuesResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RemoveOptionFromIssuesResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Change the order of issue priorities.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReorderIssuePriorities
    {
        /// <summary>
        /// The ID of the priority. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string After { get; set; }

        /// <summary>
        /// The list of issue IDs to be reordered. Cannot contain duplicates nor after ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Ids { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The position for issue priorities to be moved to. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReorderIssuePriorities FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReorderIssuePriorities>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Change the order of issue resolutions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ReorderIssueResolutionsRequest
    {
        /// <summary>
        /// The ID of the resolution. Required if `position` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string After { get; set; }

        /// <summary>
        /// The list of resolution IDs to be reordered. Cannot contain duplicates nor after ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Ids { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The position for issue resolutions to be moved to. Required if `after` isn't provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ReorderIssueResolutionsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ReorderIssueResolutionsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of required status mappings by issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RequiredMappingByIssueType
    {
        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The status IDs requiring mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StatusIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RequiredMappingByIssueType FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequiredMappingByIssueType>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of required status mappings by workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RequiredMappingByWorkflows
    {
        /// <summary>
        /// The ID of the source workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sourceWorkflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SourceWorkflowId { get; set; }

        /// <summary>
        /// The status IDs requiring mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> StatusIds { get; set; }

        /// <summary>
        /// The ID of the target workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("targetWorkflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TargetWorkflowId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RequiredMappingByWorkflows FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RequiredMappingByWorkflows>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Resolution
    {
        /// <summary>
        /// The description of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Resolution FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Resolution>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of an issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResolutionId
    {
        /// <summary>
        /// The ID of the issue resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ResolutionId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResolutionId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ResolutionJsonBean
    {
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Default { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ResolutionJsonBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ResolutionJsonBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the permission.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RestrictedPermission
    {
        /// <summary>
        /// The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RestrictedPermission FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RestrictedPermission>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RichText
    {
        [Newtonsoft.Json.JsonProperty("empty", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Empty { get; set; }

        [Newtonsoft.Json.JsonProperty("emptyAdf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool EmptyAdf { get; set; }

        [Newtonsoft.Json.JsonProperty("finalised", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Finalised { get; set; }

        [Newtonsoft.Json.JsonProperty("valueSet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool ValueSet { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RichText FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RichText>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a user assigned to a project role.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RoleActor
    {
        [Newtonsoft.Json.JsonProperty("actorGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRoleGroup ActorGroup { get; set; }

        [Newtonsoft.Json.JsonProperty("actorUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRoleUser ActorUser { get; set; }

        /// <summary>
        /// The avatar of the role actor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri AvatarUrl { get; set; }

        /// <summary>
        /// The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The ID of the role actor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type of role actor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoleActorType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RoleActor FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RoleActor>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A rule configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class RuleConfiguration
    {
        /// <summary>
        /// Whether the rule is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; } = false;

        /// <summary>
        /// A tag used to filter rules in [Get workflow transition rule configurations](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-workflow-transition-rules/#api-rest-api-3-workflow-rule-config-get).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Tag { get; set; }

        /// <summary>
        /// Configuration of the rule, as it is stored by the Connect or the Forge app on the rule configuration page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static RuleConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<RuleConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The sanitized JQL queries for the given account IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SanitizedJqlQueries
    {
        /// <summary>
        /// The list of sanitized JQL queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("queries", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SanitizedJqlQuery> Queries { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SanitizedJqlQueries FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SanitizedJqlQueries>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the sanitized JQL query.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SanitizedJqlQuery
    {
        /// <summary>
        /// The account ID of the user for whom sanitization was performed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string AccountId { get; set; }

        /// <summary>
        /// The list of errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ErrorCollection Errors { get; set; }

        /// <summary>
        /// The initial query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initialQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialQuery { get; set; }

        /// <summary>
        /// The sanitized query, if there were no errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sanitizedQuery", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SanitizedQuery { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SanitizedJqlQuery FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SanitizedJqlQuery>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Scope
    {
        /// <summary>
        /// The project the item has scope in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectDetails Project { get; set; }

        /// <summary>
        /// The type of scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ScopeType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Scope FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Scope>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Screen
    {
        /// <summary>
        /// The description of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Screen FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Screen>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ScreenDetails
    {
        /// <summary>
        /// The description of the screen. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScreenDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ScreenScheme
    {
        /// <summary>
        /// The description of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// Details of the issue type screen schemes associated with the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeScreenSchemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PageBeanIssueTypeScreenScheme IssueTypeScreenSchemes { get; set; }

        /// <summary>
        /// The name of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of the screens for the screen types of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenTypes Screens { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScreenScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ScreenSchemeDetails
    {
        /// <summary>
        /// The description of the screen scheme. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screens", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public ScreenTypes Screens { get; set; } = new ScreenTypes();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScreenSchemeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenSchemeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of a screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ScreenSchemeId
    {
        /// <summary>
        /// The ID of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScreenSchemeId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenSchemeId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The IDs of the screens for the screen types of the screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ScreenTypes
    {
        /// <summary>
        /// The ID of the create screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("create", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Create { get; set; }

        /// <summary>
        /// The ID of the default screen. Required when creating a screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Default { get; set; }

        /// <summary>
        /// The ID of the edit screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Edit { get; set; }

        /// <summary>
        /// The ID of the view screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long View { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScreenTypes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenTypes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A screen with tab details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ScreenWithTab
    {
        /// <summary>
        /// The description of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The scope of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Scope Scope { get; set; }

        /// <summary>
        /// The tab for the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tab", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ScreenableTab Tab { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScreenWithTab FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenWithTab>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A screen tab field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ScreenableField
    {
        /// <summary>
        /// The ID of the screen tab field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the screen tab field. Required on create and update. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScreenableField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenableField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A screen tab.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ScreenableTab
    {
        /// <summary>
        /// The ID of the screen tab.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the screen tab. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ScreenableTab FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ScreenableTab>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of how to filter and list search auto complete information.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchAutoCompleteFilter
    {
        /// <summary>
        /// Include collapsed fields for fields that have non-unique names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("includeCollapsedFields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IncludeCollapsedFields { get; set; } = false;

        /// <summary>
        /// List of project IDs used to filter the visible field details returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ProjectIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchAutoCompleteFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchAutoCompleteFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchRequestBean
    {
        /// <summary>
        /// Use [expand](em&gt;#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
        /// <br/>
        /// <br/> *  `renderedFields` Returns field values rendered in HTML format.
        /// <br/> *  `names` Returns the display name of each field.
        /// <br/> *  `schema` Returns the schema describing a field type.
        /// <br/> *  `transitions` Returns all possible transitions for the issue.
        /// <br/> *  `operations` Returns all possible operations for the issue.
        /// <br/> *  `editmeta` Returns information about how each field can be edited.
        /// <br/> *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
        /// <br/> *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Expand { get; set; }

        /// <summary>
        /// A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `*all` Returns all fields.
        /// <br/> *  `*navigable` Returns navigable fields.
        /// <br/> *  Any issue field, prefixed with a minus to exclude.
        /// <br/>
        /// <br/>The default is `*navigable`.
        /// <br/>
        /// <br/>Examples:
        /// <br/>
        /// <br/> *  `summary,comment` Returns the summary and comments fields only.
        /// <br/> *  `-description` Returns all navigable (default) fields except description.
        /// <br/> *  `*all,-comment` Returns all fields except comments.
        /// <br/>
        /// <br/>Multiple `fields` parameters can be included in a request.
        /// <br/>
        /// <br/>Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-3-issue-issueIdOrKey-get) where the default is all fields.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fields", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Fields { get; set; }

        /// <summary>
        /// Reference fields by their key (rather than ID). The default is `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldsByKeys", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool FieldsByKeys { get; set; }

        /// <summary>
        /// A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jql", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Jql { get; set; }

        /// <summary>
        /// The maximum number of items to return per page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; } = 50;

        /// <summary>
        /// A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Properties { get; set; }

        /// <summary>
        /// The index of the first item to return in the page of results (page offset). The base index is `0`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// Determines how to validate the JQL query and treat the validation results. Supported values:
        /// <br/>
        /// <br/> *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
        /// <br/> *  `warn` Returns all errors as warnings.
        /// <br/> *  `none` No validation is performed.
        /// <br/> *  `true` *Deprecated* A legacy synonym for `strict`.
        /// <br/> *  `false` *Deprecated* A legacy synonym for `warn`.
        /// <br/>
        /// <br/>The default is `strict`.
        /// <br/>
        /// <br/>Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validateQuery", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SearchRequestBeanValidateQuery ValidateQuery { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The result of a JQL search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SearchResults
    {
        /// <summary>
        /// Expand options that include additional search result details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The list of issues found by the search.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issues", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueBean> Issues { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxResults", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The ID and name of each field in the search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("names", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Names { get; set; }

        /// <summary>
        /// The schema describing the field types in the search results.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schema", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, JsonTypeBean> Schema { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startAt", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        /// <summary>
        /// Any warnings related to the JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warningMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WarningMessages { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SearchResults FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SearchResults>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue level security item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecurityLevel
    {
        /// <summary>
        /// The description of the issue level security item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue level security item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the issue level security item is the default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The ID of the issue level security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueSecuritySchemeId { get; set; }

        /// <summary>
        /// The name of the issue level security item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue level security item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecurityLevel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecurityLevel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Issue security level member.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecurityLevelMember
    {
        /// <summary>
        /// The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("holder", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PermissionHolder Holder { get; set; } = new PermissionHolder();

        /// <summary>
        /// The ID of the issue security level member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the issue security level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecurityLevelId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueSecurityLevelId { get; set; }

        /// <summary>
        /// The ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueSecuritySchemeId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecurityLevelMember FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecurityLevelMember>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a security scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecurityScheme
    {
        /// <summary>
        /// The ID of the default security level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultSecurityLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DefaultSecurityLevelId { get; set; }

        /// <summary>
        /// The description of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityLevel> Levels { get; set; }

        /// <summary>
        /// The name of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecurityScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecurityScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of the issue security scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecuritySchemeId
    {
        /// <summary>
        /// The ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecuritySchemeId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecuritySchemeId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecuritySchemeLevelBean
    {
        /// <summary>
        /// The description of the issue security scheme level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Description { get; set; }

        /// <summary>
        /// Specifies whether the level is the default level. False by default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// The list of level members which should be added to the issue security scheme level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeLevelMemberBean> Members { get; set; }

        /// <summary>
        /// The name of the issue security scheme level. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecuritySchemeLevelBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecuritySchemeLevelBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecuritySchemeLevelMemberBean
    {
        /// <summary>
        /// The value corresponding to the specified member type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Parameter { get; set; }

        /// <summary>
        /// The issue security level member type, e.g `reporter`, `group`, `user`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecuritySchemeLevelMemberBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecuritySchemeLevelMemberBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of issue security scheme level new members.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecuritySchemeMembersRequest
    {
        /// <summary>
        /// The list of level members which should be added to the issue security scheme level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("members", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecuritySchemeLevelMemberBean> Members { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecuritySchemeMembersRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecuritySchemeMembersRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about an issue security scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecuritySchemeWithProjects
    {
        /// <summary>
        /// The default level ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultLevel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long DefaultLevel { get; set; }

        /// <summary>
        /// The description of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The list of project IDs associated with the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> ProjectIds { get; set; }

        /// <summary>
        /// The URL of the issue security scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecuritySchemeWithProjects FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecuritySchemeWithProjects>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of security schemes.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SecuritySchemes
    {
        /// <summary>
        /// List of security schemes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecuritySchemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SecurityScheme> IssueSecuritySchemes { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SecuritySchemes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SecuritySchemes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the Jira instance.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ServerInformation
    {
        /// <summary>
        /// The base URL of the Jira instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("baseUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// The timestamp when the Jira version was built.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset BuildDate { get; set; }

        /// <summary>
        /// The build number of the Jira version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("buildNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int BuildNumber { get; set; }

        /// <summary>
        /// The type of server deployment. This is always returned as *Cloud*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deploymentType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DeploymentType { get; set; }

        /// <summary>
        /// Jira instance health check results. Deprecated and no longer returned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("healthChecks", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HealthCheckResult> HealthChecks { get; set; }

        /// <summary>
        /// The unique identifier of the Jira version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scmInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ScmInfo { get; set; }

        /// <summary>
        /// The time in Jira when this request was responded to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serverTime", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset ServerTime { get; set; }

        /// <summary>
        /// The name of the Jira instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("serverTitle", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ServerTitle { get; set; }

        /// <summary>
        /// The version of Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }

        /// <summary>
        /// The major, minor, and revision version numbers of the Jira version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("versionNumbers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<int> VersionNumbers { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServerInformation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServerInformation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ServiceManagementNavigationInfo
    {
        [Newtonsoft.Json.JsonProperty("queueCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueCategory { get; set; }

        [Newtonsoft.Json.JsonProperty("queueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long QueueId { get; set; }

        [Newtonsoft.Json.JsonProperty("queueName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string QueueName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ServiceManagementNavigationInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ServiceManagementNavigationInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of new default levels.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SetDefaultLevelsRequest
    {
        /// <summary>
        /// List of objects with issue security scheme ID and new default level ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultValues", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<DefaultLevelValue> DefaultValues { get; set; } = new System.Collections.ObjectModel.Collection<DefaultLevelValue>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SetDefaultLevelsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetDefaultLevelsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The new default issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SetDefaultPriorityRequest
    {
        /// <summary>
        /// The ID of the new default issue priority. Must be an existing ID or null. Setting this to null erases the default priority setting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SetDefaultPriorityRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetDefaultPriorityRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The new default issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SetDefaultResolutionRequest
    {
        /// <summary>
        /// The ID of the new default issue resolution. Must be an existing ID or null. Setting this to null erases the default resolution setting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SetDefaultResolutionRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SetDefaultResolutionRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a share permission for the filter.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SharePermission
    {
        /// <summary>
        /// The group that the filter is shared with. For a request, specify the `groupId` or `name` property for the group. As a group's name can change, use of `groupId` is recommended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public GroupName Group { get; set; }

        /// <summary>
        /// The unique identifier of the share permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-3-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.  
        /// <br/>For a request, specify the `id` for the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Project Project { get; set; }

        /// <summary>
        /// The project role that the filter is shared with.  
        /// <br/>For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("role", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectRole Role { get; set; }

        /// <summary>
        /// The type of share permission:
        /// <br/>
        /// <br/> *  `user` Shared with a user.
        /// <br/> *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
        /// <br/> *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
        /// <br/> *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
        /// <br/> *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
        /// <br/> *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
        /// <br/> *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharePermissionType Type { get; set; }

        /// <summary>
        /// The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBean User { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SharePermission FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SharePermission>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SharePermissionInputBean
    {
        /// <summary>
        /// The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GroupId { get; set; }

        /// <summary>
        /// The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Groupname { get; set; }

        /// <summary>
        /// The ID of the project to share the filter with. Set `type` to `project`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectRoleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProjectRoleId { get; set; }

        /// <summary>
        /// The rights for the share permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rights", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Rights { get; set; }

        /// <summary>
        /// The type of the share permission.Specify the type as follows:
        /// <br/>
        /// <br/> *  `user` Share with a user.
        /// <br/> *  `group` Share with a group. Specify `groupname` as well.
        /// <br/> *  `project` Share with a project. Specify `projectId` as well.
        /// <br/> *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
        /// <br/> *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
        /// <br/> *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SharePermissionInputBeanType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SharePermissionInputBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SharePermissionInputBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimpleApplicationPropertyBean
    {
        /// <summary>
        /// The ID of the application property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The new value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimpleApplicationPropertyBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleApplicationPropertyBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimpleErrorCollection
    {
        /// <summary>
        /// The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorMessages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ErrorMessages { get; set; }

        /// <summary>
        /// The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Errors { get; set; }

        [Newtonsoft.Json.JsonProperty("httpStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HttpStatusCode { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimpleErrorCollection FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleErrorCollection>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the operations available in this version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimpleLink
    {
        [Newtonsoft.Json.JsonProperty("href", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Href { get; set; }

        [Newtonsoft.Json.JsonProperty("iconClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconClass { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("label", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Label { get; set; }

        [Newtonsoft.Json.JsonProperty("styleClass", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StyleClass { get; set; }

        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Weight { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimpleLink FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleLink>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimpleListWrapperApplicationRole
    {
        [Newtonsoft.Json.JsonProperty("callback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListWrapperCallbackApplicationRole Callback { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ApplicationRole> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("pagingCallback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListWrapperCallbackApplicationRole PagingCallback { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimpleListWrapperApplicationRole FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleListWrapperApplicationRole>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimpleListWrapperGroupName
    {
        [Newtonsoft.Json.JsonProperty("callback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListWrapperCallbackGroupName Callback { get; set; }

        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<GroupName> Items { get; set; }

        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        [Newtonsoft.Json.JsonProperty("pagingCallback", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ListWrapperCallbackGroupName PagingCallback { get; set; }

        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimpleListWrapperGroupName FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleListWrapperGroupName>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Represents a usage of an entity by a project ID and related issue type IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimpleUsage
    {
        /// <summary>
        /// The issue type IDs for the usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The project ID for the usage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimpleUsage FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimpleUsage>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SimplifiedHierarchyLevel
    {
        /// <summary>
        /// The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aboveLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AboveLevelId { get; set; }

        /// <summary>
        /// The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("belowLevelId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long BelowLevelId { get; set; }

        /// <summary>
        /// The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("externalUuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid ExternalUuid { get; set; }

        [Newtonsoft.Json.JsonProperty("hierarchyLevelNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HierarchyLevelNumber { get; set; }

        /// <summary>
        /// The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The issue types available in this hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> IssueTypeIds { get; set; }

        /// <summary>
        /// The level of this item in the hierarchy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Level { get; set; }

        /// <summary>
        /// The name of this hierarchy level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectConfigurationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectConfigurationId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SimplifiedHierarchyLevel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SimplifiedHierarchyLevel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SoftwareNavigationInfo
    {
        [Newtonsoft.Json.JsonProperty("boardId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long BoardId { get; set; }

        [Newtonsoft.Json.JsonProperty("boardName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoardName { get; set; }

        [Newtonsoft.Json.JsonProperty("simpleBoard", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SimpleBoard { get; set; }

        [Newtonsoft.Json.JsonProperty("totalBoardsInProject", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TotalBoardsInProject { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SoftwareNavigationInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SoftwareNavigationInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The status of the item.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Status
    {
        /// <summary>
        /// Details of the icon representing the status. If not provided, no status icon displays in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("icon", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Icon Icon { get; set; }

        /// <summary>
        /// Whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolved", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Resolved { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Status FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Status>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A status category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusCategory
    {
        /// <summary>
        /// The name of the color used to represent the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("colorName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ColorName { get; set; }

        /// <summary>
        /// The ID of the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The key of the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the status category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusCategory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusCategory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the status being created.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusCreate
    {
        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusCreateStatusCategory StatusCategory { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusCreate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusCreate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the statuses being created and their scope.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public StatusScope Scope { get; set; } = new StatusScope();

        /// <summary>
        /// Details of the statuses being created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusCreate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusCreate>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusDetails
    {
        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of the icon used to represent the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IconUrl { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The category assigned to the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusCategory StatusCategory { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The statuses associated with this workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusLayoutUpdate
    {
        [Newtonsoft.Json.JsonProperty("layout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout Layout { get; set; }

        /// <summary>
        /// The properties for this status layout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        /// <summary>
        /// A unique ID which the status will use to refer to this layout configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusReference { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusLayoutUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusLayoutUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the mapping from a status to a new status for an issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusMapping
    {
        /// <summary>
        /// The ID of the issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The ID of the new status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newStatusId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewStatusId { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The mapping of old to new status ID for a specific project and issue type.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusMappingDTO
    {
        /// <summary>
        /// The issue type for the status mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The project for the status mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The list of old and new status ID mappings for the specified project and issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMigrations", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusMigration> StatusMigrations { get; set; } = new System.Collections.ObjectModel.Collection<StatusMigration>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusMappingDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusMappingDTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of the statuses in the associated workflows.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusMetadata
    {
        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusMetadataCategory Category { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusMetadata FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusMetadata>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The mapping of old to new status ID.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusMigration
    {
        /// <summary>
        /// The new status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newStatusReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewStatusReference { get; set; }

        /// <summary>
        /// The old status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldStatusReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OldStatusReference { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusMigration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusMigration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The status reference and port that a transition is connected to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusReferenceAndPort
    {
        /// <summary>
        /// The port this transition uses to connect to this status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Port { get; set; }

        /// <summary>
        /// The reference of this status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusReference { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusReferenceAndPort FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusReferenceAndPort>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The scope of the status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusScope
    {
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectId Project { get; set; }

        /// <summary>
        /// The scope of the status. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusScopeType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusScope FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusScope>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the status being updated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusUpdate
    {
        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StatusUpdateStatusCategory StatusCategory { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of statuses that will be updated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusUpdateRequest
    {
        /// <summary>
        /// The list of statuses that will be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusUpdate> Statuses { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The statuses associated with each workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusesPerWorkflow
    {
        /// <summary>
        /// The ID of the initial status for the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initialStatusId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InitialStatusId { get; set; }

        /// <summary>
        /// The status IDs associated with the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Statuses { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StatusesPerWorkflow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StatusesPerWorkflow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StringList
    {

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static StringList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<StringList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An issue suggested for use in the issue picker auto-completion.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SuggestedIssue
    {
        /// <summary>
        /// The ID of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The URL of the issue type's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }

        /// <summary>
        /// The key of the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The key of the issue in HTML format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("keyHtml", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string KeyHtml { get; set; }

        /// <summary>
        /// The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Summary { get; set; }

        /// <summary>
        /// The phrase containing the query string, as plain text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("summaryText", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SummaryText { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SuggestedIssue FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SuggestedIssue>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of system avatars.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SystemAvatars
    {
        /// <summary>
        /// A list of avatar details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Avatar> System { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static SystemAvatars FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<SystemAvatars>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TaskProgressBeanObject
    {
        /// <summary>
        /// The description of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The execution time of the task, in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedRuntime", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedRuntime { get; set; }

        /// <summary>
        /// A timestamp recording when the task was finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Finished { get; set; }

        /// <summary>
        /// The ID of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp recording when the task progress was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.Always)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// Information about the progress of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The progress of the task, as a percentage complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.Always)]
        public long Progress { get; set; }

        /// <summary>
        /// The result of the task execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Result { get; set; }

        /// <summary>
        /// The URL of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// A timestamp recording when the task was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Started { get; set; }

        /// <summary>
        /// The status of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskProgressBeanObjectStatus Status { get; set; }

        /// <summary>
        /// A timestamp recording when the task was submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitted", Required = Newtonsoft.Json.Required.Always)]
        public long Submitted { get; set; }

        /// <summary>
        /// The ID of the user who submitted the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submittedBy", Required = Newtonsoft.Json.Required.Always)]
        public long SubmittedBy { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaskProgressBeanObject FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskProgressBeanObject>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a task.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TaskProgressBeanRemoveOptionFromIssuesResult
    {
        /// <summary>
        /// The description of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The execution time of the task, in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("elapsedRuntime", Required = Newtonsoft.Json.Required.Always)]
        public long ElapsedRuntime { get; set; }

        /// <summary>
        /// A timestamp recording when the task was finished.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("finished", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Finished { get; set; }

        /// <summary>
        /// The ID of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp recording when the task progress was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastUpdate", Required = Newtonsoft.Json.Required.Always)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// Information about the progress of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The progress of the task, as a percentage complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("progress", Required = Newtonsoft.Json.Required.Always)]
        public long Progress { get; set; }

        /// <summary>
        /// The result of the task execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public RemoveOptionFromIssuesResult Result { get; set; }

        /// <summary>
        /// The URL of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// A timestamp recording when the task was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Started { get; set; }

        /// <summary>
        /// The status of the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TaskProgressBeanRemoveOptionFromIssuesResultStatus Status { get; set; }

        /// <summary>
        /// A timestamp recording when the task was submitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submitted", Required = Newtonsoft.Json.Required.Always)]
        public long Submitted { get; set; }

        /// <summary>
        /// The ID of the user who submitted the task.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("submittedBy", Required = Newtonsoft.Json.Required.Always)]
        public long SubmittedBy { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TaskProgressBeanRemoveOptionFromIssuesResult FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TaskProgressBeanRemoveOptionFromIssuesResult>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the time tracking configuration.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TimeTrackingConfiguration
    {
        /// <summary>
        /// The default unit of time applied to logged time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultUnit", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeTrackingConfigurationDefaultUnit DefaultUnit { get; set; }

        /// <summary>
        /// The format that will appear on an issue's *Time Spent* field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TimeTrackingConfigurationTimeFormat TimeFormat { get; set; }

        /// <summary>
        /// The number of days in a working week.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workingDaysPerWeek", Required = Newtonsoft.Json.Required.Always)]
        public double WorkingDaysPerWeek { get; set; }

        /// <summary>
        /// The number of hours in a working day.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workingHoursPerDay", Required = Newtonsoft.Json.Required.Always)]
        public double WorkingHoursPerDay { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TimeTrackingConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeTrackingConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Time tracking details.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TimeTrackingDetails
    {
        /// <summary>
        /// The original estimate of time needed for this issue in readable format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalEstimate { get; set; }

        /// <summary>
        /// The original estimate of time needed for this issue in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalEstimateSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long OriginalEstimateSeconds { get; set; }

        /// <summary>
        /// The remaining estimate of time needed for this issue in readable format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainingEstimate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RemainingEstimate { get; set; }

        /// <summary>
        /// The remaining estimate of time needed for this issue in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainingEstimateSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long RemainingEstimateSeconds { get; set; }

        /// <summary>
        /// Time worked on this issue in readable format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSpent { get; set; }

        /// <summary>
        /// Time worked on this issue in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpentSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TimeSpentSeconds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TimeTrackingDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeTrackingDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the time tracking provider.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TimeTrackingProvider
    {
        /// <summary>
        /// The key for the time tracking provider. For example, *JIRA*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the time tracking provider. For example, *JIRA provided time tracking*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the configuration page for the time tracking provider app. For example, */example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TimeTrackingProvider FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TimeTrackingProvider>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a workflow transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Transition
    {
        /// <summary>
        /// The description of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> From { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("rules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowRules Rules { get; set; }

        [Newtonsoft.Json.JsonProperty("screen", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TransitionScreenDetails Screen { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string To { get; set; }

        /// <summary>
        /// The type of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransitionType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Transition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a transition screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TransitionScreenDetails
    {
        /// <summary>
        /// The ID of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the screen.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransitionScreenDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransitionScreenDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The transitions of this workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class TransitionUpdateDTO
    {
        /// <summary>
        /// The post-functions of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Actions { get; set; }

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionGroupUpdate Conditions { get; set; }

        /// <summary>
        /// The custom event ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customIssueEventId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomIssueEventId { get; set; }

        /// <summary>
        /// The description of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusReferenceAndPort> From { get; set; }

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StatusReferenceAndPort To { get; set; }

        [Newtonsoft.Json.JsonProperty("transitionScreen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowRuleConfiguration TransitionScreen { get; set; }

        /// <summary>
        /// The triggers of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTrigger> Triggers { get; set; }

        /// <summary>
        /// The transition type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TransitionUpdateDTOType Type { get; set; }

        /// <summary>
        /// The validators of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Validators { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static TransitionUpdateDTO FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<TransitionUpdateDTO>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of issue transitions.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Transitions
    {
        /// <summary>
        /// Expand options that include additional transitions details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// List of issue transitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IssueTransition> Transitions1 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Transitions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Transitions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a UI modification's context, which define where to activate the UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UiModificationContextDetails
    {
        /// <summary>
        /// The ID of the UI modification context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Whether a context is available. For example, when a project is deleted the context becomes unavailable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isAvailable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAvailable { get; set; }

        /// <summary>
        /// The issue type ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The project ID of the context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The view type of the context. Only `GIC`(Global Issue Create) and `IssueView` are supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("viewType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UiModificationContextDetailsViewType ViewType { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UiModificationContextDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UiModificationContextDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UiModificationDetails
    {
        /// <summary>
        /// List of contexts of the UI modification. The maximum number of contexts is 1000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contexts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UiModificationContextDetails> Contexts { get; set; }

        /// <summary>
        /// The data of the UI modification. The maximum size of the data is 50000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The description of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the UI modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the UI modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UiModificationDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UiModificationDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Identifiers for a UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UiModificationIdentifiers
    {
        /// <summary>
        /// The ID of the UI modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The URL of the UI modification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UiModificationIdentifiers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UiModificationIdentifiers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UnrestrictedUserEmail
    {
        /// <summary>
        /// The accountId of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The email of the user
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UnrestrictedUserEmail FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UnrestrictedUserEmail>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateCustomFieldDetails
    {
        /// <summary>
        /// The description of the custom field. The maximum length is 40000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the custom field. It doesn't have to be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):
        /// <br/>
        /// <br/> *  `cascadingselect`: `cascadingselectsearcher`
        /// <br/> *  `datepicker`: `daterange`
        /// <br/> *  `datetime`: `datetimerange`
        /// <br/> *  `float`: `exactnumber` or `numberrange`
        /// <br/> *  `grouppicker`: `grouppickersearcher`
        /// <br/> *  `importid`: `exactnumber` or `numberrange`
        /// <br/> *  `labels`: `labelsearcher`
        /// <br/> *  `multicheckboxes`: `multiselectsearcher`
        /// <br/> *  `multigrouppicker`: `multiselectsearcher`
        /// <br/> *  `multiselect`: `multiselectsearcher`
        /// <br/> *  `multiuserpicker`: `userpickergroupsearcher`
        /// <br/> *  `multiversion`: `versionsearcher`
        /// <br/> *  `project`: `projectsearcher`
        /// <br/> *  `radiobuttons`: `multiselectsearcher`
        /// <br/> *  `readonlyfield`: `textsearcher`
        /// <br/> *  `select`: `multiselectsearcher`
        /// <br/> *  `textarea`: `textsearcher`
        /// <br/> *  `textfield`: `textsearcher`
        /// <br/> *  `url`: `exacttextsearcher`
        /// <br/> *  `userpicker`: `userpickergroupsearcher`
        /// <br/> *  `version`: `versionsearcher`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("searcherKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateCustomFieldDetailsSearcherKey SearcherKey { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateCustomFieldDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateCustomFieldDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID of a screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateDefaultScreenScheme
    {
        /// <summary>
        /// The ID of the screen scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screenSchemeId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ScreenSchemeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateDefaultScreenScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateDefaultScreenScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of the field configuration scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateFieldConfigurationSchemeDetails
    {
        /// <summary>
        /// The description of the field configuration scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1024)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the field configuration scheme. The name must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateFieldConfigurationSchemeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateFieldConfigurationSchemeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of issue security scheme level.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateIssueSecurityLevelDetails
    {
        /// <summary>
        /// The description of the issue security scheme level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the issue security scheme level. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateIssueSecurityLevelDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateIssueSecurityLevelDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateIssueSecuritySchemeRequestBean
    {
        /// <summary>
        /// The description of the security scheme scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the security scheme scheme. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateIssueSecuritySchemeRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateIssueSecuritySchemeRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a notification scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateNotificationSchemeDetails
    {
        /// <summary>
        /// The description of the notification scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4000)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the notification scheme. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateNotificationSchemeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateNotificationSchemeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue priority.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdatePriorityDetails
    {
        /// <summary>
        /// The description of the priority.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iconUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdatePriorityDetailsIconUrl IconUrl { get; set; }

        /// <summary>
        /// The name of the priority. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Name { get; set; }

        /// <summary>
        /// The status color of the priority in 3-digit or 6-digit hexadecimal format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusColor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusColor { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdatePriorityDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatePriorityDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateProjectDetails
    {
        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assigneeType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UpdateProjectDetailsAssigneeType AssigneeType { get; set; }

        /// <summary>
        /// An integer value for the project's avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long AvatarId { get; set; }

        /// <summary>
        /// The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-3-projectCategory-get) operation. To remove the project category from the project, set the value to `-1.`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CategoryId { get; set; }

        /// <summary>
        /// A brief description of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-3-issuesecurityschemes-get) resource to get all issue security scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueSecurityScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueSecurityScheme { get; set; }

        /// <summary>
        /// Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Cannot be provided with `leadAccountId`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lead", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lead { get; set; }

        /// <summary>
        /// The account ID of the project lead. Cannot be provided with `lead`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("leadAccountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string LeadAccountId { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-3-notificationscheme-get) resource to get a list of notification scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notificationScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long NotificationScheme { get; set; }

        /// <summary>
        /// The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-3-permissionscheme-get) resource to see a list of all permission scheme IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("permissionScheme", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PermissionScheme { get; set; }

        /// <summary>
        /// A link to information about this project, such as project documentation
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateProjectDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateProjectDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of an issue resolution.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateResolutionDetails
    {
        /// <summary>
        /// The description of the resolution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the resolution. Must be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(60)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateResolutionDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateResolutionDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a screen.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateScreenDetails
    {
        /// <summary>
        /// The description of the screen. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateScreenDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateScreenDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateScreenSchemeDetails
    {
        /// <summary>
        /// The description of the screen scheme. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("screens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UpdateScreenTypes Screens { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateScreenSchemeDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateScreenSchemeDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The IDs of the screens for the screen types of the screen scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateScreenTypes
    {
        /// <summary>
        /// The ID of the create screen. To remove the screen association, pass a null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("create", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Create { get; set; }

        /// <summary>
        /// The ID of the default screen. When specified, must include a screen ID as a default screen is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("default", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Default { get; set; }

        /// <summary>
        /// The ID of the edit screen. To remove the screen association, pass a null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("edit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Edit { get; set; }

        /// <summary>
        /// The ID of the view screen. To remove the screen association, pass a null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("view", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string View { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateScreenTypes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateScreenTypes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of a UI modification.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateUiModificationDetails
    {
        /// <summary>
        /// List of contexts of the UI modification. The maximum number of contexts is 1000. If provided, replaces all existing contexts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contexts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UiModificationContextDetails> Contexts { get; set; }

        /// <summary>
        /// The data of the UI modification. The maximum size of the data is 50000 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Data { get; set; }

        /// <summary>
        /// The description of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the UI modification. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateUiModificationDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateUiModificationDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdateUserToGroupBean
    {
        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string AccountId { get; set; }

        /// <summary>
        /// This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdateUserToGroupBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdateUserToGroupBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A project category.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UpdatedProjectCategory
    {
        /// <summary>
        /// The name of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The description of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the project category.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UpdatedProjectCategory FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UpdatedProjectCategory>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
    /// <br/>
    /// <br/> *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
    /// <br/> *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
    /// <br/> *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class User
    {
        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string AccountId { get; set; }

        /// <summary>
        /// The user account type. Can take the following values:
        /// <br/>
        /// <br/> *  `atlassian` regular Atlassian user account
        /// <br/> *  `app` system account used for Connect applications and OAuth to represent external systems
        /// <br/> *  `customer` Jira Service Desk account representing an external service desk
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserAccountType AccountType { get; set; }

        /// <summary>
        /// Whether the user is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Active { get; set; }

        /// <summary>
        /// The application roles the user is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("applicationRoles", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimpleListWrapperApplicationRole ApplicationRoles { get; set; }

        /// <summary>
        /// The avatars of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Expand options that include additional user details in the response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The groups that the user belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SimpleListWrapperGroupName Groups { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("locale", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Locale { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static User FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<User>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserBean
    {
        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string AccountId { get; set; }

        /// <summary>
        /// Whether the user is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Active { get; set; }

        /// <summary>
        /// The avatars of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserBeanAvatarUrls AvatarUrls { get; set; }

        /// <summary>
        /// The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
        /// <br/>The key of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  
        /// <br/>The username of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserBeanAvatarUrls
    {
        /// <summary>
        /// The URL of the user's 16x16 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("16x16", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _16x16 { get; set; }

        /// <summary>
        /// The URL of the user's 24x24 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("24x24", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _24x24 { get; set; }

        /// <summary>
        /// The URL of the user's 32x32 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("32x32", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _32x32 { get; set; }

        /// <summary>
        /// The URL of the user's 48x48 pixel avatar.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("48x48", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri _48x48 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserBeanAvatarUrls FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserBeanAvatarUrls>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
    /// <br/>
    /// <br/> *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
    /// <br/> *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
    /// <br/> *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserDetails
    {
        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string AccountId { get; set; }

        /// <summary>
        /// The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountType { get; set; }

        /// <summary>
        /// Whether the user is active.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Active { get; set; }

        /// <summary>
        /// The avatars of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrls", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AvatarUrlsBean AvatarUrls { get; set; }

        /// <summary>
        /// The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The email address of the user. Depending on the user’s privacy settings, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeZone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeZone { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Filter for a User Picker (single) custom field.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserFilter
    {
        /// <summary>
        /// Whether the filter is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("enabled", Required = Newtonsoft.Json.Required.Always)]
        public bool Enabled { get; set; }

        /// <summary>
        /// User groups autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 groups can be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groups", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Groups { get; set; }

        /// <summary>
        /// Roles that autocomplete suggestion users must belong to. If not provided, the default values are used. A maximum of 10 roles can be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<long> RoleIds { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserFilter FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserFilter>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of user account IDs.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserKey
    {
        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(128)]
        public string AccountId { get; set; }

        /// <summary>
        /// This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserKey FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserKey>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserList
    {
        /// <summary>
        /// The index of the last item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("end-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int EndIndex { get; set; }

        /// <summary>
        /// The list of items.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("items", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> Items { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("max-results", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The number of items on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("size", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Size { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start-index", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StartIndex { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserMigrationBean
    {
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Username { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserMigrationBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserMigrationBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a permission and its availability to a user.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserPermission
    {
        /// <summary>
        /// Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecatedKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool DeprecatedKey { get; set; }

        /// <summary>
        /// The description of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the permission is available to the user in the queried context.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("havePermission", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HavePermission { get; set; }

        /// <summary>
        /// The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The type of the permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UserPermissionType Type { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserPermission FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPermission>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A user found in a search.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class UserPickerUser
    {
        /// <summary>
        /// The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountId { get; set; }

        /// <summary>
        /// The avatar URL of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("avatarUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri AvatarUrl { get; set; }

        /// <summary>
        /// The display name of the user. Depending on the user’s privacy setting, this may be returned as null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("displayName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("html", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Html { get; set; }

        /// <summary>
        /// This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static UserPickerUser FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<UserPickerUser>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ValidationOptionsForCreate
    {
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<Levels> Levels { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ValidationOptionsForCreate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValidationOptionsForCreate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The level of validation to return from the API. If no values are provided, the default would return `WARNING` and `ERROR` level validation results.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ValidationOptionsForUpdate
    {
        [Newtonsoft.Json.JsonProperty("levels", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.MaxLength(2)]
        public System.Collections.Generic.ICollection<Levels2> Levels { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ValidationOptionsForUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValidationOptionsForUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An operand that is a user-provided value.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ValueOperand
    {
        /// <summary>
        /// Encoded value, which can be used directly in a JQL query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("encodedValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EncodedValue { get; set; }

        /// <summary>
        /// The operand value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static ValueOperand FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<ValueOperand>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a project version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Version
    {
        /// <summary>
        /// Indicates that the version is archived. Optional when creating or updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("archived", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Archived { get; set; }

        /// <summary>
        /// The description of the version. Optional when creating or updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
        /// <br/>
        /// <br/> *  `operations` Returns the list of operations available for this version.
        /// <br/> *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
        /// <br/>
        /// <br/>Optional for create and update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesStatusForFixVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public VersionIssuesStatus IssuesStatusForFixVersion { get; set; }

        /// <summary>
        /// The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("moveUnfixedIssuesTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri MoveUnfixedIssuesTo { get; set; }

        /// <summary>
        /// The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// If the expand option `operations` is used, returns the list of operations available for this version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SimpleLink> Operations { get; set; }

        /// <summary>
        /// Indicates that the version is overdue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("overdue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Overdue { get; set; }

        /// <summary>
        /// Deprecated. Use `projectId`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Project { get; set; }

        /// <summary>
        /// The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("releaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset ReleaseDate { get; set; }

        /// <summary>
        /// Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("released", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Released { get; set; }

        /// <summary>
        /// The URL of the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("startDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset StartDate { get; set; }

        /// <summary>
        /// The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userReleaseDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserReleaseDate { get; set; }

        /// <summary>
        /// The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("userStartDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UserStartDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Version FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Version>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Various counts of issues within a version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VersionIssueCounts
    {
        /// <summary>
        /// List of custom fields using the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldUsage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<VersionUsageInCustomField> CustomFieldUsage { get; set; }

        /// <summary>
        /// Count of issues where a version custom field is set to the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueCountWithCustomFieldsShowingVersion", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueCountWithCustomFieldsShowingVersion { get; set; }

        /// <summary>
        /// Count of issues where the `affectedVersion` is set to the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesAffectedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssuesAffectedCount { get; set; }

        /// <summary>
        /// Count of issues where the `fixVersion` is set to the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesFixedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssuesFixedCount { get; set; }

        /// <summary>
        /// The URL of these count details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VersionIssueCounts FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionIssueCounts>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Counts of the number of issues in various statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VersionIssuesStatus
    {
        /// <summary>
        /// Count of issues with status *done*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("done", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Done { get; set; }

        /// <summary>
        /// Count of issues with status *in progress*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("inProgress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long InProgress { get; set; }

        /// <summary>
        /// Count of issues with status *to do*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("toDo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ToDo { get; set; }

        /// <summary>
        /// Count of issues with a status other than *to do*, *in progress*, and *done*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unmapped", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Unmapped { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VersionIssuesStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionIssuesStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VersionMoveBean
    {
        /// <summary>
        /// The URL (self link) of the version after which to place the moved version. Cannot be used with `position`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("after", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri After { get; set; }

        /// <summary>
        /// An absolute position in which to place the moved version. Cannot be used with `after`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VersionMoveBeanPosition Position { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VersionMoveBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionMoveBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Associated related work to a version
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VersionRelatedWork
    {
        /// <summary>
        /// The category of the related work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Category { get; set; }

        /// <summary>
        /// The title of the related work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueId { get; set; }

        /// <summary>
        /// The id of the related work. For the native release note related work item, this will be null, and Rest API does not support updating it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relatedWorkId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelatedWorkId { get; set; }

        /// <summary>
        /// The title of the related work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// The URL of the related work
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Url { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VersionRelatedWork FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionRelatedWork>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Count of a version's unresolved issues.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VersionUnresolvedIssuesCount
    {
        /// <summary>
        /// Count of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssuesCount { get; set; }

        /// <summary>
        /// Count of unresolved issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuesUnresolvedCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssuesUnresolvedCount { get; set; }

        /// <summary>
        /// The URL of these count details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VersionUnresolvedIssuesCount FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionUnresolvedIssuesCount>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// List of custom fields using the version.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class VersionUsageInCustomField
    {
        /// <summary>
        /// The ID of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customFieldId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomFieldId { get; set; }

        /// <summary>
        /// The name of the custom field.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FieldName { get; set; }

        /// <summary>
        /// Count of the issues where the custom field contains the version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueCountWithVersionInCustomField", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long IssueCountWithVersionInCustomField { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static VersionUsageInCustomField FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<VersionUsageInCustomField>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The group or role to which this item is visible.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Visibility
    {
        /// <summary>
        /// The ID of the group or the name of the role that visibility of this item is restricted to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifier", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identifier { get; set; }

        /// <summary>
        /// Whether visibility of this item is restricted to a group or role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public VisibilityType Type { get; set; }

        /// <summary>
        /// The name of the group or role that visibility of this item is restricted to. Please note that the name of a group is mutable, to reliably identify a group use `identifier`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Visibility FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Visibility>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of votes on an issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Votes
    {
        /// <summary>
        /// Whether the user making this request has voted on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasVoted", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasVoted { get; set; }

        /// <summary>
        /// The URL of these issue vote details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("voters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<User> Voters { get; set; }

        /// <summary>
        /// The number of votes on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("votes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Votes1 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Votes FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Votes>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WarningCollection
    {
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Warnings { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WarningCollection FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WarningCollection>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of watchers on an issue.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Watchers
    {
        /// <summary>
        /// Whether the calling user is watching this issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isWatching", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsWatching { get; set; }

        /// <summary>
        /// The URL of these issue watcher details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Self { get; set; }

        /// <summary>
        /// The number of users watching this issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchCount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WatchCount { get; set; }

        /// <summary>
        /// Details of the users watching this issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("watchers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<UserDetails> Watchers1 { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Watchers FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Watchers>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A webhook.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Webhook
    {
        /// <summary>
        /// The Jira events that trigger the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events>();

        /// <summary>
        /// The date after which the webhook is no longer sent. Use [Extend webhook life](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-webhooks/#api-rest-api-3-webhook-refresh-put) to extend the date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long ExpirationDate { get; set; }

        /// <summary>
        /// A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldIdsFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FieldIdsFilter { get; set; }

        /// <summary>
        /// The ID of the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public long Id { get; set; }

        /// <summary>
        /// A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuePropertyKeysFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssuePropertyKeysFilter { get; set; }

        /// <summary>
        /// The JQL filter that specifies which issues the webhook is sent for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqlFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JqlFilter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Webhook FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Webhook>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A list of webhooks.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebhookDetails
    {
        /// <summary>
        /// The Jira events that trigger the webhook.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("events", Required = Newtonsoft.Json.Required.Always, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Events2> Events { get; set; } = new System.Collections.ObjectModel.Collection<Events2>();

        /// <summary>
        /// A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fieldIdsFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FieldIdsFilter { get; set; }

        /// <summary>
        /// A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuePropertyKeysFilter", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> IssuePropertyKeysFilter { get; set; }

        /// <summary>
        /// The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:
        /// <br/>
        /// <br/> *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.".
        /// <br/> *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jqlFilter", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string JqlFilter { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WebhookDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebhookDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of webhooks to register.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebhookRegistrationDetails
    {
        /// <summary>
        /// The URL that specifies where to send the webhooks. This URL must use the same base URL as the Connect app. Only a single URL per app is allowed to be registered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Url { get; set; }

        /// <summary>
        /// A list of webhooks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhooks", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WebhookDetails> Webhooks { get; set; } = new System.Collections.ObjectModel.Collection<WebhookDetails>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WebhookRegistrationDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebhookRegistrationDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The date the refreshed webhooks expire.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WebhooksExpirationDate
    {
        /// <summary>
        /// The expiration date of all the refreshed webhooks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expirationDate", Required = Newtonsoft.Json.Required.Always)]
        public long ExpirationDate { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WebhooksExpirationDate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WebhooksExpirationDate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkManagementNavigationInfo
    {
        [Newtonsoft.Json.JsonProperty("boardName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BoardName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkManagementNavigationInfo FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkManagementNavigationInfo>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Workflow
    {
        /// <summary>
        /// The creation date of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the workflow has a draft version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasDraftWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool HasDraftWorkflow { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public PublishedWorkflowId Id { get; set; } = new PublishedWorkflowId();

        /// <summary>
        /// Whether this is the default workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isDefault", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsDefault { get; set; }

        [Newtonsoft.Json.JsonProperty("operations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowOperations Operations { get; set; }

        /// <summary>
        /// The projects the workflow is assigned to, through workflow schemes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projects", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectDetails> Projects { get; set; }

        /// <summary>
        /// The workflow schemes the workflow is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("schemes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowSchemeIdName> Schemes { get; set; }

        /// <summary>
        /// The statuses of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// The transitions of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Transition> Transitions { get; set; }

        /// <summary>
        /// The last edited date of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Workflow FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Workflow>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The list of status mappings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowAssociationStatusMapping
    {
        /// <summary>
        /// The ID of the status in the new workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("newStatusId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NewStatusId { get; set; }

        /// <summary>
        /// The ID of the status in the old workflow that isn't present in the new workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("oldStatusId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string OldStatusId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowAssociationStatusMapping FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowAssociationStatusMapping>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowCapabilities
    {
        /// <summary>
        /// The Connect provided ecosystem rules available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("connectRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableWorkflowConnectRule> ConnectRules { get; set; }

        /// <summary>
        /// The scope of the workflow capabilities. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("editorScope", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowCapabilitiesEditorScope EditorScope { get; set; }

        /// <summary>
        /// The Forge provided ecosystem rules available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("forgeRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableWorkflowForgeRule> ForgeRules { get; set; }

        /// <summary>
        /// The types of projects that this capability set is available for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<ProjectTypes> ProjectTypes { get; set; }

        /// <summary>
        /// The Atlassian provided system rules available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableWorkflowSystemRule> SystemRules { get; set; }

        /// <summary>
        /// The trigger rules available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggerRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AvailableWorkflowTriggers> TriggerRules { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowCapabilities FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowCapabilities>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A compound workflow transition rule condition. This object returns `nodeType` as `compound`.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowCompoundCondition
    {
        /// <summary>
        /// The list of workflow conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Conditions> Conditions { get; set; } = new System.Collections.ObjectModel.Collection<Conditions>();

        [Newtonsoft.Json.JsonProperty("nodeType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string NodeType { get; set; }

        /// <summary>
        /// The compound condition operator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operator", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowCompoundConditionOperator Operator { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowCompoundCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowCompoundCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The workflow transition rule conditions tree.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowCondition
    {

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowCondition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowCondition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of the workflows to create.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowCreate
    {
        /// <summary>
        /// The description of the workflow to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the workflow to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("startPointLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout StartPointLayout { get; set; }

        /// <summary>
        /// The statuses associated with this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusLayoutUpdate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusLayoutUpdate>();

        /// <summary>
        /// The transitions of this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransitionUpdateDTO> Transitions { get; set; } = new System.Collections.ObjectModel.Collection<TransitionUpdateDTO>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowCreate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowCreate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The create workflows payload.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowCreateRequest
    {
        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowScope Scope { get; set; } = new WorkflowScope();

        /// <summary>
        /// The statuses to associate with the workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowStatusUpdate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowStatusUpdate>();

        /// <summary>
        /// The details of the workflows to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowCreate> Workflows { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowCreate>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowCreateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowCreateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the created workflows and statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowCreateResponse
    {
        /// <summary>
        /// List of created statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// List of created workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflow> Workflows { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowCreateResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowCreateResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowCreateValidateRequest
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowCreateRequest Payload { get; set; } = new WorkflowCreateRequest();

        [Newtonsoft.Json.JsonProperty("validationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValidationOptionsForCreate ValidationOptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowCreateValidateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowCreateValidateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A reference to the location of the error. This will be null if the error does not refer to a specific element.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowElementReference
    {
        /// <summary>
        /// A property key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("propertyKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PropertyKey { get; set; }

        /// <summary>
        /// A rule ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RuleId { get; set; }

        [Newtonsoft.Json.JsonProperty("statusMappingReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectAndIssueTypePair StatusMappingReference { get; set; }

        /// <summary>
        /// A status reference.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

        /// <summary>
        /// A transition ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TransitionId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowElementReference FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowElementReference>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The classic workflow identifiers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowIDs
    {
        /// <summary>
        /// The entity ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntityId { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowIDs FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowIDs>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Properties that identify a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowId
    {
        /// <summary>
        /// Whether the workflow is in the draft state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.Always)]
        public bool Draft { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowId FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowId>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The starting point for the statuses in the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowLayout
    {
        /// <summary>
        /// The x axis location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double X { get; set; }

        /// <summary>
        /// The y axis location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowLayout FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowLayout>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The workflow metadata and issue type IDs which use this workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowMetadataAndIssueTypeRestModel
    {
        /// <summary>
        /// The list of issue type IDs for the mapping.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("workflow", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowMetadataRestModel Workflow { get; set; } = new WorkflowMetadataRestModel();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowMetadataAndIssueTypeRestModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowMetadataAndIssueTypeRestModel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Workflow metadata and usage detail.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowMetadataRestModel
    {
        /// <summary>
        /// The description of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Use the optional `workflows.usages` expand to get additional information about the projects and issue types associated with the workflows in the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("usage", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<SimpleUsage> Usage { get; set; } = new System.Collections.ObjectModel.Collection<SimpleUsage>();

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DocumentVersion Version { get; set; } = new DocumentVersion();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowMetadataRestModel FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowMetadataRestModel>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Operations allowed on a workflow
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowOperations
    {
        /// <summary>
        /// Whether the workflow can be deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canDelete", Required = Newtonsoft.Json.Required.Always)]
        public bool CanDelete { get; set; }

        /// <summary>
        /// Whether the workflow can be updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("canEdit", Required = Newtonsoft.Json.Required.Always)]
        public bool CanEdit { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowOperations FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowOperations>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowReadRequest
    {
        /// <summary>
        /// The list of projects and issue types to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectAndIssueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ProjectAndIssueTypePair> ProjectAndIssueTypes { get; set; }

        /// <summary>
        /// The list of workflow IDs to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowIds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkflowIds { get; set; }

        /// <summary>
        /// The list of workflow names to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowNames", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkflowNames { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowReadRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowReadRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of workflows and related statuses.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowReadResponse
    {
        /// <summary>
        /// List of statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// List of workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflow> Workflows { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowReadResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowReadResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The statuses referenced in the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowReferenceStatus
    {
        /// <summary>
        /// Indicates if the status is deprecated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deprecated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deprecated { get; set; }

        [Newtonsoft.Json.JsonProperty("layout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowStatusLayout Layout { get; set; }

        /// <summary>
        /// The properties associated with the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        /// <summary>
        /// The reference of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowReferenceStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowReferenceStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The configuration of the rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowRuleConfiguration
    {
        /// <summary>
        /// The ID of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The parameters related to the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; }

        /// <summary>
        /// The rule key of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleKey { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowRuleConfiguration FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowRuleConfiguration>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A collection of transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowRules
    {
        [Newtonsoft.Json.JsonProperty("conditionsTree", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Conditions ConditionsTree { get; set; }

        /// <summary>
        /// The workflow post functions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postFunctions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRule> PostFunctions { get; set; }

        /// <summary>
        /// The workflow validators.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRule> Validators { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowRules FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowRules>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the workflow and its transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowRulesSearch
    {
        /// <summary>
        /// Use expand to include additional information in the response. This parameter accepts `transition` which, for each rule, returns information about the transition the rule is assigned to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expand", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Expand { get; set; }

        /// <summary>
        /// The list of workflow rule IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        [System.ComponentModel.DataAnnotations.MaxLength(10)]
        public System.Collections.Generic.ICollection<System.Guid> RuleIds { get; set; } = new System.Collections.ObjectModel.Collection<System.Guid>();

        /// <summary>
        /// The workflow ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowEntityId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.Guid WorkflowEntityId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowRulesSearch FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowRulesSearch>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of workflow transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowRulesSearchDetails
    {
        /// <summary>
        /// List of workflow rule IDs that do not belong to the workflow or can not be found.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("invalidRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> InvalidRules { get; set; }

        /// <summary>
        /// List of valid workflow transition rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validRules", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTransitionRules> ValidRules { get; set; }

        /// <summary>
        /// The workflow ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowEntityId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid WorkflowEntityId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowRulesSearchDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowRulesSearchDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowScheme
    {
        /// <summary>
        /// The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultWorkflow { get; set; }

        /// <summary>
        /// The description of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the workflow scheme is a draft or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("draft", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Draft { get; set; }

        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Id { get; set; }

        /// <summary>
        /// The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> IssueTypeMappings { get; set; }

        /// <summary>
        /// The issue types available in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, IssueTypeDetails> IssueTypes { get; set; }

        /// <summary>
        /// The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModified", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LastModified { get; set; }

        /// <summary>
        /// The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastModifiedUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public User LastModifiedUser { get; set; }

        /// <summary>
        /// The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalDefaultWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OriginalDefaultWorkflow { get; set; }

        /// <summary>
        /// For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("originalIssueTypeMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> OriginalIssueTypeMappings { get; set; }

        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
        /// <br/>
        /// <br/> *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
        /// <br/> *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
        /// <br/> *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.
        /// <br/>
        /// <br/>Defaults to `false`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateDraftIfNeeded", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool UpdateDraftIfNeeded { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowScheme FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowScheme>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The explicit association between issue types and a workflow in a workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeAssociation
    {
        /// <summary>
        /// The issue types assigned to the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueTypeIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> IssueTypeIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The ID of the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string WorkflowId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeAssociation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeAssociation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A workflow scheme along with a list of projects that use it.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeAssociations
    {
        /// <summary>
        /// The list of projects that use the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        /// <summary>
        /// The workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowScheme", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowScheme WorkflowScheme { get; set; } = new WorkflowScheme();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeAssociations FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeAssociations>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The ID and the name of the workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeIdName
    {
        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeIdName FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeIdName>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// An associated workflow scheme and project.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeProjectAssociation
    {
        /// <summary>
        /// The ID of the project.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowSchemeId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowSchemeId { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeProjectAssociation FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeProjectAssociation>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The workflow scheme read request body.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeReadRequest
    {
        /// <summary>
        /// The list of project IDs to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> ProjectIds { get; set; }

        /// <summary>
        /// The list of workflow scheme IDs to query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowSchemeIds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> WorkflowSchemeIds { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeReadRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeReadRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeReadResponse
    {
        [Newtonsoft.Json.JsonProperty("defaultWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowMetadataRestModel DefaultWorkflow { get; set; }

        /// <summary>
        /// The description of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The IDs of projects using the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("projectIdsUsingScheme", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> ProjectIdsUsingScheme { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("scope", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowScope Scope { get; set; } = new WorkflowScope();

        /// <summary>
        /// Indicates if there's an [asynchronous task](#async-operations) for this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DocumentVersion Version { get; set; } = new DocumentVersion();

        /// <summary>
        /// Mappings from workflows to issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowsForIssueTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowMetadataAndIssueTypeRestModel> WorkflowsForIssueTypes { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowMetadataAndIssueTypeRestModel>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeReadResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeReadResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The update workflow scheme payload.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeUpdateRequest
    {
        /// <summary>
        /// The ID of the workflow for issue types without having a mapping defined in this workflow scheme. Only used in global-scoped workflow schemes. If the `defaultWorkflowId` isn't specified, this is set to *Jira Workflow (jira)*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultWorkflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultWorkflowId { get; set; }

        /// <summary>
        /// The new description for this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The new name for this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Overrides, for the selected issue types, any status mappings provided in `statusMappingsByWorkflows`. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappingsByIssueTypeOverride", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MappingsByIssueTypeOverride> StatusMappingsByIssueTypeOverride { get; set; }

        /// <summary>
        /// The status mappings by workflows. Status mappings are required when the new workflow for an issue type doesn't contain all statuses that the old workflow has. Status mappings can be provided by a combination of `statusMappingsByWorkflows` and `statusMappingsByIssueTypeOverride`.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappingsByWorkflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MappingsByWorkflow> StatusMappingsByWorkflows { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DocumentVersion Version { get; set; } = new DocumentVersion();

        /// <summary>
        /// Mappings from workflows to issue types.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowsForIssueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowSchemeAssociation> WorkflowsForIssueTypes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The request payload to get the required mappings for updating a workflow scheme.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeUpdateRequiredMappingsRequest
    {
        /// <summary>
        /// The ID of the new default workflow for this workflow scheme. Only used in global-scoped workflow schemes. If it isn't specified, is set to *Jira Workflow (jira)*.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultWorkflowId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DefaultWorkflowId { get; set; }

        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The new workflow to issue type mappings for this workflow scheme.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowsForIssueTypes", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowSchemeAssociation> WorkflowsForIssueTypes { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowSchemeAssociation>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeUpdateRequiredMappingsRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeUpdateRequiredMappingsRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowSchemeUpdateRequiredMappingsResponse
    {
        /// <summary>
        /// The list of required status mappings by issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappingsByIssueTypes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequiredMappingByIssueType> StatusMappingsByIssueTypes { get; set; }

        /// <summary>
        /// The list of required status mappings by workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappingsByWorkflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequiredMappingByWorkflows> StatusMappingsByWorkflows { get; set; }

        /// <summary>
        /// The details of the statuses in the associated workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusMetadata> Statuses { get; set; }

        /// <summary>
        /// The statuses associated with each workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusesPerWorkflow", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusesPerWorkflow> StatusesPerWorkflow { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowSchemeUpdateRequiredMappingsResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowSchemeUpdateRequiredMappingsResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The scope of the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowScope
    {
        [Newtonsoft.Json.JsonProperty("project", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ProjectId Project { get; set; }

        /// <summary>
        /// The scope of the workflow. `GLOBAL` for company-managed projects and `PROJECT` for team-managed projects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowScopeType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowScope FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowScope>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a workflow status.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowStatus
    {
        /// <summary>
        /// The ID of the issue status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status in the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Additional properties that modify the behavior of issues in this status. Supports the properties `jira.issue.editable` and `issueEditable` (deprecated) that indicate whether issues are editable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, object> Properties { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowStatus FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowStatus>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The status reference and port that a transition is connected to.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowStatusAndPort
    {
        /// <summary>
        /// The port the transition is connected to this status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("port", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Port { get; set; }

        /// <summary>
        /// The reference of this status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusReference { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowStatusAndPort FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowStatusAndPort>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The x and y location of the status in the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowStatusLayout
    {
        /// <summary>
        /// The x axis location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("x", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? X { get; set; }

        /// <summary>
        /// The y axis location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Y { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowStatusLayout FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowStatusLayout>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of the status being updated.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowStatusUpdate
    {
        /// <summary>
        /// The description of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The category of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCategory", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowStatusUpdateStatusCategory StatusCategory { get; set; }

        /// <summary>
        /// The reference of the status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusReference", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string StatusReference { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowStatusUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowStatusUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A workflow transition.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransition
    {
        /// <summary>
        /// The transition ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        public int Id { get; set; }

        /// <summary>
        /// The transition name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransition FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransition>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about the server Jira is running on.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransitionProperty
    {
        /// <summary>
        /// The ID of the transition property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the transition property. Also known as the name of the transition property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }

        /// <summary>
        /// The value of the transition property.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransitionProperty FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransitionProperty>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A workflow transition rule.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransitionRule
    {
        /// <summary>
        /// EXPERIMENTAL. The configuration of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("configuration", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Configuration { get; set; }

        /// <summary>
        /// The type of the transition rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransitionRule FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransitionRule>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// A workflow with transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransitionRules
    {
        /// <summary>
        /// The list of conditions within the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppWorkflowTransitionRule> Conditions { get; set; }

        /// <summary>
        /// The list of post functions within the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postFunctions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppWorkflowTransitionRule> PostFunctions { get; set; }

        /// <summary>
        /// The list of validators within the workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<AppWorkflowTransitionRule> Validators { get; set; }

        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowId WorkflowId { get; set; } = new WorkflowId();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransitionRules FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransitionRules>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a workflow configuration update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransitionRulesDetails
    {
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowId WorkflowId { get; set; } = new WorkflowId();

        /// <summary>
        /// The list of connect workflow rule IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowRuleIds", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> WorkflowRuleIds { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransitionRulesDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransitionRulesDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details about a workflow configuration update request.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransitionRulesUpdate
    {
        /// <summary>
        /// The list of workflows with transition rules to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowTransitionRules> Workflows { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTransitionRules>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransitionRulesUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransitionRulesUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of any errors encountered while updating workflow transition rules for a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransitionRulesUpdateErrorDetails
    {
        /// <summary>
        /// A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleUpdateErrors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> RuleUpdateErrors { get; set; } = new System.Collections.Generic.Dictionary<string, System.Collections.Generic.ICollection<string>>();

        /// <summary>
        /// The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateErrors", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> UpdateErrors { get; set; } = new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowId WorkflowId { get; set; } = new WorkflowId();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransitionRulesUpdateErrorDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransitionRulesUpdateErrorDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of any errors encountered while updating workflow transition rules.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransitionRulesUpdateErrors
    {
        /// <summary>
        /// A list of workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateResults", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowTransitionRulesUpdateErrorDetails> UpdateResults { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTransitionRulesUpdateErrorDetails>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransitionRulesUpdateErrors FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransitionRulesUpdateErrors>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The transitions of the workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTransitions
    {
        /// <summary>
        /// The post-functions of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("actions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Actions { get; set; }

        [Newtonsoft.Json.JsonProperty("conditions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConditionGroupConfiguration Conditions { get; set; }

        /// <summary>
        /// The custom event ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customIssueEventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomIssueEventId { get; set; }

        /// <summary>
        /// The description of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("from", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowStatusAndPort> From { get; set; }

        /// <summary>
        /// The ID of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The name of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.IDictionary<string, string> Properties { get; set; }

        [Newtonsoft.Json.JsonProperty("to", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowStatusAndPort To { get; set; }

        [Newtonsoft.Json.JsonProperty("transitionScreen", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowRuleConfiguration TransitionScreen { get; set; }

        /// <summary>
        /// The triggers of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("triggers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowTrigger> Triggers { get; set; }

        /// <summary>
        /// The transition type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowTransitionsType Type { get; set; }

        /// <summary>
        /// The validators of the transition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validators", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowRuleConfiguration> Validators { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTransitions FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTransitions>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The trigger configuration associated with a workflow.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowTrigger
    {
        /// <summary>
        /// The ID of the trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The parameters of the trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("parameters", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.IDictionary<string, string> Parameters { get; set; } = new System.Collections.Generic.Dictionary<string, string>();

        /// <summary>
        /// The rule key of the trigger.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ruleKey", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string RuleKey { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowTrigger FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowTrigger>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details of the workflows to update.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowUpdate
    {
        /// <summary>
        /// The mapping of old to new status ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("defaultStatusMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusMigration> DefaultStatusMappings { get; set; }

        /// <summary>
        /// The new description for this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("startPointLayout", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowLayout StartPointLayout { get; set; }

        /// <summary>
        /// The mapping of old to new status ID for a specific project and issue type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusMappings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StatusMappingDTO> StatusMappings { get; set; }

        /// <summary>
        /// The statuses associated with this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<StatusLayoutUpdate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<StatusLayoutUpdate>();

        /// <summary>
        /// The transitions of this workflow.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transitions", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TransitionUpdateDTO> Transitions { get; set; } = new System.Collections.ObjectModel.Collection<TransitionUpdateDTO>();

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public DocumentVersion Version { get; set; } = new DocumentVersion();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowUpdate FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowUpdate>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The update workflows payload.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowUpdateRequest
    {
        /// <summary>
        /// The statuses to associate with the workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowStatusUpdate> Statuses { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowStatusUpdate>();

        /// <summary>
        /// The details of the workflows to update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowUpdate> Workflows { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowUpdate>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowUpdateRequest FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowUpdateRequest>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowUpdateResponse
    {
        /// <summary>
        /// List of updated statuses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statuses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// If there is a [asynchronous task](#async-operations) operation, as a result of this update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taskId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TaskId { get; set; }

        /// <summary>
        /// List of updated workflows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<JiraWorkflow> Workflows { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowUpdateResponse FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowUpdateResponse>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowUpdateValidateRequestBean
    {
        [Newtonsoft.Json.JsonProperty("payload", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public WorkflowUpdateRequest Payload { get; set; } = new WorkflowUpdateRequest();

        [Newtonsoft.Json.JsonProperty("validationOptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ValidationOptionsForUpdate ValidationOptions { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowUpdateValidateRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowUpdateValidateRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The workflows that use this status. Only available if the `workflowUsages` expand is requested.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowUsages
    {
        /// <summary>
        /// Workflow ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowId { get; set; }

        /// <summary>
        /// Workflow name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflowName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WorkflowName { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowUsages FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowUsages>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// The details about a workflow validation error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowValidationError
    {
        /// <summary>
        /// An error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        [Newtonsoft.Json.JsonProperty("elementReference", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public WorkflowElementReference ElementReference { get; set; }

        /// <summary>
        /// The validation error level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowValidationErrorLevel Level { get; set; }

        /// <summary>
        /// An error message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        /// <summary>
        /// The type of element the error or warning references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public WorkflowValidationErrorType Type { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowValidationError FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowValidationError>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowValidationErrorList
    {
        /// <summary>
        /// The list of validation errors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errors", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WorkflowValidationError> Errors { get; set; }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowValidationErrorList FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowValidationErrorList>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of workflows and their transition rules to delete.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorkflowsWithTransitionRulesDetails
    {
        /// <summary>
        /// The list of workflows with transition rules to delete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workflows", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<WorkflowTransitionRulesDetails> Workflows { get; set; } = new System.Collections.ObjectModel.Collection<WorkflowTransitionRulesDetails>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorkflowsWithTransitionRulesDetails FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorkflowsWithTransitionRulesDetails>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    /// <summary>
    /// Details of a worklog.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Worklog
    {
        /// <summary>
        /// Details of the user who created the worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("author", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails Author { get; set; }

        /// <summary>
        /// A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("comment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Comment { get; set; }

        /// <summary>
        /// The datetime on which the worklog was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created { get; set; }

        /// <summary>
        /// The ID of the worklog record.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the issue this worklog is for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issueId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IssueId { get; set; }

        /// <summary>
        /// Details of properties for the worklog. Optional when creating or updating a worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<EntityProperty> Properties { get; set; }

        /// <summary>
        /// The URL of the worklog item.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("self", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Uri Self { get; set; }

        /// <summary>
        /// The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("started", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Started { get; set; }

        /// <summary>
        /// The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TimeSpent { get; set; }

        /// <summary>
        /// The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timeSpentSeconds", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long TimeSpentSeconds { get; set; }

        /// <summary>
        /// Details of the user who last updated the worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updateAuthor", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public UserDetails UpdateAuthor { get; set; }

        /// <summary>
        /// The datetime on which the worklog was last updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated { get; set; }

        /// <summary>
        /// Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("visibility", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Visibility Visibility { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static Worklog FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<Worklog>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class WorklogIdsRequestBean
    {
        /// <summary>
        /// A list of worklog IDs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<long> Ids { get; set; } = new System.Collections.ObjectModel.Collection<long>();

        public string ToJson()
        {

            return Newtonsoft.Json.JsonConvert.SerializeObject(this, new Newtonsoft.Json.JsonSerializerSettings());

        }
        public static WorklogIdsRequestBean FromJson(string data)
        {

            return Newtonsoft.Json.JsonConvert.DeserializeObject<WorklogIdsRequestBean>(data, new Newtonsoft.Json.JsonSerializerSettings());

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Filter2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"my")]
        My = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"favourite")]
        Favourite = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"favorite_count")]
        Favorite_count = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-favorite_count")]
        Minusfavorite_count = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+favorite_count")]
        Plusfavorite_count = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"is_favorite")]
        Is_favorite = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-is_favorite")]
        Minusis_favorite = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+is_favorite")]
        Plusis_favorite = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"-owner")]
        Minusowner = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"+owner")]
        Plusowner = 17,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Status2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Check
    {

        [System.Runtime.Serialization.EnumMember(Value = @"syntax")]
        Syntax = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"complexity")]
        Complexity = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"custom")]
        Custom = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"system")]
        System = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"contextsCount")]
        ContextsCount = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-contextsCount")]
        MinuscontextsCount = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+contextsCount")]
        PluscontextsCount = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"lastUsed")]
        LastUsed = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-lastUsed")]
        MinuslastUsed = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+lastUsed")]
        PluslastUsed = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"screensCount")]
        ScreensCount = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-screensCount")]
        MinusscreensCount = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+screensCount")]
        PlusscreensCount = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"projectsCount")]
        ProjectsCount = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-projectsCount")]
        MinusprojectsCount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+projectsCount")]
        PlusprojectsCount = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Expand
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"trashDate")]
        TrashDate = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-trashDate")]
        MinustrashDate = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+trashDate")]
        PlustrashDate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"plannedDeletionDate")]
        PlannedDeletionDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-plannedDeletionDate")]
        MinusplannedDeletionDate = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+plannedDeletionDate")]
        PlusplannedDeletionDate = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"projectsCount")]
        ProjectsCount = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-projectsCount")]
        MinusprojectsCount = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+projectsCount")]
        PlusprojectsCount = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"favourite_count")]
        Favourite_count = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-favourite_count")]
        Minusfavourite_count = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+favourite_count")]
        Plusfavourite_count = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"is_favourite")]
        Is_favourite = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-is_favourite")]
        Minusis_favourite = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+is_favourite")]
        Plusis_favourite = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"-owner")]
        Minusowner = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"+owner")]
        Plusowner = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"is_shared")]
        Is_shared = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"-is_shared")]
        Minusis_shared = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"+is_shared")]
        Plusis_shared = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AvatarSize
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall")]
        Xsmall = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall@2x")]
        Xsmall_2x = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall@3x")]
        Xsmall_3x = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"small@2x")]
        Small_2x = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"small@3x")]
        Small_3x = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"medium@2x")]
        Medium_2x = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"medium@3x")]
        Medium_3x = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"large@2x")]
        Large_2x = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"large@3x")]
        Large_3x = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge")]
        Xlarge = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge@2x")]
        Xlarge_2x = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge@3x")]
        Xlarge_3x = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"xxlarge")]
        Xxlarge = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"xxlarge@2x")]
        Xxlarge_2x = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"xxlarge@3x")]
        Xxlarge_3x = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"xxxlarge")]
        Xxxlarge = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"xxxlarge@2x")]
        Xxxlarge_2x = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"xxxlarge@3x")]
        Xxxlarge_3x = 20,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum DeleteSubtasks
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-created")]
        Minuscreated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+created")]
        Pluscreated = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AdjustEstimate
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AdjustEstimate2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AdjustEstimate3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"new")]
        New = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"leave")]
        Leave = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"manual")]
        Manual = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"auto")]
        Auto = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Validation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"strict")]
        Strict = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ApplicationKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"jira-core")]
        JiraCore = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jira-product-discovery")]
        JiraProductDiscovery = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jira-software")]
        JiraSoftware = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"jira-servicedesk")]
        JiraServicedesk = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"category")]
        Category = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-category")]
        Minuscategory = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+category")]
        Pluscategory = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"key")]
        Key = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-key")]
        Minuskey = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+key")]
        Pluskey = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"owner")]
        Owner = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-owner")]
        Minusowner = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+owner")]
        Plusowner = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"issueCount")]
        IssueCount = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-issueCount")]
        MinusissueCount = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+issueCount")]
        PlusissueCount = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"lastIssueUpdatedDate")]
        LastIssueUpdatedDate = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"-lastIssueUpdatedDate")]
        MinuslastIssueUpdatedDate = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"+lastIssueUpdatedDate")]
        PluslastIssueUpdatedDate = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"archivedDate")]
        ArchivedDate = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"+archivedDate")]
        PlusarchivedDate = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"-archivedDate")]
        MinusarchivedDate = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"deletedDate")]
        DeletedDate = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"+deletedDate")]
        PlusdeletedDate = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"-deletedDate")]
        MinusdeletedDate = 23,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Action
    {

        [System.Runtime.Serialization.EnumMember(Value = @"view")]
        View = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"browse")]
        Browse = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"edit")]
        Edit = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"archived")]
        Archived = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"deleted")]
        Deleted = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectTypeKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"product_discovery")]
        Product_discovery = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectTypeKey2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"product_discovery")]
        Product_discovery = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy8
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"issueCount")]
        IssueCount = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-issueCount")]
        MinusissueCount = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+issueCount")]
        PlusissueCount = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"lead")]
        Lead = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-lead")]
        Minuslead = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+lead")]
        Pluslead = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy9
    {

        [System.Runtime.Serialization.EnumMember(Value = @"description")]
        Description = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-description")]
        Minusdescription = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+description")]
        Plusdescription = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"releaseDate")]
        ReleaseDate = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"-releaseDate")]
        MinusreleaseDate = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"+releaseDate")]
        PlusreleaseDate = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"sequence")]
        Sequence = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"-sequence")]
        Minussequence = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"+sequence")]
        Plussequence = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"startDate")]
        StartDate = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"-startDate")]
        MinusstartDate = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"+startDate")]
        PlusstartDate = 14,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPLATE")]
        TEMPLATE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy10
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy11
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"id")]
        Id = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-id")]
        Minusid = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+id")]
        Plusid = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ValidateQuery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"strict")]
        Strict = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type5
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Size
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall")]
        Xsmall = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge")]
        Xlarge = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Format
    {

        [System.Runtime.Serialization.EnumMember(Value = @"png")]
        Png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"svg")]
        Svg = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type6
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Size2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall")]
        Xsmall = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge")]
        Xlarge = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Format2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"png")]
        Png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"svg")]
        Svg = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type7
    {

        [System.Runtime.Serialization.EnumMember(Value = @"issuetype")]
        Issuetype = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Size3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"xsmall")]
        Xsmall = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"small")]
        Small = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"medium")]
        Medium = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"large")]
        Large = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"xlarge")]
        Xlarge = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Format3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"png")]
        Png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"svg")]
        Svg = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Anonymous4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"postfunction")]
        Postfunction = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"condition")]
        Condition = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"validator")]
        Validator = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderBy12
    {

        [System.Runtime.Serialization.EnumMember(Value = @"name")]
        Name = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"-name")]
        Minusname = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"+name")]
        Plusname = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"created")]
        Created = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"-created")]
        Minuscreated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"+created")]
        Pluscreated = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"updated")]
        Updated = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"+updated")]
        Plusupdated = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"-updated")]
        Minusupdated = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowMode2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowMode3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowMode4
    {

        [System.Runtime.Serialization.EnumMember(Value = @"live")]
        Live = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"draft")]
        Draft = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum EntityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"IssueProperty")]
        IssueProperty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"CommentProperty")]
        CommentProperty = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DashboardItemProperty")]
        DashboardItemProperty = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"IssueTypeProperty")]
        IssueTypeProperty = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ProjectProperty")]
        ProjectProperty = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"UserProperty")]
        UserProperty = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"WorklogProperty")]
        WorklogProperty = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"BoardProperty")]
        BoardProperty = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"SprintProperty")]
        SprintProperty = 8,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AnnouncementBannerConfigurationVisibility
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PUBLIC")]
        PUBLIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVATE")]
        PRIVATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AvailableWorkflowConnectRuleRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Condition")]
        Condition = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Validator")]
        Validator = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Function")]
        Function = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Screen")]
        Screen = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AvailableWorkflowForgeRuleRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Condition")]
        Condition = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Validator")]
        Validator = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Function")]
        Function = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Screen")]
        Screen = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum AvailableWorkflowSystemRuleRuleType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Condition")]
        Condition = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Validator")]
        Validator = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Function")]
        Function = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Screen")]
        Screen = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum BulkEditShareableEntityRequestAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"changeOwner")]
        ChangeOwner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"changePermission")]
        ChangePermission = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"addPermission")]
        AddPermission = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"removePermission")]
        RemovePermission = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum BulkEditShareableEntityResponseAction
    {

        [System.Runtime.Serialization.EnumMember(Value = @"changeOwner")]
        ChangeOwner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"changePermission")]
        ChangePermission = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"addPermission")]
        AddPermission = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"removePermission")]
        RemovePermission = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ComponentWithIssueCountAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ComponentWithIssueCountRealAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CompoundClauseOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"and")]
        And = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"or")]
        Or = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"not")]
        Not = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ConditionGroupConfigurationOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ConditionGroupUpdateOperation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ConnectCustomFieldValue_type
    {

        [System.Runtime.Serialization.EnumMember(Value = @"StringIssueField")]
        StringIssueField = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NumberIssueField")]
        NumberIssueField = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"RichTextIssueField")]
        RichTextIssueField = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"SingleSelectIssueField")]
        SingleSelectIssueField = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"MultiSelectIssueField")]
        MultiSelectIssueField = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TextIssueField")]
        TextIssueField = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CreatePriorityDetailsIconUrl
    {

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/blocker.png")]
        _images_icons_priorities_blocker_png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/critical.png")]
        _images_icons_priorities_critical_png = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/high.png")]
        _images_icons_priorities_high_png = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/highest.png")]
        _images_icons_priorities_highest_png = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/low.png")]
        _images_icons_priorities_low_png = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/lowest.png")]
        _images_icons_priorities_lowest_png = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/major.png")]
        _images_icons_priorities_major_png = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/medium.png")]
        _images_icons_priorities_medium_png = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/minor.png")]
        _images_icons_priorities_minor_png = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/trivial.png")]
        _images_icons_priorities_trivial_png = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CreateProjectDetailsAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CreateProjectDetailsProjectTemplateKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-agility-kanban")]
        Com_pyxis_greenhopper_jiraGhSimplifiedAgilityKanban = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-agility-scrum")]
        Com_pyxis_greenhopper_jiraGhSimplifiedAgilityScrum = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-basic")]
        Com_pyxis_greenhopper_jiraGhSimplifiedBasic = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-kanban-classic")]
        Com_pyxis_greenhopper_jiraGhSimplifiedKanbanClassic = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-simplified-scrum-classic")]
        Com_pyxis_greenhopper_jiraGhSimplifiedScrumClassic = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"com.pyxis.greenhopper.jira:gh-cross-team-template")]
        Com_pyxis_greenhopper_jiraGhCrossTeamTemplate = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-it-service-management")]
        Com_atlassian_servicedeskSimplifiedItServiceManagement = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-general-service-desk")]
        Com_atlassian_servicedeskSimplifiedGeneralServiceDesk = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-general-service-desk-it")]
        Com_atlassian_servicedeskSimplifiedGeneralServiceDeskIt = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-general-service-desk-business")]
        Com_atlassian_servicedeskSimplifiedGeneralServiceDeskBusiness = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-internal-service-desk")]
        Com_atlassian_servicedeskSimplifiedInternalServiceDesk = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-external-service-desk")]
        Com_atlassian_servicedeskSimplifiedExternalServiceDesk = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-hr-service-desk")]
        Com_atlassian_servicedeskSimplifiedHrServiceDesk = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-facilities-service-desk")]
        Com_atlassian_servicedeskSimplifiedFacilitiesServiceDesk = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-legal-service-desk")]
        Com_atlassian_servicedeskSimplifiedLegalServiceDesk = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-marketing-service-desk")]
        Com_atlassian_servicedeskSimplifiedMarketingServiceDesk = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-finance-service-desk")]
        Com_atlassian_servicedeskSimplifiedFinanceServiceDesk = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-analytics-service-desk")]
        Com_atlassian_servicedeskSimplifiedAnalyticsServiceDesk = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-design-service-desk")]
        Com_atlassian_servicedeskSimplifiedDesignServiceDesk = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-sales-service-desk")]
        Com_atlassian_servicedeskSimplifiedSalesServiceDesk = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-halp-service-desk")]
        Com_atlassian_servicedeskSimplifiedHalpServiceDesk = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-blank-project-it")]
        Com_atlassian_servicedeskSimplifiedBlankProjectIt = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:simplified-blank-project-business")]
        Com_atlassian_servicedeskSimplifiedBlankProjectBusiness = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-it-service-desk")]
        Com_atlassian_servicedeskNextGenItServiceDesk = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-hr-service-desk")]
        Com_atlassian_servicedeskNextGenHrServiceDesk = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-legal-service-desk")]
        Com_atlassian_servicedeskNextGenLegalServiceDesk = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-marketing-service-desk")]
        Com_atlassian_servicedeskNextGenMarketingServiceDesk = 26,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-facilities-service-desk")]
        Com_atlassian_servicedeskNextGenFacilitiesServiceDesk = 27,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-general-service-desk")]
        Com_atlassian_servicedeskNextGenGeneralServiceDesk = 28,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-general-it-service-desk")]
        Com_atlassian_servicedeskNextGenGeneralItServiceDesk = 29,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-general-business-service-desk")]
        Com_atlassian_servicedeskNextGenGeneralBusinessServiceDesk = 30,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-analytics-service-desk")]
        Com_atlassian_servicedeskNextGenAnalyticsServiceDesk = 31,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-finance-service-desk")]
        Com_atlassian_servicedeskNextGenFinanceServiceDesk = 32,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-design-service-desk")]
        Com_atlassian_servicedeskNextGenDesignServiceDesk = 33,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.servicedesk:next-gen-sales-service-desk")]
        Com_atlassian_servicedeskNextGenSalesServiceDesk = 34,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-content-management")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedContentManagement = 35,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedDocumentApproval = 36,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedLeadTracking = 37,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-process-control")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedProcessControl = 38,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-procurement")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedProcurement = 39,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-project-management")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedProjectManagement = 40,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedRecruitment = 41,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira-core-project-templates:jira-core-simplified-task-")]
        Com_atlassian_jiraCoreProjectTemplatesJiraCoreSimplifiedTask = 42,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CreateProjectDetailsProjectTypeKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CreateWorkflowConditionOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AND")]
        AND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OR")]
        OR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CreateWorkflowTransitionDetailsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"initial")]
        Initial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"directed")]
        Directed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum CustomFieldDefinitionJsonBeanSearcherKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesCascadingselectsearcher = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:daterange")]
        Com_atlassian_jira_plugin_system_customfieldtypesDaterange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:datetimerange")]
        Com_atlassian_jira_plugin_system_customfieldtypesDatetimerange = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:exactnumber")]
        Com_atlassian_jira_plugin_system_customfieldtypesExactnumber = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesExacttextsearcher = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesGrouppickersearcher = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesLabelsearcher = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesMultiselectsearcher = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:numberrange")]
        Com_atlassian_jira_plugin_system_customfieldtypesNumberrange = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesProjectsearcher = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:textsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesTextsearcher = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesUserpickergroupsearcher = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesVersionsearcher = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum DashboardGadgetColor
    {

        [System.Runtime.Serialization.EnumMember(Value = @"blue")]
        Blue = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"red")]
        Red = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"yellow")]
        Yellow = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"green")]
        Green = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"cyan")]
        Cyan = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"purple")]
        Purple = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"gray")]
        Gray = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"white")]
        White = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum DefaultShareScopeScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"AUTHENTICATED")]
        AUTHENTICATED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PRIVATE")]
        PRIVATE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum EventNotificationNotificationType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CurrentAssignee")]
        CurrentAssignee = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Reporter")]
        Reporter = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CurrentUser")]
        CurrentUser = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ProjectLead")]
        ProjectLead = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ComponentLead")]
        ComponentLead = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"User")]
        User = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Group")]
        Group = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ProjectRole")]
        ProjectRole = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"EmailAddress")]
        EmailAddress = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"AllWatchers")]
        AllWatchers = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"UserCustomField")]
        UserCustomField = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"GroupCustomField")]
        GroupCustomField = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldChangedClauseOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"changed")]
        Changed = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldLastUsedType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TRACKED")]
        TRACKED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_TRACKED")]
        NOT_TRACKED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NO_INFORMATION")]
        NO_INFORMATION = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldReferenceDataAuto
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldReferenceDataDeprecated
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldReferenceDataOrderable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldReferenceDataSearchable
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldValueClauseOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"=")]
        Eq = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"!=")]
        Ne = 1,

        [System.Runtime.Serialization.EnumMember(Value = @">")]
        Gt = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"<")]
        Lt = 3,

        [System.Runtime.Serialization.EnumMember(Value = @">=")]
        Ge = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"<=")]
        Le = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"in")]
        In = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"not in")]
        Not_in = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"~")]
        _ = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"~=")]
        Approx = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"is")]
        Is = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"is not")]
        Is_not = 11,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FieldWasClauseOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"was")]
        Was = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"was in")]
        Was_in = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"was not in")]
        Was_not_in = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"was not")]
        Was_not = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum FunctionReferenceDataIsList
    {

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Attributes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelectable")]
        NotSelectable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"defaultValue")]
        DefaultValue = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum GroupLabelType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN")]
        ADMIN = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE")]
        SINGLE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE")]
        MULTIPLE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Attributes2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelectable")]
        NotSelectable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"defaultValue")]
        DefaultValue = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum IssueTypeCreateBeanType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"subtask")]
        Subtask = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"standard")]
        Standard = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum JexpJqlIssuesValidation
    {

        [System.Runtime.Serialization.EnumMember(Value = @"strict")]
        Strict = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum JiraExpressionValidationErrorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"syntax")]
        Syntax = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"type")]
        Type = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"other")]
        Other = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum JiraStatusStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum JiraWorkflowStatusStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum JqlQueryClauseTimePredicateOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"before")]
        Before = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"after")]
        After = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"from")]
        From = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"to")]
        To = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"on")]
        On = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"during")]
        During = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"by")]
        By = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum JqlQueryFieldEntityPropertyType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"number")]
        Number = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"string")]
        String = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"text")]
        Text = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"date")]
        Date = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum JqlQueryOrderByClauseElementDirection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum JsonNodeNumberType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INT")]
        INT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"LONG")]
        LONG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_INTEGER")]
        BIG_INTEGER = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FLOAT")]
        FLOAT = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE")]
        DOUBLE = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"BIG_DECIMAL")]
        BIG_DECIMAL = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum KeywordOperandKeyword
    {

        [System.Runtime.Serialization.EnumMember(Value = @"empty")]
        Empty = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum LicensedApplicationPlan
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNLICENSED")]
        UNLICENSED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"FREE")]
        FREE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PAID")]
        PAID = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum MoveFieldBeanPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Earlier")]
        Earlier = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Later")]
        Later = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderOfCustomFieldOptionsPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum OrderOfIssueTypesPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectTypeKey3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectStyle
    {

        [System.Runtime.Serialization.EnumMember(Value = @"classic")]
        Classic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"next-gen")]
        NextGen = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectComponentAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectComponentRealAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_DEFAULT")]
        PROJECT_DEFAULT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT_LEAD")]
        COMPONENT_LEAD = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectDetailsProjectTypeKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectFeatureState2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMING_SOON")]
        COMING_SOON = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectFeatureStateState
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMING_SOON")]
        COMING_SOON = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Attributes3
    {

        [System.Runtime.Serialization.EnumMember(Value = @"notSelectable")]
        NotSelectable = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"defaultValue")]
        DefaultValue = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum RoleActorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"atlassian-group-role-actor")]
        AtlassianGroupRoleActor = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"atlassian-user-role-actor")]
        AtlassianUserRoleActor = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPLATE")]
        TEMPLATE = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SearchRequestBeanValidateQuery
    {

        [System.Runtime.Serialization.EnumMember(Value = @"strict")]
        Strict = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"warn")]
        Warn = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"true")]
        True = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"false")]
        False = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SharePermissionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"projectRole")]
        ProjectRole = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"loggedin")]
        Loggedin = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"authenticated")]
        Authenticated = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"project-unknown")]
        ProjectUnknown = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum SharePermissionInputBeanType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"user")]
        User = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"project")]
        Project = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"projectRole")]
        ProjectRole = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"authenticated")]
        Authenticated = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum StatusCreateStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum StatusMetadataCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum StatusScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum StatusUpdateStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TaskProgressBeanObjectStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENQUEUED")]
        ENQUEUED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCEL_REQUESTED")]
        CANCEL_REQUESTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEAD")]
        DEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TaskProgressBeanRemoveOptionFromIssuesResultStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENQUEUED")]
        ENQUEUED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPLETE")]
        COMPLETE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FAILED")]
        FAILED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCEL_REQUESTED")]
        CANCEL_REQUESTED = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"DEAD")]
        DEAD = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TimeTrackingConfigurationDefaultUnit
    {

        [System.Runtime.Serialization.EnumMember(Value = @"minute")]
        Minute = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"hour")]
        Hour = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"day")]
        Day = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"week")]
        Week = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TimeTrackingConfigurationTimeFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"pretty")]
        Pretty = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"days")]
        Days = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"hours")]
        Hours = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TransitionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"global")]
        Global = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"initial")]
        Initial = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"directed")]
        Directed = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TransitionUpdateDTOType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECTED")]
        DIRECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum UiModificationContextDetailsViewType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GIC")]
        GIC = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IssueView")]
        IssueView = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum UpdateCustomFieldDetailsSearcherKey
    {

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesCascadingselectsearcher = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:daterange")]
        Com_atlassian_jira_plugin_system_customfieldtypesDaterange = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:datetimerange")]
        Com_atlassian_jira_plugin_system_customfieldtypesDatetimerange = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:exactnumber")]
        Com_atlassian_jira_plugin_system_customfieldtypesExactnumber = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesExacttextsearcher = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesGrouppickersearcher = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesLabelsearcher = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesMultiselectsearcher = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:numberrange")]
        Com_atlassian_jira_plugin_system_customfieldtypesNumberrange = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesProjectsearcher = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:textsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesTextsearcher = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesUserpickergroupsearcher = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher")]
        Com_atlassian_jira_plugin_system_customfieldtypesVersionsearcher = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum UpdatePriorityDetailsIconUrl
    {

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/blocker.png")]
        _images_icons_priorities_blocker_png = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/critical.png")]
        _images_icons_priorities_critical_png = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/high.png")]
        _images_icons_priorities_high_png = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/highest.png")]
        _images_icons_priorities_highest_png = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/low.png")]
        _images_icons_priorities_low_png = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/lowest.png")]
        _images_icons_priorities_lowest_png = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/major.png")]
        _images_icons_priorities_major_png = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/medium.png")]
        _images_icons_priorities_medium_png = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/minor.png")]
        _images_icons_priorities_minor_png = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"/images/icons/priorities/trivial.png")]
        _images_icons_priorities_trivial_png = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum UpdateProjectDetailsAssigneeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT_LEAD")]
        PROJECT_LEAD = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"UNASSIGNED")]
        UNASSIGNED = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum UserAccountType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"atlassian")]
        Atlassian = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"app")]
        App = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"customer")]
        Customer = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum UserPermissionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Levels
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Levels2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VersionMoveBeanPosition
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Earlier")]
        Earlier = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Later")]
        Later = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"First")]
        First = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Last")]
        Last = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum VisibilityType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"group")]
        Group = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"role")]
        Role = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Events
    {

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_created")]
        JiraIssue_created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_updated")]
        JiraIssue_updated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_deleted")]
        JiraIssue_deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_created")]
        Comment_created = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_updated")]
        Comment_updated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_deleted")]
        Comment_deleted = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"issue_property_set")]
        Issue_property_set = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"issue_property_deleted")]
        Issue_property_deleted = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Events2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_created")]
        JiraIssue_created = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_updated")]
        JiraIssue_updated = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"jira:issue_deleted")]
        JiraIssue_deleted = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_created")]
        Comment_created = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_updated")]
        Comment_updated = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"comment_deleted")]
        Comment_deleted = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"issue_property_set")]
        Issue_property_set = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"issue_property_deleted")]
        Issue_property_deleted = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowCapabilitiesEditorScope
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

    }

    /// <summary>
    /// The types of projects that this capability set is available for.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ProjectTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"software")]
        Software = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"service_desk")]
        Service_desk = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"product_discovery")]
        Product_discovery = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"business")]
        Business = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"unknown")]
        Unknown = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowCompoundConditionOperator
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AND")]
        AND = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"OR")]
        OR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowScopeType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PROJECT")]
        PROJECT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowStatusUpdateStatusCategory
    {

        [System.Runtime.Serialization.EnumMember(Value = @"TODO")]
        TODO = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IN_PROGRESS")]
        IN_PROGRESS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DONE")]
        DONE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowTransitionsType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"INITIAL")]
        INITIAL = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"GLOBAL")]
        GLOBAL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DIRECTED")]
        DIRECTED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowValidationErrorLevel
    {

        [System.Runtime.Serialization.EnumMember(Value = @"WARNING")]
        WARNING = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum WorkflowValidationErrorType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"RULE")]
        RULE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS")]
        STATUS = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS_LAYOUT")]
        STATUS_LAYOUT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS_PROPERTY")]
        STATUS_PROPERTY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"WORKFLOW")]
        WORKFLOW = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSITION")]
        TRANSITION = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"TRANSITION_PROPERTY")]
        TRANSITION_PROPERTY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SCOPE")]
        SCOPE = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"STATUS_MAPPING")]
        STATUS_MAPPING = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"TRIGGER")]
        TRIGGER = 9,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string fileName, string contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string FileName { get; private set; }

        public string ContentType { get; private set; }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.20.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604